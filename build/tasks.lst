ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	140
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.uxPendedTicks,"aw",%nobits
 105              		.align	2
 108              	uxPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB5:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 585 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 14


 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 589 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0CD1     		bne	.L2
 179              	.LBB113:
 180              	.LBB114:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 15


  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 16


 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 17


 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 72B6     		cpsid i													
 187 001a 83F31188 		msr basepri, r3											
 188 001e BFF36F8F 		isb														
 189 0022 BFF34F8F 		dsb														
 190 0026 62B6     		cpsie i													
 191              	
 192              	@ 0 "" 2
 193              		.thumb
 194              		.syntax unified
 195 0028 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 18


 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 196              		.loc 2 205 1
 197 002a 00BF     		nop
 198              	.L3:
 199              	.LBE114:
 200              	.LBE113:
 201              		.loc 1 589 3 discriminator 1
 202 002c FEE7     		b	.L3
 203              	.L2:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 204              		.loc 1 590 3
 205 002e BB6B     		ldr	r3, [r7, #56]
 206 0030 002B     		cmp	r3, #0
 207 0032 0CD1     		bne	.L4
 208              	.LBB115:
 209              	.LBB116:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 210              		.loc 2 195 2
 211              		.syntax unified
 212              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 213 0034 4FF05003 			mov r3, #80												
 214 0038 72B6     		cpsid i													
 215 003a 83F31188 		msr basepri, r3											
 216 003e BFF36F8F 		isb														
 217 0042 BFF34F8F 		dsb														
 218 0046 62B6     		cpsie i													
 219              	
 220              	@ 0 "" 2
 221              		.thumb
 222              		.syntax unified
 223 0048 FB61     		str	r3, [r7, #28]
 224              		.loc 2 205 1
 225 004a 00BF     		nop
 226              	.L5:
 227              	.LBE116:
 228              	.LBE115:
 229              		.loc 1 590 3 discriminator 2
 230 004c FEE7     		b	.L5
 231              	.L4:
 232              	.LBB117:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 233              		.loc 1 597 20
 234 004e 4FF49063 		mov	r3, #1152
 235 0052 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 236              		.loc 1 598 4
 237 0054 3B69     		ldr	r3, [r7, #16]
 238 0056 B3F5906F 		cmp	r3, #1152
 239 005a 0CD0     		beq	.L6
 240              	.LBB118:
 241              	.LBB119:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 19


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 242              		.loc 2 195 2
 243              		.syntax unified
 244              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 245 005c 4FF05003 			mov r3, #80												
 246 0060 72B6     		cpsid i													
 247 0062 83F31188 		msr basepri, r3											
 248 0066 BFF36F8F 		isb														
 249 006a BFF34F8F 		dsb														
 250 006e 62B6     		cpsie i													
 251              	
 252              	@ 0 "" 2
 253              		.thumb
 254              		.syntax unified
 255 0070 BB61     		str	r3, [r7, #24]
 256              		.loc 2 205 1
 257 0072 00BF     		nop
 258              	.L7:
 259              	.LBE119:
 260              	.LBE118:
 261              		.loc 1 598 4 discriminator 3
 262 0074 FEE7     		b	.L7
 263              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 264              		.loc 1 599 4
 265 0076 3B69     		ldr	r3, [r7, #16]
 266              	.LBE117:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 267              		.loc 1 604 5
 268 0078 BB6B     		ldr	r3, [r7, #56]
 269 007a 002B     		cmp	r3, #0
 270 007c 1ED0     		beq	.L8
 271              		.loc 1 604 32 discriminator 1
 272 007e 7B6B     		ldr	r3, [r7, #52]
 273 0080 002B     		cmp	r3, #0
 274 0082 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 275              		.loc 1 608 13
 276 0084 BB6B     		ldr	r3, [r7, #56]
 277 0086 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 278              		.loc 1 609 22
 279 0088 7B6A     		ldr	r3, [r7, #36]
 280 008a 7A6B     		ldr	r2, [r7, #52]
 281 008c 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 20


 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 282              		.loc 1 615 37
 283 008e 7B6A     		ldr	r3, [r7, #36]
 284 0090 0222     		movs	r2, #2
 285 0092 83F87D24 		strb	r2, [r3, #1149]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 286              		.loc 1 619 4
 287 0096 0023     		movs	r3, #0
 288 0098 0393     		str	r3, [sp, #12]
 289 009a 7B6A     		ldr	r3, [r7, #36]
 290 009c 0293     		str	r3, [sp, #8]
 291 009e 07F11403 		add	r3, r7, #20
 292 00a2 0193     		str	r3, [sp, #4]
 293 00a4 3B6B     		ldr	r3, [r7, #48]
 294 00a6 0093     		str	r3, [sp]
 295 00a8 3B68     		ldr	r3, [r7]
 296 00aa 7A68     		ldr	r2, [r7, #4]
 297 00ac B968     		ldr	r1, [r7, #8]
 298 00ae F868     		ldr	r0, [r7, #12]
 299 00b0 FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 300              		.loc 1 620 4
 301 00b4 786A     		ldr	r0, [r7, #36]
 302 00b6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 303 00ba 01E0     		b	.L9
 304              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 305              		.loc 1 624 12
 306 00bc 0023     		movs	r3, #0
 307 00be 7B61     		str	r3, [r7, #20]
 308              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 309              		.loc 1 627 10
 310 00c0 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 311              		.loc 1 628 2
 312 00c2 1846     		mov	r0, r3
 313 00c4 2837     		adds	r7, r7, #40
 314              	.LCFI3:
 315              		.cfi_def_cfa_offset 8
 316 00c6 BD46     		mov	sp, r7
 317              	.LCFI4:
 318              		.cfi_def_cfa_register 13
 319              		@ sp needed
 320 00c8 80BD     		pop	{r7, pc}
 321              		.cfi_endproc
 322              	.LFE5:
 324              		.section	.text.xTaskCreate,"ax",%progbits
 325              		.align	1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 21


 326              		.global	xTaskCreate
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 331              	xTaskCreate:
 332              	.LFB6:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 22


 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 23


 333              		.loc 1 736 2
 334              		.cfi_startproc
 335              		@ args = 8, pretend = 0, frame = 32
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI5:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 8CB0     		sub	sp, sp, #48
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 56
 345 0004 04AF     		add	r7, sp, #16
 346              	.LCFI7:
 347              		.cfi_def_cfa 7, 40
 348 0006 F860     		str	r0, [r7, #12]
 349 0008 B960     		str	r1, [r7, #8]
 350 000a 3B60     		str	r3, [r7]
 351 000c 1346     		mov	r3, r2	@ movhi
 352 000e FB80     		strh	r3, [r7, #6]	@ movhi
 353              	.LBB120:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 354              		.loc 1 770 32
 355 0010 FB88     		ldrh	r3, [r7, #6]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 24


 356              		.loc 1 770 14
 357 0012 9B00     		lsls	r3, r3, #2
 358 0014 1846     		mov	r0, r3
 359 0016 FFF7FEFF 		bl	pvPortMalloc
 360 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 361              		.loc 1 772 6
 362 001c 7B69     		ldr	r3, [r7, #20]
 363 001e 002B     		cmp	r3, #0
 364 0020 0FD0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 365              		.loc 1 775 28
 366 0022 4FF49060 		mov	r0, #1152
 367 0026 FFF7FEFF 		bl	pvPortMalloc
 368 002a F861     		str	r0, [r7, #28]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 369              		.loc 1 777 7
 370 002c FB69     		ldr	r3, [r7, #28]
 371 002e 002B     		cmp	r3, #0
 372 0030 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 373              		.loc 1 780 24
 374 0032 FB69     		ldr	r3, [r7, #28]
 375 0034 7A69     		ldr	r2, [r7, #20]
 376 0036 1A63     		str	r2, [r3, #48]
 377 0038 05E0     		b	.L14
 378              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 379              		.loc 1 786 6
 380 003a 7869     		ldr	r0, [r7, #20]
 381 003c FFF7FEFF 		bl	vPortFree
 382 0040 01E0     		b	.L14
 383              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 384              		.loc 1 791 14
 385 0042 0023     		movs	r3, #0
 386 0044 FB61     		str	r3, [r7, #28]
 387              	.L14:
 388              	.LBE120:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 25


 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 389              		.loc 1 796 5
 390 0046 FB69     		ldr	r3, [r7, #28]
 391 0048 002B     		cmp	r3, #0
 392 004a 17D0     		beq	.L15
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 393              		.loc 1 802 37
 394 004c FB69     		ldr	r3, [r7, #28]
 395 004e 0022     		movs	r2, #0
 396 0050 83F87D24 		strb	r2, [r3, #1149]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 397              		.loc 1 806 4
 398 0054 FA88     		ldrh	r2, [r7, #6]
 399 0056 0023     		movs	r3, #0
 400 0058 0393     		str	r3, [sp, #12]
 401 005a FB69     		ldr	r3, [r7, #28]
 402 005c 0293     		str	r3, [sp, #8]
 403 005e FB6A     		ldr	r3, [r7, #44]
 404 0060 0193     		str	r3, [sp, #4]
 405 0062 BB6A     		ldr	r3, [r7, #40]
 406 0064 0093     		str	r3, [sp]
 407 0066 3B68     		ldr	r3, [r7]
 408 0068 B968     		ldr	r1, [r7, #8]
 409 006a F868     		ldr	r0, [r7, #12]
 410 006c FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 411              		.loc 1 807 4
 412 0070 F869     		ldr	r0, [r7, #28]
 413 0072 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 414              		.loc 1 808 12
 415 0076 0123     		movs	r3, #1
 416 0078 BB61     		str	r3, [r7, #24]
 417 007a 02E0     		b	.L16
 418              	.L15:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 419              		.loc 1 812 12
 420 007c 4FF0FF33 		mov	r3, #-1
 421 0080 BB61     		str	r3, [r7, #24]
 422              	.L16:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 423              		.loc 1 815 10
 424 0082 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 26


 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 425              		.loc 1 816 2
 426 0084 1846     		mov	r0, r3
 427 0086 2037     		adds	r7, r7, #32
 428              	.LCFI8:
 429              		.cfi_def_cfa_offset 8
 430 0088 BD46     		mov	sp, r7
 431              	.LCFI9:
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 008a 80BD     		pop	{r7, pc}
 435              		.cfi_endproc
 436              	.LFE6:
 438              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 439              		.align	1
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 444              	prvInitialiseNewTask:
 445              	.LFB7:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 446              		.loc 1 829 1
 447              		.cfi_startproc
 448              		@ args = 16, pretend = 0, frame = 32
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI10:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 88B0     		sub	sp, sp, #32
 456              	.LCFI11:
 457              		.cfi_def_cfa_offset 40
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI12:
 460              		.cfi_def_cfa_register 7
 461 0006 F860     		str	r0, [r7, #12]
 462 0008 B960     		str	r1, [r7, #8]
 463 000a 7A60     		str	r2, [r7, #4]
 464 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 27


 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 465              		.loc 1 851 28
 466 000e 3B6B     		ldr	r3, [r7, #48]
 467 0010 186B     		ldr	r0, [r3, #48]
 468              		.loc 1 851 12
 469 0012 7B68     		ldr	r3, [r7, #4]
 470 0014 9B00     		lsls	r3, r3, #2
 471 0016 1A46     		mov	r2, r3
 472 0018 A521     		movs	r1, #165
 473 001a FFF7FEFF 		bl	memset
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 474              		.loc 1 861 29
 475 001e 3B6B     		ldr	r3, [r7, #48]
 476 0020 1A6B     		ldr	r2, [r3, #48]
 477              		.loc 1 861 38
 478 0022 7968     		ldr	r1, [r7, #4]
 479 0024 6FF04043 		mvn	r3, #-1073741824
 480 0028 0B44     		add	r3, r3, r1
 481 002a 9B00     		lsls	r3, r3, #2
 482              		.loc 1 861 16
 483 002c 1344     		add	r3, r3, r2
 484 002e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 485              		.loc 1 862 40
 486 0030 BB69     		ldr	r3, [r7, #24]
 487              		.loc 1 862 81
 488 0032 23F00703 		bic	r3, r3, #7
 489              		.loc 1 862 16
 490 0036 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 28


 491              		.loc 1 865 3
 492 0038 BB69     		ldr	r3, [r7, #24]
 493 003a 03F00703 		and	r3, r3, #7
 494 003e 002B     		cmp	r3, #0
 495 0040 0CD0     		beq	.L19
 496              	.LBB121:
 497              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 498              		.loc 2 195 2
 499              		.syntax unified
 500              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 501 0042 4FF05003 			mov r3, #80												
 502 0046 72B6     		cpsid i													
 503 0048 83F31188 		msr basepri, r3											
 504 004c BFF36F8F 		isb														
 505 0050 BFF34F8F 		dsb														
 506 0054 62B6     		cpsie i													
 507              	
 508              	@ 0 "" 2
 509              		.thumb
 510              		.syntax unified
 511 0056 7B61     		str	r3, [r7, #20]
 512              		.loc 2 205 1
 513 0058 00BF     		nop
 514              	.L20:
 515              	.LBE122:
 516              	.LBE121:
 517              		.loc 1 865 3 discriminator 1
 518 005a FEE7     		b	.L20
 519              	.L19:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 520              		.loc 1 889 4
 521 005c BB68     		ldr	r3, [r7, #8]
 522 005e 002B     		cmp	r3, #0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 29


 523 0060 1FD0     		beq	.L21
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 524              		.loc 1 891 10
 525 0062 0023     		movs	r3, #0
 526 0064 FB61     		str	r3, [r7, #28]
 527              		.loc 1 891 3
 528 0066 12E0     		b	.L22
 529              	.L25:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 530              		.loc 1 893 38
 531 0068 BA68     		ldr	r2, [r7, #8]
 532 006a FB69     		ldr	r3, [r7, #28]
 533 006c 1344     		add	r3, r3, r2
 534 006e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 535              		.loc 1 893 30
 536 0070 3A6B     		ldr	r2, [r7, #48]
 537 0072 FB69     		ldr	r3, [r7, #28]
 538 0074 1344     		add	r3, r3, r2
 539 0076 3433     		adds	r3, r3, #52
 540 0078 0A46     		mov	r2, r1
 541 007a 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 542              		.loc 1 898 14
 543 007c BA68     		ldr	r2, [r7, #8]
 544 007e FB69     		ldr	r3, [r7, #28]
 545 0080 1344     		add	r3, r3, r2
 546 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 547              		.loc 1 898 6
 548 0084 002B     		cmp	r3, #0
 549 0086 06D0     		beq	.L29
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 550              		.loc 1 891 77 discriminator 2
 551 0088 FB69     		ldr	r3, [r7, #28]
 552 008a 0133     		adds	r3, r3, #1
 553 008c FB61     		str	r3, [r7, #28]
 554              	.L22:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 555              		.loc 1 891 3 discriminator 1
 556 008e FB69     		ldr	r3, [r7, #28]
 557 0090 0F2B     		cmp	r3, #15
 558 0092 E9D9     		bls	.L25
 559 0094 00E0     		b	.L24
 560              	.L29:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 561              		.loc 1 900 5
 562 0096 00BF     		nop
 563              	.L24:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 30


 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 564              		.loc 1 910 55
 565 0098 3B6B     		ldr	r3, [r7, #48]
 566 009a 0022     		movs	r2, #0
 567 009c 83F84320 		strb	r2, [r3, #67]
 568 00a0 03E0     		b	.L26
 569              	.L21:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 570              		.loc 1 916 29
 571 00a2 3B6B     		ldr	r3, [r7, #48]
 572 00a4 0022     		movs	r2, #0
 573 00a6 83F83420 		strb	r2, [r3, #52]
 574              	.L26:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 575              		.loc 1 921 4
 576 00aa BB6A     		ldr	r3, [r7, #40]
 577 00ac 062B     		cmp	r3, #6
 578 00ae 01D9     		bls	.L27
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 579              		.loc 1 923 14
 580 00b0 0623     		movs	r3, #6
 581 00b2 BB62     		str	r3, [r7, #40]
 582              	.L27:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 583              		.loc 1 930 23
 584 00b4 3B6B     		ldr	r3, [r7, #48]
 585 00b6 BA6A     		ldr	r2, [r7, #40]
 586 00b8 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 587              		.loc 1 933 28
 588 00ba 3B6B     		ldr	r3, [r7, #48]
 589 00bc BA6A     		ldr	r2, [r7, #40]
 590 00be 5A64     		str	r2, [r3, #68]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 31


 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 591              		.loc 1 934 27
 592 00c0 3B6B     		ldr	r3, [r7, #48]
 593 00c2 0022     		movs	r2, #0
 594 00c4 9A64     		str	r2, [r3, #72]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 595              		.loc 1 938 2
 596 00c6 3B6B     		ldr	r3, [r7, #48]
 597 00c8 0433     		adds	r3, r3, #4
 598 00ca 1846     		mov	r0, r3
 599 00cc FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 600              		.loc 1 939 2
 601 00d0 3B6B     		ldr	r3, [r7, #48]
 602 00d2 1833     		adds	r3, r3, #24
 603 00d4 1846     		mov	r0, r3
 604 00d6 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 605              		.loc 1 943 2
 606 00da 3B6B     		ldr	r3, [r7, #48]
 607 00dc 3A6B     		ldr	r2, [r7, #48]
 608 00de 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 609              		.loc 1 946 2
 610 00e0 BB6A     		ldr	r3, [r7, #40]
 611 00e2 C3F10702 		rsb	r2, r3, #7
 612 00e6 3B6B     		ldr	r3, [r7, #48]
 613 00e8 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 614              		.loc 1 947 2
 615 00ea 3B6B     		ldr	r3, [r7, #48]
 616 00ec 3A6B     		ldr	r2, [r7, #48]
 617 00ee 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 618              		.loc 1 957 23
 619 00f0 3B6B     		ldr	r3, [r7, #48]
 620 00f2 0022     		movs	r2, #0
 621 00f4 DA64     		str	r2, [r3, #76]
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 32


 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 622              		.loc 1 989 29
 623 00f6 3B6B     		ldr	r3, [r7, #48]
 624 00f8 0022     		movs	r2, #0
 625 00fa C3F87824 		str	r2, [r3, #1144]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 626              		.loc 1 990 27
 627 00fe 3B6B     		ldr	r3, [r7, #48]
 628 0100 0022     		movs	r2, #0
 629 0102 83F87C24 		strb	r2, [r3, #1148]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 630              		.loc 1 997 3
 631 0106 3B6B     		ldr	r3, [r7, #48]
 632 0108 5033     		adds	r3, r3, #80
 633 010a 4FF48562 		mov	r2, #1064
 634 010e 0021     		movs	r1, #0
 635 0110 1846     		mov	r0, r3
 636 0112 FFF7FEFF 		bl	memset
 637 0116 3B6B     		ldr	r3, [r7, #48]
 638 0118 03F54F72 		add	r2, r3, #828
 639 011c 3B6B     		ldr	r3, [r7, #48]
 640 011e 5A65     		str	r2, [r3, #84]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 33


 641 0120 3B6B     		ldr	r3, [r7, #48]
 642 0122 03F56972 		add	r2, r3, #932
 643 0126 3B6B     		ldr	r3, [r7, #48]
 644 0128 9A65     		str	r2, [r3, #88]
 645 012a 3B6B     		ldr	r3, [r7, #48]
 646 012c 03F20C42 		addw	r2, r3, #1036
 647 0130 3B6B     		ldr	r3, [r7, #48]
 648 0132 DA65     		str	r2, [r3, #92]
 649 0134 396B     		ldr	r1, [r7, #48]
 650 0136 4FF00102 		mov	r2, #1
 651 013a 4FF00003 		mov	r3, #0
 652 013e C1E93E23 		strd	r2, [r1, #248]
 653 0142 3B6B     		ldr	r3, [r7, #48]
 654 0144 43F20E32 		movw	r2, #13070
 655 0148 A3F80021 		strh	r2, [r3, #256]	@ movhi
 656 014c 3B6B     		ldr	r3, [r7, #48]
 657 014e 4AF6CD32 		movw	r2, #43981
 658 0152 A3F80221 		strh	r2, [r3, #258]	@ movhi
 659 0156 3B6B     		ldr	r3, [r7, #48]
 660 0158 41F23422 		movw	r2, #4660
 661 015c A3F80421 		strh	r2, [r3, #260]	@ movhi
 662 0160 3B6B     		ldr	r3, [r7, #48]
 663 0162 4EF26D62 		movw	r2, #58989
 664 0166 A3F80621 		strh	r2, [r3, #262]	@ movhi
 665 016a 3B6B     		ldr	r3, [r7, #48]
 666 016c 4DF6EC62 		movw	r2, #57068
 667 0170 A3F80821 		strh	r2, [r3, #264]	@ movhi
 668 0174 3B6B     		ldr	r3, [r7, #48]
 669 0176 0522     		movs	r2, #5
 670 0178 A3F80A21 		strh	r2, [r3, #266]	@ movhi
 671 017c 3B6B     		ldr	r3, [r7, #48]
 672 017e 0B22     		movs	r2, #11
 673 0180 A3F80C21 		strh	r2, [r3, #268]	@ movhi
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 34


1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 674              		.loc 1 1053 29
 675 0184 3A68     		ldr	r2, [r7]
 676 0186 F968     		ldr	r1, [r7, #12]
 677 0188 B869     		ldr	r0, [r7, #24]
 678 018a FFF7FEFF 		bl	pxPortInitialiseStack
 679 018e 0246     		mov	r2, r0
 680              		.loc 1 1053 27
 681 0190 3B6B     		ldr	r3, [r7, #48]
 682 0192 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 683              		.loc 1 1059 4
 684 0194 FB6A     		ldr	r3, [r7, #44]
 685 0196 002B     		cmp	r3, #0
 686 0198 02D0     		beq	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 687              		.loc 1 1063 18
 688 019a FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 35


 689 019c 3A6B     		ldr	r2, [r7, #48]
 690 019e 1A60     		str	r2, [r3]
 691              	.L30:
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 692              		.loc 1 1069 1
 693 01a0 00BF     		nop
 694 01a2 2037     		adds	r7, r7, #32
 695              	.LCFI13:
 696              		.cfi_def_cfa_offset 8
 697 01a4 BD46     		mov	sp, r7
 698              	.LCFI14:
 699              		.cfi_def_cfa_register 13
 700              		@ sp needed
 701 01a6 80BD     		pop	{r7, pc}
 702              		.cfi_endproc
 703              	.LFE7:
 705              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 706              		.align	1
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	prvAddNewTaskToReadyList:
 712              	.LFB8:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 713              		.loc 1 1073 1
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 8
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              	.LCFI15:
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 82B0     		sub	sp, sp, #8
 723              	.LCFI16:
 724              		.cfi_def_cfa_offset 16
 725 0004 00AF     		add	r7, sp, #0
 726              	.LCFI17:
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 729              		.loc 1 1076 2
 730 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 731              		.loc 1 1078 25
 732 000c 2A4B     		ldr	r3, .L36
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 36


 733 000e 1B68     		ldr	r3, [r3]
 734 0010 0133     		adds	r3, r3, #1
 735 0012 294A     		ldr	r2, .L36
 736 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 737              		.loc 1 1079 20
 738 0016 294B     		ldr	r3, .L36+4
 739 0018 1B68     		ldr	r3, [r3]
 740              		.loc 1 1079 5
 741 001a 002B     		cmp	r3, #0
 742 001c 09D1     		bne	.L32
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 743              		.loc 1 1083 17
 744 001e 274A     		ldr	r2, .L36+4
 745 0020 7B68     		ldr	r3, [r7, #4]
 746 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 747              		.loc 1 1085 31
 748 0024 244B     		ldr	r3, .L36
 749 0026 1B68     		ldr	r3, [r3]
 750              		.loc 1 1085 6
 751 0028 012B     		cmp	r3, #1
 752 002a 10D1     		bne	.L33
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 753              		.loc 1 1090 5
 754 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 755 0030 0DE0     		b	.L33
 756              	.L32:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 757              		.loc 1 1102 26
 758 0032 234B     		ldr	r3, .L36+8
 759 0034 1B68     		ldr	r3, [r3]
 760              		.loc 1 1102 6
 761 0036 002B     		cmp	r3, #0
 762 0038 09D1     		bne	.L33
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 763              		.loc 1 1104 21
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 37


 764 003a 204B     		ldr	r3, .L36+4
 765 003c 1B68     		ldr	r3, [r3]
 766 003e DA6A     		ldr	r2, [r3, #44]
 767              		.loc 1 1104 45
 768 0040 7B68     		ldr	r3, [r7, #4]
 769 0042 DB6A     		ldr	r3, [r3, #44]
 770              		.loc 1 1104 7
 771 0044 9A42     		cmp	r2, r3
 772 0046 02D8     		bhi	.L33
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 773              		.loc 1 1106 19
 774 0048 1C4A     		ldr	r2, .L36+4
 775 004a 7B68     		ldr	r3, [r7, #4]
 776 004c 1360     		str	r3, [r2]
 777              	.L33:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 778              		.loc 1 1119 15
 779 004e 1D4B     		ldr	r3, .L36+12
 780 0050 1B68     		ldr	r3, [r3]
 781 0052 0133     		adds	r3, r3, #1
 782 0054 1B4A     		ldr	r2, .L36+12
 783 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 784              		.loc 1 1129 3
 785 0058 7B68     		ldr	r3, [r7, #4]
 786 005a DB6A     		ldr	r3, [r3, #44]
 787 005c 0122     		movs	r2, #1
 788 005e 9A40     		lsls	r2, r2, r3
 789 0060 194B     		ldr	r3, .L36+16
 790 0062 1B68     		ldr	r3, [r3]
 791 0064 1343     		orrs	r3, r3, r2
 792 0066 184A     		ldr	r2, .L36+16
 793 0068 1360     		str	r3, [r2]
 794 006a 7B68     		ldr	r3, [r7, #4]
 795 006c DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 38


 796 006e 1346     		mov	r3, r2
 797 0070 9B00     		lsls	r3, r3, #2
 798 0072 1344     		add	r3, r3, r2
 799 0074 9B00     		lsls	r3, r3, #2
 800 0076 154A     		ldr	r2, .L36+20
 801 0078 1A44     		add	r2, r2, r3
 802 007a 7B68     		ldr	r3, [r7, #4]
 803 007c 0433     		adds	r3, r3, #4
 804 007e 1946     		mov	r1, r3
 805 0080 1046     		mov	r0, r2
 806 0082 FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 807              		.loc 1 1133 2
 808 0086 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 809              		.loc 1 1135 24
 810 008a 0D4B     		ldr	r3, .L36+8
 811 008c 1B68     		ldr	r3, [r3]
 812              		.loc 1 1135 4
 813 008e 002B     		cmp	r3, #0
 814 0090 0ED0     		beq	.L35
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 815              		.loc 1 1139 19
 816 0092 0A4B     		ldr	r3, .L36+4
 817 0094 1B68     		ldr	r3, [r3]
 818 0096 DA6A     		ldr	r2, [r3, #44]
 819              		.loc 1 1139 42
 820 0098 7B68     		ldr	r3, [r7, #4]
 821 009a DB6A     		ldr	r3, [r3, #44]
 822              		.loc 1 1139 5
 823 009c 9A42     		cmp	r2, r3
 824 009e 07D2     		bcs	.L35
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 825              		.loc 1 1141 4
 826 00a0 0B4B     		ldr	r3, .L36+24
 827 00a2 4FF08052 		mov	r2, #268435456
 828 00a6 1A60     		str	r2, [r3]
 829              		.syntax unified
 830              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 831 00a8 BFF34F8F 		dsb
 832              	@ 0 "" 2
 833              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 834 00ac BFF36F8F 		isb
 835              	@ 0 "" 2
 836              		.thumb
 837              		.syntax unified
 838              	.L35:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 39


1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 839              		.loc 1 1152 1
 840 00b0 00BF     		nop
 841 00b2 0837     		adds	r7, r7, #8
 842              	.LCFI18:
 843              		.cfi_def_cfa_offset 8
 844 00b4 BD46     		mov	sp, r7
 845              	.LCFI19:
 846              		.cfi_def_cfa_register 13
 847              		@ sp needed
 848 00b6 80BD     		pop	{r7, pc}
 849              	.L37:
 850              		.align	2
 851              	.L36:
 852 00b8 00000000 		.word	uxCurrentNumberOfTasks
 853 00bc 00000000 		.word	pxCurrentTCB
 854 00c0 00000000 		.word	xSchedulerRunning
 855 00c4 00000000 		.word	uxTaskNumber
 856 00c8 00000000 		.word	uxTopReadyPriority
 857 00cc 00000000 		.word	pxReadyTasksLists
 858 00d0 04ED00E0 		.word	-536810236
 859              		.cfi_endproc
 860              	.LFE8:
 862              		.section	.text.vTaskDelete,"ax",%progbits
 863              		.align	1
 864              		.global	vTaskDelete
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 869              	vTaskDelete:
 870              	.LFB9:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 871              		.loc 1 1158 2
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 16
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875 0000 80B5     		push	{r7, lr}
 876              	.LCFI20:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 7, -8
 879              		.cfi_offset 14, -4
 880 0002 84B0     		sub	sp, sp, #16
 881              	.LCFI21:
 882              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 40


 883 0004 00AF     		add	r7, sp, #0
 884              	.LCFI22:
 885              		.cfi_def_cfa_register 7
 886 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 887              		.loc 1 1161 3
 888 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 889              		.loc 1 1165 12
 890 000c 7B68     		ldr	r3, [r7, #4]
 891 000e 002B     		cmp	r3, #0
 892 0010 02D1     		bne	.L39
 893              		.loc 1 1165 12 is_stmt 0 discriminator 1
 894 0012 3A4B     		ldr	r3, .L49
 895 0014 1B68     		ldr	r3, [r3]
 896 0016 00E0     		b	.L40
 897              	.L39:
 898              		.loc 1 1165 12 discriminator 2
 899 0018 7B68     		ldr	r3, [r7, #4]
 900              	.L40:
 901              		.loc 1 1165 10 is_stmt 1 discriminator 4
 902 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 903              		.loc 1 1168 8 discriminator 4
 904 001c FB68     		ldr	r3, [r7, #12]
 905 001e 0433     		adds	r3, r3, #4
 906 0020 1846     		mov	r0, r3
 907 0022 FFF7FEFF 		bl	uxListRemove
 908 0026 0346     		mov	r3, r0
 909              		.loc 1 1168 6 discriminator 4
 910 0028 002B     		cmp	r3, #0
 911 002a 15D1     		bne	.L41
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 912              		.loc 1 1170 5
 913 002c FB68     		ldr	r3, [r7, #12]
 914 002e DA6A     		ldr	r2, [r3, #44]
 915 0030 3349     		ldr	r1, .L49+4
 916 0032 1346     		mov	r3, r2
 917 0034 9B00     		lsls	r3, r3, #2
 918 0036 1344     		add	r3, r3, r2
 919 0038 9B00     		lsls	r3, r3, #2
 920 003a 0B44     		add	r3, r3, r1
 921 003c 1B68     		ldr	r3, [r3]
 922 003e 002B     		cmp	r3, #0
 923 0040 0AD1     		bne	.L41
 924              		.loc 1 1170 5 is_stmt 0 discriminator 1
 925 0042 FB68     		ldr	r3, [r7, #12]
 926 0044 DB6A     		ldr	r3, [r3, #44]
 927 0046 0122     		movs	r2, #1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 41


 928 0048 02FA03F3 		lsl	r3, r2, r3
 929 004c DA43     		mvns	r2, r3
 930 004e 2D4B     		ldr	r3, .L49+8
 931 0050 1B68     		ldr	r3, [r3]
 932 0052 1340     		ands	r3, r3, r2
 933 0054 2B4A     		ldr	r2, .L49+8
 934 0056 1360     		str	r3, [r2]
 935              	.L41:
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 936              		.loc 1 1178 8 is_stmt 1
 937 0058 FB68     		ldr	r3, [r7, #12]
 938 005a 9B6A     		ldr	r3, [r3, #40]
 939              		.loc 1 1178 6
 940 005c 002B     		cmp	r3, #0
 941 005e 04D0     		beq	.L42
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 942              		.loc 1 1180 14
 943 0060 FB68     		ldr	r3, [r7, #12]
 944 0062 1833     		adds	r3, r3, #24
 945 0064 1846     		mov	r0, r3
 946 0066 FFF7FEFF 		bl	uxListRemove
 947              	.L42:
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 948              		.loc 1 1191 16
 949 006a 274B     		ldr	r3, .L49+12
 950 006c 1B68     		ldr	r3, [r3]
 951 006e 0133     		adds	r3, r3, #1
 952 0070 254A     		ldr	r2, .L49+12
 953 0072 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 954              		.loc 1 1193 14
 955 0074 214B     		ldr	r3, .L49
 956 0076 1B68     		ldr	r3, [r3]
 957              		.loc 1 1193 6
 958 0078 FA68     		ldr	r2, [r7, #12]
 959 007a 9A42     		cmp	r2, r3
 960 007c 0BD1     		bne	.L43
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 42


1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 961              		.loc 1 1200 5
 962 007e FB68     		ldr	r3, [r7, #12]
 963 0080 0433     		adds	r3, r3, #4
 964 0082 1946     		mov	r1, r3
 965 0084 2148     		ldr	r0, .L49+16
 966 0086 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 967              		.loc 1 1205 5
 968 008a 214B     		ldr	r3, .L49+20
 969 008c 1B68     		ldr	r3, [r3]
 970 008e 0133     		adds	r3, r3, #1
 971 0090 1F4A     		ldr	r2, .L49+20
 972 0092 1360     		str	r3, [r2]
 973 0094 09E0     		b	.L44
 974              	.L43:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 975              		.loc 1 1216 5
 976 0096 1F4B     		ldr	r3, .L49+24
 977 0098 1B68     		ldr	r3, [r3]
 978 009a 013B     		subs	r3, r3, #1
 979 009c 1D4A     		ldr	r2, .L49+24
 980 009e 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 981              		.loc 1 1217 5
 982 00a0 F868     		ldr	r0, [r7, #12]
 983 00a2 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 984              		.loc 1 1221 5
 985 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 986              	.L44:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 43


1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 987              		.loc 1 1226 3
 988 00aa FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 989              		.loc 1 1230 25
 990 00ae 1A4B     		ldr	r3, .L49+28
 991 00b0 1B68     		ldr	r3, [r3]
 992              		.loc 1 1230 5
 993 00b2 002B     		cmp	r3, #0
 994 00b4 1DD0     		beq	.L48
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 995              		.loc 1 1232 14
 996 00b6 114B     		ldr	r3, .L49
 997 00b8 1B68     		ldr	r3, [r3]
 998              		.loc 1 1232 6
 999 00ba FA68     		ldr	r2, [r7, #12]
 1000 00bc 9A42     		cmp	r2, r3
 1001 00be 18D1     		bne	.L48
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1002              		.loc 1 1234 5
 1003 00c0 164B     		ldr	r3, .L49+32
 1004 00c2 1B68     		ldr	r3, [r3]
 1005 00c4 002B     		cmp	r3, #0
 1006 00c6 0CD0     		beq	.L46
 1007              	.LBB123:
 1008              	.LBB124:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1009              		.loc 2 195 2
 1010              		.syntax unified
 1011              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1012 00c8 4FF05003 			mov r3, #80												
 1013 00cc 72B6     		cpsid i													
 1014 00ce 83F31188 		msr basepri, r3											
 1015 00d2 BFF36F8F 		isb														
 1016 00d6 BFF34F8F 		dsb														
 1017 00da 62B6     		cpsie i													
 1018              	
 1019              	@ 0 "" 2
 1020              		.thumb
 1021              		.syntax unified
 1022 00dc BB60     		str	r3, [r7, #8]
 1023              		.loc 2 205 1
 1024 00de 00BF     		nop
 1025              	.L47:
 1026              	.LBE124:
 1027              	.LBE123:
 1028              		.loc 1 1234 5 discriminator 1
 1029 00e0 FEE7     		b	.L47
 1030              	.L46:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1031              		.loc 1 1235 5
 1032 00e2 0F4B     		ldr	r3, .L49+36
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 44


 1033 00e4 4FF08052 		mov	r2, #268435456
 1034 00e8 1A60     		str	r2, [r3]
 1035              		.syntax unified
 1036              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1037 00ea BFF34F8F 		dsb
 1038              	@ 0 "" 2
 1039              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1040 00ee BFF36F8F 		isb
 1041              	@ 0 "" 2
 1042              		.thumb
 1043              		.syntax unified
 1044              	.L48:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1045              		.loc 1 1242 2
 1046 00f2 00BF     		nop
 1047 00f4 1037     		adds	r7, r7, #16
 1048              	.LCFI23:
 1049              		.cfi_def_cfa_offset 8
 1050 00f6 BD46     		mov	sp, r7
 1051              	.LCFI24:
 1052              		.cfi_def_cfa_register 13
 1053              		@ sp needed
 1054 00f8 80BD     		pop	{r7, pc}
 1055              	.L50:
 1056 00fa 00BF     		.align	2
 1057              	.L49:
 1058 00fc 00000000 		.word	pxCurrentTCB
 1059 0100 00000000 		.word	pxReadyTasksLists
 1060 0104 00000000 		.word	uxTopReadyPriority
 1061 0108 00000000 		.word	uxTaskNumber
 1062 010c 00000000 		.word	xTasksWaitingTermination
 1063 0110 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1064 0114 00000000 		.word	uxCurrentNumberOfTasks
 1065 0118 00000000 		.word	xSchedulerRunning
 1066 011c 00000000 		.word	uxSchedulerSuspended
 1067 0120 04ED00E0 		.word	-536810236
 1068              		.cfi_endproc
 1069              	.LFE9:
 1071              		.section	.text.vTaskDelay,"ax",%progbits
 1072              		.align	1
 1073              		.global	vTaskDelay
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1078              	vTaskDelay:
 1079              	.LFB10:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 45


1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 46


1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1080              		.loc 1 1334 2
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 16
 1083              		@ frame_needed = 1, uses_anonymous_args = 0
 1084 0000 80B5     		push	{r7, lr}
 1085              	.LCFI25:
 1086              		.cfi_def_cfa_offset 8
 1087              		.cfi_offset 7, -8
 1088              		.cfi_offset 14, -4
 1089 0002 84B0     		sub	sp, sp, #16
 1090              	.LCFI26:
 1091              		.cfi_def_cfa_offset 24
 1092 0004 00AF     		add	r7, sp, #0
 1093              	.LCFI27:
 1094              		.cfi_def_cfa_register 7
 1095 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1096              		.loc 1 1335 13
 1097 0008 0023     		movs	r3, #0
 1098 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1099              		.loc 1 1338 5
 1100 000c 7B68     		ldr	r3, [r7, #4]
 1101 000e 002B     		cmp	r3, #0
 1102 0010 19D0     		beq	.L52
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 47


1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1103              		.loc 1 1340 4
 1104 0012 144B     		ldr	r3, .L57
 1105 0014 1B68     		ldr	r3, [r3]
 1106 0016 002B     		cmp	r3, #0
 1107 0018 0CD0     		beq	.L53
 1108              	.LBB125:
 1109              	.LBB126:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1110              		.loc 2 195 2
 1111              		.syntax unified
 1112              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1113 001a 4FF05003 			mov r3, #80												
 1114 001e 72B6     		cpsid i													
 1115 0020 83F31188 		msr basepri, r3											
 1116 0024 BFF36F8F 		isb														
 1117 0028 BFF34F8F 		dsb														
 1118 002c 62B6     		cpsie i													
 1119              	
 1120              	@ 0 "" 2
 1121              		.thumb
 1122              		.syntax unified
 1123 002e BB60     		str	r3, [r7, #8]
 1124              		.loc 2 205 1
 1125 0030 00BF     		nop
 1126              	.L54:
 1127              	.LBE126:
 1128              	.LBE125:
 1129              		.loc 1 1340 4 discriminator 1
 1130 0032 FEE7     		b	.L54
 1131              	.L53:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1132              		.loc 1 1341 4
 1133 0034 FFF7FEFF 		bl	vTaskSuspendAll
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1134              		.loc 1 1352 5
 1135 0038 0021     		movs	r1, #0
 1136 003a 7868     		ldr	r0, [r7, #4]
 1137 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1138              		.loc 1 1354 22
 1139 0040 FFF7FEFF 		bl	xTaskResumeAll
 1140 0044 F860     		str	r0, [r7, #12]
 1141              	.L52:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 48


1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1142              		.loc 1 1363 5
 1143 0046 FB68     		ldr	r3, [r7, #12]
 1144 0048 002B     		cmp	r3, #0
 1145 004a 07D1     		bne	.L56
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1146              		.loc 1 1365 4
 1147 004c 064B     		ldr	r3, .L57+4
 1148 004e 4FF08052 		mov	r2, #268435456
 1149 0052 1A60     		str	r2, [r3]
 1150              		.syntax unified
 1151              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1152 0054 BFF34F8F 		dsb
 1153              	@ 0 "" 2
 1154              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1155 0058 BFF36F8F 		isb
 1156              	@ 0 "" 2
 1157              		.thumb
 1158              		.syntax unified
 1159              	.L56:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1160              		.loc 1 1371 2
 1161 005c 00BF     		nop
 1162 005e 1037     		adds	r7, r7, #16
 1163              	.LCFI28:
 1164              		.cfi_def_cfa_offset 8
 1165 0060 BD46     		mov	sp, r7
 1166              	.LCFI29:
 1167              		.cfi_def_cfa_register 13
 1168              		@ sp needed
 1169 0062 80BD     		pop	{r7, pc}
 1170              	.L58:
 1171              		.align	2
 1172              	.L57:
 1173 0064 00000000 		.word	uxSchedulerSuspended
 1174 0068 04ED00E0 		.word	-536810236
 1175              		.cfi_endproc
 1176              	.LFE10:
 1178              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1179              		.align	1
 1180              		.global	uxTaskPriorityGet
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 49


 1185              	uxTaskPriorityGet:
 1186              	.LFB11:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 50


1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1187              		.loc 1 1471 2
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 16
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191 0000 80B5     		push	{r7, lr}
 1192              	.LCFI30:
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 14, -4
 1196 0002 84B0     		sub	sp, sp, #16
 1197              	.LCFI31:
 1198              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 51


 1199 0004 00AF     		add	r7, sp, #0
 1200              	.LCFI32:
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1203              		.loc 1 1475 3
 1204 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1205              		.loc 1 1479 12
 1206 000c 7B68     		ldr	r3, [r7, #4]
 1207 000e 002B     		cmp	r3, #0
 1208 0010 02D1     		bne	.L60
 1209              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1210 0012 074B     		ldr	r3, .L63
 1211 0014 1B68     		ldr	r3, [r3]
 1212 0016 00E0     		b	.L61
 1213              	.L60:
 1214              		.loc 1 1479 12 discriminator 2
 1215 0018 7B68     		ldr	r3, [r7, #4]
 1216              	.L61:
 1217              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1218 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1219              		.loc 1 1480 13 discriminator 4
 1220 001c FB68     		ldr	r3, [r7, #12]
 1221 001e DB6A     		ldr	r3, [r3, #44]
 1222 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1223              		.loc 1 1482 3 discriminator 4
 1224 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1225              		.loc 1 1484 10 discriminator 4
 1226 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1227              		.loc 1 1485 2 discriminator 4
 1228 0028 1846     		mov	r0, r3
 1229 002a 1037     		adds	r7, r7, #16
 1230              	.LCFI33:
 1231              		.cfi_def_cfa_offset 8
 1232 002c BD46     		mov	sp, r7
 1233              	.LCFI34:
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 002e 80BD     		pop	{r7, pc}
 1237              	.L64:
 1238              		.align	2
 1239              	.L63:
 1240 0030 00000000 		.word	pxCurrentTCB
 1241              		.cfi_endproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 52


 1242              	.LFE11:
 1244              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1245              		.align	1
 1246              		.global	uxTaskPriorityGetFromISR
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1251              	uxTaskPriorityGetFromISR:
 1252              	.LFB12:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1253              		.loc 1 1493 2
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 32
 1256              		@ frame_needed = 1, uses_anonymous_args = 0
 1257 0000 80B5     		push	{r7, lr}
 1258              	.LCFI35:
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 7, -8
 1261              		.cfi_offset 14, -4
 1262 0002 88B0     		sub	sp, sp, #32
 1263              	.LCFI36:
 1264              		.cfi_def_cfa_offset 40
 1265 0004 00AF     		add	r7, sp, #0
 1266              	.LCFI37:
 1267              		.cfi_def_cfa_register 7
 1268 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1269              		.loc 1 1513 3
 1270 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1271              	.LBB127:
 1272              	.LBB128:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 53


 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1273              		.loc 2 213 2
 1274              		.syntax unified
 1275              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1276 000c EFF31182 			mrs r2, basepri											
 1277 0010 4FF05003 		mov r3, #80												
 1278 0014 72B6     		cpsid i													
 1279 0016 83F31188 		msr basepri, r3											
 1280 001a BFF36F8F 		isb														
 1281 001e BFF34F8F 		dsb														
 1282 0022 62B6     		cpsie i													
 1283              	
 1284              	@ 0 "" 2
 1285              		.thumb
 1286              		.syntax unified
 1287 0024 3A61     		str	r2, [r7, #16]
 1288 0026 FB60     		str	r3, [r7, #12]
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 1289              		.loc 2 227 9
 1290 0028 3B69     		ldr	r3, [r7, #16]
 1291              	.LBE128:
 1292              	.LBE127:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1293              		.loc 1 1515 27
 1294 002a FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1295              		.loc 1 1519 12
 1296 002c 7B68     		ldr	r3, [r7, #4]
 1297 002e 002B     		cmp	r3, #0
 1298 0030 02D1     		bne	.L67
 1299              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1300 0032 094B     		ldr	r3, .L70
 1301 0034 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 54


 1302 0036 00E0     		b	.L68
 1303              	.L67:
 1304              		.loc 1 1519 12 discriminator 2
 1305 0038 7B68     		ldr	r3, [r7, #4]
 1306              	.L68:
 1307              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1308 003a BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1309              		.loc 1 1520 13 discriminator 4
 1310 003c BB69     		ldr	r3, [r7, #24]
 1311 003e DB6A     		ldr	r3, [r3, #44]
 1312 0040 7B61     		str	r3, [r7, #20]
 1313 0042 FB69     		ldr	r3, [r7, #28]
 1314 0044 BB60     		str	r3, [r7, #8]
 1315              	.LBB129:
 1316              	.LBB130:
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1317              		.loc 2 233 2 discriminator 4
 1318 0046 BB68     		ldr	r3, [r7, #8]
 1319              		.syntax unified
 1320              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1321 0048 83F31188 			msr basepri, r3	
 1322              	@ 0 "" 2
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 1323              		.loc 2 237 1 discriminator 4
 1324              		.thumb
 1325              		.syntax unified
 1326 004c 00BF     		nop
 1327              	.LBE130:
 1328              	.LBE129:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1329              		.loc 1 1524 10 discriminator 4
 1330 004e 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1331              		.loc 1 1525 2 discriminator 4
 1332 0050 1846     		mov	r0, r3
 1333 0052 2037     		adds	r7, r7, #32
 1334              	.LCFI38:
 1335              		.cfi_def_cfa_offset 8
 1336 0054 BD46     		mov	sp, r7
 1337              	.LCFI39:
 1338              		.cfi_def_cfa_register 13
 1339              		@ sp needed
 1340 0056 80BD     		pop	{r7, pc}
 1341              	.L71:
 1342              		.align	2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 55


 1343              	.L70:
 1344 0058 00000000 		.word	pxCurrentTCB
 1345              		.cfi_endproc
 1346              	.LFE12:
 1348              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1349              		.align	1
 1350              		.global	vTaskPrioritySet
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1355              	vTaskPrioritySet:
 1356              	.LFB13:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1357              		.loc 1 1533 2
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 32
 1360              		@ frame_needed = 1, uses_anonymous_args = 0
 1361 0000 80B5     		push	{r7, lr}
 1362              	.LCFI40:
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 7, -8
 1365              		.cfi_offset 14, -4
 1366 0002 88B0     		sub	sp, sp, #32
 1367              	.LCFI41:
 1368              		.cfi_def_cfa_offset 40
 1369 0004 00AF     		add	r7, sp, #0
 1370              	.LCFI42:
 1371              		.cfi_def_cfa_register 7
 1372 0006 7860     		str	r0, [r7, #4]
 1373 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1374              		.loc 1 1536 13
 1375 000a 0023     		movs	r3, #0
 1376 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1377              		.loc 1 1538 3
 1378 000e 3B68     		ldr	r3, [r7]
 1379 0010 062B     		cmp	r3, #6
 1380 0012 0CD9     		bls	.L73
 1381              	.LBB131:
 1382              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1383              		.loc 2 195 2
 1384              		.syntax unified
 1385              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1386 0014 4FF05003 			mov r3, #80												
 1387 0018 72B6     		cpsid i													
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 56


 1388 001a 83F31188 		msr basepri, r3											
 1389 001e BFF36F8F 		isb														
 1390 0022 BFF34F8F 		dsb														
 1391 0026 62B6     		cpsie i													
 1392              	
 1393              	@ 0 "" 2
 1394              		.thumb
 1395              		.syntax unified
 1396 0028 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1397              		.loc 2 205 1
 1398 002a 00BF     		nop
 1399              	.L74:
 1400              	.LBE132:
 1401              	.LBE131:
 1402              		.loc 1 1538 3 discriminator 1
 1403 002c FEE7     		b	.L74
 1404              	.L73:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1405              		.loc 1 1541 5
 1406 002e 3B68     		ldr	r3, [r7]
 1407 0030 062B     		cmp	r3, #6
 1408 0032 01D9     		bls	.L75
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1409              		.loc 1 1543 18
 1410 0034 0623     		movs	r3, #6
 1411 0036 3B60     		str	r3, [r7]
 1412              	.L75:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1413              		.loc 1 1550 3
 1414 0038 FFF7FEFF 		bl	vPortEnterCritical
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1415              		.loc 1 1554 12
 1416 003c 7B68     		ldr	r3, [r7, #4]
 1417 003e 002B     		cmp	r3, #0
 1418 0040 02D1     		bne	.L76
 1419              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1420 0042 414B     		ldr	r3, .L85
 1421 0044 1B68     		ldr	r3, [r3]
 1422 0046 00E0     		b	.L77
 1423              	.L76:
 1424              		.loc 1 1554 12 discriminator 2
 1425 0048 7B68     		ldr	r3, [r7, #4]
 1426              	.L77:
 1427              		.loc 1 1554 10 is_stmt 1 discriminator 4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 57


 1428 004a BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1429              		.loc 1 1560 27 discriminator 4
 1430 004c BB69     		ldr	r3, [r7, #24]
 1431 004e 5B6C     		ldr	r3, [r3, #68]
 1432 0050 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1433              		.loc 1 1568 6 discriminator 4
 1434 0052 7A69     		ldr	r2, [r7, #20]
 1435 0054 3B68     		ldr	r3, [r7]
 1436 0056 9A42     		cmp	r2, r3
 1437 0058 6FD0     		beq	.L78
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1438              		.loc 1 1572 7
 1439 005a 3A68     		ldr	r2, [r7]
 1440 005c 7B69     		ldr	r3, [r7, #20]
 1441 005e 9A42     		cmp	r2, r3
 1442 0060 0DD9     		bls	.L79
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1443              		.loc 1 1574 16
 1444 0062 394B     		ldr	r3, .L85
 1445 0064 1B68     		ldr	r3, [r3]
 1446              		.loc 1 1574 8
 1447 0066 BA69     		ldr	r2, [r7, #24]
 1448 0068 9A42     		cmp	r2, r3
 1449 006a 0FD0     		beq	.L80
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1450              		.loc 1 1579 40
 1451 006c 364B     		ldr	r3, .L85
 1452 006e 1B68     		ldr	r3, [r3]
 1453 0070 DB6A     		ldr	r3, [r3, #44]
 1454              		.loc 1 1579 9
 1455 0072 3A68     		ldr	r2, [r7]
 1456 0074 9A42     		cmp	r2, r3
 1457 0076 09D3     		bcc	.L80
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 58


 1458              		.loc 1 1581 23
 1459 0078 0123     		movs	r3, #1
 1460 007a FB61     		str	r3, [r7, #28]
 1461 007c 06E0     		b	.L80
 1462              	.L79:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1463              		.loc 1 1595 20
 1464 007e 324B     		ldr	r3, .L85
 1465 0080 1B68     		ldr	r3, [r3]
 1466              		.loc 1 1595 12
 1467 0082 BA69     		ldr	r2, [r7, #24]
 1468 0084 9A42     		cmp	r2, r3
 1469 0086 01D1     		bne	.L80
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1470              		.loc 1 1600 21
 1471 0088 0123     		movs	r3, #1
 1472 008a FB61     		str	r3, [r7, #28]
 1473              	.L80:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1474              		.loc 1 1612 27
 1475 008c BB69     		ldr	r3, [r7, #24]
 1476 008e DB6A     		ldr	r3, [r3, #44]
 1477 0090 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 59


 1478              		.loc 1 1618 15
 1479 0092 BB69     		ldr	r3, [r7, #24]
 1480 0094 5A6C     		ldr	r2, [r3, #68]
 1481              		.loc 1 1618 40
 1482 0096 BB69     		ldr	r3, [r7, #24]
 1483 0098 DB6A     		ldr	r3, [r3, #44]
 1484              		.loc 1 1618 8
 1485 009a 9A42     		cmp	r2, r3
 1486 009c 02D1     		bne	.L81
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1487              		.loc 1 1620 25
 1488 009e BB69     		ldr	r3, [r7, #24]
 1489 00a0 3A68     		ldr	r2, [r7]
 1490 00a2 DA62     		str	r2, [r3, #44]
 1491              	.L81:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1492              		.loc 1 1628 28
 1493 00a4 BB69     		ldr	r3, [r7, #24]
 1494 00a6 3A68     		ldr	r2, [r7]
 1495 00a8 5A64     		str	r2, [r3, #68]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1496              		.loc 1 1638 11
 1497 00aa BB69     		ldr	r3, [r7, #24]
 1498 00ac 9B69     		ldr	r3, [r3, #24]
 1499              		.loc 1 1638 7
 1500 00ae 002B     		cmp	r3, #0
 1501 00b0 04DB     		blt	.L82
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1502              		.loc 1 1640 6
 1503 00b2 3B68     		ldr	r3, [r7]
 1504 00b4 C3F10702 		rsb	r2, r3, #7
 1505 00b8 BB69     		ldr	r3, [r7, #24]
 1506 00ba 9A61     		str	r2, [r3, #24]
 1507              	.L82:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 60


1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1508              		.loc 1 1651 9
 1509 00bc BB69     		ldr	r3, [r7, #24]
 1510 00be 5969     		ldr	r1, [r3, #20]
 1511 00c0 3A69     		ldr	r2, [r7, #16]
 1512 00c2 1346     		mov	r3, r2
 1513 00c4 9B00     		lsls	r3, r3, #2
 1514 00c6 1344     		add	r3, r3, r2
 1515 00c8 9B00     		lsls	r3, r3, #2
 1516 00ca 204A     		ldr	r2, .L85+4
 1517 00cc 1344     		add	r3, r3, r2
 1518              		.loc 1 1651 7
 1519 00ce 9942     		cmp	r1, r3
 1520 00d0 28D1     		bne	.L83
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1521              		.loc 1 1656 10
 1522 00d2 BB69     		ldr	r3, [r7, #24]
 1523 00d4 0433     		adds	r3, r3, #4
 1524 00d6 1846     		mov	r0, r3
 1525 00d8 FFF7FEFF 		bl	uxListRemove
 1526 00dc 0346     		mov	r3, r0
 1527              		.loc 1 1656 8
 1528 00de 002B     		cmp	r3, #0
 1529 00e0 09D1     		bne	.L84
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1530              		.loc 1 1661 7
 1531 00e2 0122     		movs	r2, #1
 1532 00e4 3B69     		ldr	r3, [r7, #16]
 1533 00e6 02FA03F3 		lsl	r3, r2, r3
 1534 00ea DA43     		mvns	r2, r3
 1535 00ec 184B     		ldr	r3, .L85+8
 1536 00ee 1B68     		ldr	r3, [r3]
 1537 00f0 1340     		ands	r3, r3, r2
 1538 00f2 174A     		ldr	r2, .L85+8
 1539 00f4 1360     		str	r3, [r2]
 1540              	.L84:
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1541              		.loc 1 1667 6
 1542 00f6 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 61


 1543 00f8 DB6A     		ldr	r3, [r3, #44]
 1544 00fa 0122     		movs	r2, #1
 1545 00fc 9A40     		lsls	r2, r2, r3
 1546 00fe 144B     		ldr	r3, .L85+8
 1547 0100 1B68     		ldr	r3, [r3]
 1548 0102 1343     		orrs	r3, r3, r2
 1549 0104 124A     		ldr	r2, .L85+8
 1550 0106 1360     		str	r3, [r2]
 1551 0108 BB69     		ldr	r3, [r7, #24]
 1552 010a DA6A     		ldr	r2, [r3, #44]
 1553 010c 1346     		mov	r3, r2
 1554 010e 9B00     		lsls	r3, r3, #2
 1555 0110 1344     		add	r3, r3, r2
 1556 0112 9B00     		lsls	r3, r3, #2
 1557 0114 0D4A     		ldr	r2, .L85+4
 1558 0116 1A44     		add	r2, r2, r3
 1559 0118 BB69     		ldr	r3, [r7, #24]
 1560 011a 0433     		adds	r3, r3, #4
 1561 011c 1946     		mov	r1, r3
 1562 011e 1046     		mov	r0, r2
 1563 0120 FFF7FEFF 		bl	vListInsertEnd
 1564              	.L83:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1565              		.loc 1 1674 7
 1566 0124 FB69     		ldr	r3, [r7, #28]
 1567 0126 002B     		cmp	r3, #0
 1568 0128 07D0     		beq	.L78
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1569              		.loc 1 1676 6
 1570 012a 0A4B     		ldr	r3, .L85+12
 1571 012c 4FF08052 		mov	r2, #268435456
 1572 0130 1A60     		str	r2, [r3]
 1573              		.syntax unified
 1574              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1575 0132 BFF34F8F 		dsb
 1576              	@ 0 "" 2
 1577              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1578 0136 BFF36F8F 		isb
 1579              	@ 0 "" 2
 1580              		.thumb
 1581              		.syntax unified
 1582              	.L78:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 62


1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1583              		.loc 1 1688 3
 1584 013a FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1585              		.loc 1 1689 2
 1586 013e 00BF     		nop
 1587 0140 2037     		adds	r7, r7, #32
 1588              	.LCFI43:
 1589              		.cfi_def_cfa_offset 8
 1590 0142 BD46     		mov	sp, r7
 1591              	.LCFI44:
 1592              		.cfi_def_cfa_register 13
 1593              		@ sp needed
 1594 0144 80BD     		pop	{r7, pc}
 1595              	.L86:
 1596 0146 00BF     		.align	2
 1597              	.L85:
 1598 0148 00000000 		.word	pxCurrentTCB
 1599 014c 00000000 		.word	pxReadyTasksLists
 1600 0150 00000000 		.word	uxTopReadyPriority
 1601 0154 04ED00E0 		.word	-536810236
 1602              		.cfi_endproc
 1603              	.LFE13:
 1605              		.section	.text.vTaskSuspend,"ax",%progbits
 1606              		.align	1
 1607              		.global	vTaskSuspend
 1608              		.syntax unified
 1609              		.thumb
 1610              		.thumb_func
 1612              	vTaskSuspend:
 1613              	.LFB14:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1614              		.loc 1 1697 2
 1615              		.cfi_startproc
 1616              		@ args = 0, pretend = 0, frame = 16
 1617              		@ frame_needed = 1, uses_anonymous_args = 0
 1618 0000 80B5     		push	{r7, lr}
 1619              	.LCFI45:
 1620              		.cfi_def_cfa_offset 8
 1621              		.cfi_offset 7, -8
 1622              		.cfi_offset 14, -4
 1623 0002 84B0     		sub	sp, sp, #16
 1624              	.LCFI46:
 1625              		.cfi_def_cfa_offset 24
 1626 0004 00AF     		add	r7, sp, #0
 1627              	.LCFI47:
 1628              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 63


 1629 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1630              		.loc 1 1700 3
 1631 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1632              		.loc 1 1704 12
 1633 000c 7B68     		ldr	r3, [r7, #4]
 1634 000e 002B     		cmp	r3, #0
 1635 0010 02D1     		bne	.L88
 1636              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1637 0012 3D4B     		ldr	r3, .L100
 1638 0014 1B68     		ldr	r3, [r3]
 1639 0016 00E0     		b	.L89
 1640              	.L88:
 1641              		.loc 1 1704 12 discriminator 2
 1642 0018 7B68     		ldr	r3, [r7, #4]
 1643              	.L89:
 1644              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1645 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1646              		.loc 1 1710 8 discriminator 4
 1647 001c FB68     		ldr	r3, [r7, #12]
 1648 001e 0433     		adds	r3, r3, #4
 1649 0020 1846     		mov	r0, r3
 1650 0022 FFF7FEFF 		bl	uxListRemove
 1651 0026 0346     		mov	r3, r0
 1652              		.loc 1 1710 6 discriminator 4
 1653 0028 002B     		cmp	r3, #0
 1654 002a 15D1     		bne	.L90
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1655              		.loc 1 1712 5
 1656 002c FB68     		ldr	r3, [r7, #12]
 1657 002e DA6A     		ldr	r2, [r3, #44]
 1658 0030 3649     		ldr	r1, .L100+4
 1659 0032 1346     		mov	r3, r2
 1660 0034 9B00     		lsls	r3, r3, #2
 1661 0036 1344     		add	r3, r3, r2
 1662 0038 9B00     		lsls	r3, r3, #2
 1663 003a 0B44     		add	r3, r3, r1
 1664 003c 1B68     		ldr	r3, [r3]
 1665 003e 002B     		cmp	r3, #0
 1666 0040 0AD1     		bne	.L90
 1667              		.loc 1 1712 5 is_stmt 0 discriminator 1
 1668 0042 FB68     		ldr	r3, [r7, #12]
 1669 0044 DB6A     		ldr	r3, [r3, #44]
 1670 0046 0122     		movs	r2, #1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 64


 1671 0048 02FA03F3 		lsl	r3, r2, r3
 1672 004c DA43     		mvns	r2, r3
 1673 004e 304B     		ldr	r3, .L100+8
 1674 0050 1B68     		ldr	r3, [r3]
 1675 0052 1340     		ands	r3, r3, r2
 1676 0054 2E4A     		ldr	r2, .L100+8
 1677 0056 1360     		str	r3, [r2]
 1678              	.L90:
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1679              		.loc 1 1720 8 is_stmt 1
 1680 0058 FB68     		ldr	r3, [r7, #12]
 1681 005a 9B6A     		ldr	r3, [r3, #40]
 1682              		.loc 1 1720 6
 1683 005c 002B     		cmp	r3, #0
 1684 005e 04D0     		beq	.L91
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1685              		.loc 1 1722 14
 1686 0060 FB68     		ldr	r3, [r7, #12]
 1687 0062 1833     		adds	r3, r3, #24
 1688 0064 1846     		mov	r0, r3
 1689 0066 FFF7FEFF 		bl	uxListRemove
 1690              	.L91:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1691              		.loc 1 1729 4
 1692 006a FB68     		ldr	r3, [r7, #12]
 1693 006c 0433     		adds	r3, r3, #4
 1694 006e 1946     		mov	r1, r3
 1695 0070 2848     		ldr	r0, .L100+12
 1696 0072 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1697              		.loc 1 1733 14
 1698 0076 FB68     		ldr	r3, [r7, #12]
 1699 0078 93F87C34 		ldrb	r3, [r3, #1148]
 1700 007c DBB2     		uxtb	r3, r3
 1701              		.loc 1 1733 7
 1702 007e 012B     		cmp	r3, #1
 1703 0080 03D1     		bne	.L92
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 65


1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1704              		.loc 1 1737 27
 1705 0082 FB68     		ldr	r3, [r7, #12]
 1706 0084 0022     		movs	r2, #0
 1707 0086 83F87C24 		strb	r2, [r3, #1148]
 1708              	.L92:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1709              		.loc 1 1742 3
 1710 008a FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1711              		.loc 1 1744 25
 1712 008e 224B     		ldr	r3, .L100+16
 1713 0090 1B68     		ldr	r3, [r3]
 1714              		.loc 1 1744 5
 1715 0092 002B     		cmp	r3, #0
 1716 0094 05D0     		beq	.L93
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1717              		.loc 1 1748 4
 1718 0096 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1719              		.loc 1 1750 5
 1720 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1721              		.loc 1 1752 4
 1722 009e FFF7FEFF 		bl	vPortExitCritical
 1723              	.L93:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1724              		.loc 1 1759 13
 1725 00a2 194B     		ldr	r3, .L100
 1726 00a4 1B68     		ldr	r3, [r3]
 1727              		.loc 1 1759 5
 1728 00a6 FA68     		ldr	r2, [r7, #12]
 1729 00a8 9A42     		cmp	r2, r3
 1730 00aa 29D1     		bne	.L99
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1731              		.loc 1 1761 26
 1732 00ac 1A4B     		ldr	r3, .L100+16
 1733 00ae 1B68     		ldr	r3, [r3]
 1734              		.loc 1 1761 6
 1735 00b0 002B     		cmp	r3, #0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 66


 1736 00b2 19D0     		beq	.L95
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1737              		.loc 1 1764 5
 1738 00b4 194B     		ldr	r3, .L100+20
 1739 00b6 1B68     		ldr	r3, [r3]
 1740 00b8 002B     		cmp	r3, #0
 1741 00ba 0CD0     		beq	.L96
 1742              	.LBB133:
 1743              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1744              		.loc 2 195 2
 1745              		.syntax unified
 1746              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1747 00bc 4FF05003 			mov r3, #80												
 1748 00c0 72B6     		cpsid i													
 1749 00c2 83F31188 		msr basepri, r3											
 1750 00c6 BFF36F8F 		isb														
 1751 00ca BFF34F8F 		dsb														
 1752 00ce 62B6     		cpsie i													
 1753              	
 1754              	@ 0 "" 2
 1755              		.thumb
 1756              		.syntax unified
 1757 00d0 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1758              		.loc 2 205 1
 1759 00d2 00BF     		nop
 1760              	.L97:
 1761              	.LBE134:
 1762              	.LBE133:
 1763              		.loc 1 1764 5 discriminator 1
 1764 00d4 FEE7     		b	.L97
 1765              	.L96:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1766              		.loc 1 1765 5
 1767 00d6 124B     		ldr	r3, .L100+24
 1768 00d8 4FF08052 		mov	r2, #268435456
 1769 00dc 1A60     		str	r2, [r3]
 1770              		.syntax unified
 1771              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1772 00de BFF34F8F 		dsb
 1773              	@ 0 "" 2
 1774              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1775 00e2 BFF36F8F 		isb
 1776              	@ 0 "" 2
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 67


1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1777              		.loc 1 1790 2
 1778              		.thumb
 1779              		.syntax unified
 1780 00e6 0BE0     		b	.L99
 1781              	.L95:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1782              		.loc 1 1772 9
 1783 00e8 0A4B     		ldr	r3, .L100+12
 1784 00ea 1A68     		ldr	r2, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1785              		.loc 1 1772 56
 1786 00ec 0D4B     		ldr	r3, .L100+28
 1787 00ee 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1788              		.loc 1 1772 7
 1789 00f0 9A42     		cmp	r2, r3
 1790 00f2 03D1     		bne	.L98
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1791              		.loc 1 1778 19
 1792 00f4 044B     		ldr	r3, .L100
 1793 00f6 0022     		movs	r2, #0
 1794 00f8 1A60     		str	r2, [r3]
 1795              		.loc 1 1790 2
 1796 00fa 01E0     		b	.L99
 1797              	.L98:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1798              		.loc 1 1782 6
 1799 00fc FFF7FEFF 		bl	vTaskSwitchContext
 1800              	.L99:
 1801              		.loc 1 1790 2
 1802 0100 00BF     		nop
 1803 0102 1037     		adds	r7, r7, #16
 1804              	.LCFI48:
 1805              		.cfi_def_cfa_offset 8
 1806 0104 BD46     		mov	sp, r7
 1807              	.LCFI49:
 1808              		.cfi_def_cfa_register 13
 1809              		@ sp needed
 1810 0106 80BD     		pop	{r7, pc}
 1811              	.L101:
 1812              		.align	2
 1813              	.L100:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 68


 1814 0108 00000000 		.word	pxCurrentTCB
 1815 010c 00000000 		.word	pxReadyTasksLists
 1816 0110 00000000 		.word	uxTopReadyPriority
 1817 0114 00000000 		.word	xSuspendedTaskList
 1818 0118 00000000 		.word	xSchedulerRunning
 1819 011c 00000000 		.word	uxSchedulerSuspended
 1820 0120 04ED00E0 		.word	-536810236
 1821 0124 00000000 		.word	uxCurrentNumberOfTasks
 1822              		.cfi_endproc
 1823              	.LFE14:
 1825              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1826              		.align	1
 1827              		.syntax unified
 1828              		.thumb
 1829              		.thumb_func
 1831              	prvTaskIsTaskSuspended:
 1832              	.LFB15:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1833              		.loc 1 1798 2
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 24
 1836              		@ frame_needed = 1, uses_anonymous_args = 0
 1837              		@ link register save eliminated.
 1838 0000 80B4     		push	{r7}
 1839              	.LCFI50:
 1840              		.cfi_def_cfa_offset 4
 1841              		.cfi_offset 7, -4
 1842 0002 87B0     		sub	sp, sp, #28
 1843              	.LCFI51:
 1844              		.cfi_def_cfa_offset 32
 1845 0004 00AF     		add	r7, sp, #0
 1846              	.LCFI52:
 1847              		.cfi_def_cfa_register 7
 1848 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1849              		.loc 1 1799 13
 1850 0008 0023     		movs	r3, #0
 1851 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1852              		.loc 1 1800 22
 1853 000c 7B68     		ldr	r3, [r7, #4]
 1854 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1855              		.loc 1 1806 3
 1856 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 69


 1857 0012 002B     		cmp	r3, #0
 1858 0014 0CD1     		bne	.L103
 1859              	.LBB135:
 1860              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1861              		.loc 2 195 2
 1862              		.syntax unified
 1863              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1864 0016 4FF05003 			mov r3, #80												
 1865 001a 72B6     		cpsid i													
 1866 001c 83F31188 		msr basepri, r3											
 1867 0020 BFF36F8F 		isb														
 1868 0024 BFF34F8F 		dsb														
 1869 0028 62B6     		cpsie i													
 1870              	
 1871              	@ 0 "" 2
 1872              		.thumb
 1873              		.syntax unified
 1874 002a FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1875              		.loc 2 205 1
 1876 002c 00BF     		nop
 1877              	.L104:
 1878              	.LBE136:
 1879              	.LBE135:
 1880              		.loc 1 1806 3 discriminator 1
 1881 002e FEE7     		b	.L104
 1882              	.L103:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1883              		.loc 1 1809 7
 1884 0030 3B69     		ldr	r3, [r7, #16]
 1885 0032 5B69     		ldr	r3, [r3, #20]
 1886              		.loc 1 1809 5
 1887 0034 0A4A     		ldr	r2, .L107
 1888 0036 9342     		cmp	r3, r2
 1889 0038 0AD1     		bne	.L105
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1890              		.loc 1 1812 8
 1891 003a 3B69     		ldr	r3, [r7, #16]
 1892 003c 9B6A     		ldr	r3, [r3, #40]
 1893              		.loc 1 1812 6
 1894 003e 094A     		ldr	r2, .L107+4
 1895 0040 9342     		cmp	r3, r2
 1896 0042 05D0     		beq	.L105
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1897              		.loc 1 1816 9
 1898 0044 3B69     		ldr	r3, [r7, #16]
 1899 0046 9B6A     		ldr	r3, [r3, #40]
 1900              		.loc 1 1816 7
 1901 0048 002B     		cmp	r3, #0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 70


 1902 004a 01D1     		bne	.L105
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1903              		.loc 1 1818 14
 1904 004c 0123     		movs	r3, #1
 1905 004e 7B61     		str	r3, [r7, #20]
 1906              	.L105:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1907              		.loc 1 1835 10
 1908 0050 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1909              		.loc 1 1836 2
 1910 0052 1846     		mov	r0, r3
 1911 0054 1C37     		adds	r7, r7, #28
 1912              	.LCFI53:
 1913              		.cfi_def_cfa_offset 4
 1914 0056 BD46     		mov	sp, r7
 1915              	.LCFI54:
 1916              		.cfi_def_cfa_register 13
 1917              		@ sp needed
 1918 0058 5DF8047B 		ldr	r7, [sp], #4
 1919              	.LCFI55:
 1920              		.cfi_restore 7
 1921              		.cfi_def_cfa_offset 0
 1922 005c 7047     		bx	lr
 1923              	.L108:
 1924 005e 00BF     		.align	2
 1925              	.L107:
 1926 0060 00000000 		.word	xSuspendedTaskList
 1927 0064 00000000 		.word	xPendingReadyList
 1928              		.cfi_endproc
 1929              	.LFE15:
 1931              		.section	.text.vTaskResume,"ax",%progbits
 1932              		.align	1
 1933              		.global	vTaskResume
 1934              		.syntax unified
 1935              		.thumb
 1936              		.thumb_func
 1938              	vTaskResume:
 1939              	.LFB16:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 71


1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1940              		.loc 1 1844 2
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 16
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 80B5     		push	{r7, lr}
 1945              	.LCFI56:
 1946              		.cfi_def_cfa_offset 8
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0002 84B0     		sub	sp, sp, #16
 1950              	.LCFI57:
 1951              		.cfi_def_cfa_offset 24
 1952 0004 00AF     		add	r7, sp, #0
 1953              	.LCFI58:
 1954              		.cfi_def_cfa_register 7
 1955 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1956              		.loc 1 1845 16
 1957 0008 7B68     		ldr	r3, [r7, #4]
 1958 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1959              		.loc 1 1848 3
 1960 000c 7B68     		ldr	r3, [r7, #4]
 1961 000e 002B     		cmp	r3, #0
 1962 0010 0CD1     		bne	.L110
 1963              	.LBB137:
 1964              	.LBB138:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1965              		.loc 2 195 2
 1966              		.syntax unified
 1967              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1968 0012 4FF05003 			mov r3, #80												
 1969 0016 72B6     		cpsid i													
 1970 0018 83F31188 		msr basepri, r3											
 1971 001c BFF36F8F 		isb														
 1972 0020 BFF34F8F 		dsb														
 1973 0024 62B6     		cpsie i													
 1974              	
 1975              	@ 0 "" 2
 1976              		.thumb
 1977              		.syntax unified
 1978 0026 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1979              		.loc 2 205 1
 1980 0028 00BF     		nop
 1981              	.L111:
 1982              	.LBE138:
 1983              	.LBE137:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 72


 1984              		.loc 1 1848 3 discriminator 1
 1985 002a FEE7     		b	.L111
 1986              	.L110:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1987              		.loc 1 1852 15
 1988 002c 204B     		ldr	r3, .L115
 1989 002e 1B68     		ldr	r3, [r3]
 1990              		.loc 1 1852 5
 1991 0030 FA68     		ldr	r2, [r7, #12]
 1992 0032 9A42     		cmp	r2, r3
 1993 0034 37D0     		beq	.L114
 1994              		.loc 1 1852 33 discriminator 1
 1995 0036 FB68     		ldr	r3, [r7, #12]
 1996 0038 002B     		cmp	r3, #0
 1997 003a 34D0     		beq	.L114
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1998              		.loc 1 1854 4
 1999 003c FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2000              		.loc 1 1856 9
 2001 0040 F868     		ldr	r0, [r7, #12]
 2002 0042 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2003 0046 0346     		mov	r3, r0
 2004              		.loc 1 1856 7
 2005 0048 002B     		cmp	r3, #0
 2006 004a 2AD0     		beq	.L113
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2007              		.loc 1 1862 15
 2008 004c FB68     		ldr	r3, [r7, #12]
 2009 004e 0433     		adds	r3, r3, #4
 2010 0050 1846     		mov	r0, r3
 2011 0052 FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2012              		.loc 1 1863 6
 2013 0056 FB68     		ldr	r3, [r7, #12]
 2014 0058 DB6A     		ldr	r3, [r3, #44]
 2015 005a 0122     		movs	r2, #1
 2016 005c 9A40     		lsls	r2, r2, r3
 2017 005e 154B     		ldr	r3, .L115+4
 2018 0060 1B68     		ldr	r3, [r3]
 2019 0062 1343     		orrs	r3, r3, r2
 2020 0064 134A     		ldr	r2, .L115+4
 2021 0066 1360     		str	r3, [r2]
 2022 0068 FB68     		ldr	r3, [r7, #12]
 2023 006a DA6A     		ldr	r2, [r3, #44]
 2024 006c 1346     		mov	r3, r2
 2025 006e 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 73


 2026 0070 1344     		add	r3, r3, r2
 2027 0072 9B00     		lsls	r3, r3, #2
 2028 0074 104A     		ldr	r2, .L115+8
 2029 0076 1A44     		add	r2, r2, r3
 2030 0078 FB68     		ldr	r3, [r7, #12]
 2031 007a 0433     		adds	r3, r3, #4
 2032 007c 1946     		mov	r1, r3
 2033 007e 1046     		mov	r0, r2
 2034 0080 FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2035              		.loc 1 1866 15
 2036 0084 FB68     		ldr	r3, [r7, #12]
 2037 0086 DA6A     		ldr	r2, [r3, #44]
 2038              		.loc 1 1866 43
 2039 0088 094B     		ldr	r3, .L115
 2040 008a 1B68     		ldr	r3, [r3]
 2041 008c DB6A     		ldr	r3, [r3, #44]
 2042              		.loc 1 1866 8
 2043 008e 9A42     		cmp	r2, r3
 2044 0090 07D3     		bcc	.L113
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2045              		.loc 1 1871 7
 2046 0092 0A4B     		ldr	r3, .L115+12
 2047 0094 4FF08052 		mov	r2, #268435456
 2048 0098 1A60     		str	r2, [r3]
 2049              		.syntax unified
 2050              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2051 009a BFF34F8F 		dsb
 2052              	@ 0 "" 2
 2053              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2054 009e BFF36F8F 		isb
 2055              	@ 0 "" 2
 2056              		.thumb
 2057              		.syntax unified
 2058              	.L113:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2059              		.loc 1 1883 4
 2060 00a2 FFF7FEFF 		bl	vPortExitCritical
 2061              	.L114:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 74


1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2062              		.loc 1 1889 2
 2063 00a6 00BF     		nop
 2064 00a8 1037     		adds	r7, r7, #16
 2065              	.LCFI59:
 2066              		.cfi_def_cfa_offset 8
 2067 00aa BD46     		mov	sp, r7
 2068              	.LCFI60:
 2069              		.cfi_def_cfa_register 13
 2070              		@ sp needed
 2071 00ac 80BD     		pop	{r7, pc}
 2072              	.L116:
 2073 00ae 00BF     		.align	2
 2074              	.L115:
 2075 00b0 00000000 		.word	pxCurrentTCB
 2076 00b4 00000000 		.word	uxTopReadyPriority
 2077 00b8 00000000 		.word	pxReadyTasksLists
 2078 00bc 04ED00E0 		.word	-536810236
 2079              		.cfi_endproc
 2080              	.LFE16:
 2082              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2083              		.align	1
 2084              		.global	xTaskResumeFromISR
 2085              		.syntax unified
 2086              		.thumb
 2087              		.thumb_func
 2089              	xTaskResumeFromISR:
 2090              	.LFB17:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2091              		.loc 1 1898 2
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 40
 2094              		@ frame_needed = 1, uses_anonymous_args = 0
 2095 0000 80B5     		push	{r7, lr}
 2096              	.LCFI61:
 2097              		.cfi_def_cfa_offset 8
 2098              		.cfi_offset 7, -8
 2099              		.cfi_offset 14, -4
 2100 0002 8AB0     		sub	sp, sp, #40
 2101              	.LCFI62:
 2102              		.cfi_def_cfa_offset 48
 2103 0004 00AF     		add	r7, sp, #0
 2104              	.LCFI63:
 2105              		.cfi_def_cfa_register 7
 2106 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 75


1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2107              		.loc 1 1899 13
 2108 0008 0023     		movs	r3, #0
 2109 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2110              		.loc 1 1900 16
 2111 000c 7B68     		ldr	r3, [r7, #4]
 2112 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2113              		.loc 1 1903 3
 2114 0010 7B68     		ldr	r3, [r7, #4]
 2115 0012 002B     		cmp	r3, #0
 2116 0014 0CD1     		bne	.L118
 2117              	.LBB139:
 2118              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2119              		.loc 2 195 2
 2120              		.syntax unified
 2121              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2122 0016 4FF05003 			mov r3, #80												
 2123 001a 72B6     		cpsid i													
 2124 001c 83F31188 		msr basepri, r3											
 2125 0020 BFF36F8F 		isb														
 2126 0024 BFF34F8F 		dsb														
 2127 0028 62B6     		cpsie i													
 2128              	
 2129              	@ 0 "" 2
 2130              		.thumb
 2131              		.syntax unified
 2132 002a BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2133              		.loc 2 205 1
 2134 002c 00BF     		nop
 2135              	.L119:
 2136              	.LBE140:
 2137              	.LBE139:
 2138              		.loc 1 1903 3 discriminator 1
 2139 002e FEE7     		b	.L119
 2140              	.L118:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 76


1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2141              		.loc 1 1921 3
 2142 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2143              	.LBB141:
 2144              	.LBB142:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2145              		.loc 2 213 2
 2146              		.syntax unified
 2147              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2148 0034 EFF31182 			mrs r2, basepri											
 2149 0038 4FF05003 		mov r3, #80												
 2150 003c 72B6     		cpsid i													
 2151 003e 83F31188 		msr basepri, r3											
 2152 0042 BFF36F8F 		isb														
 2153 0046 BFF34F8F 		dsb														
 2154 004a 62B6     		cpsie i													
 2155              	
 2156              	@ 0 "" 2
 2157              		.thumb
 2158              		.syntax unified
 2159 004c 7A61     		str	r2, [r7, #20]
 2160 004e 3B61     		str	r3, [r7, #16]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 2161              		.loc 2 227 9
 2162 0050 7B69     		ldr	r3, [r7, #20]
 2163              	.LBE142:
 2164              	.LBE141:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2165              		.loc 1 1923 28
 2166 0052 FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2167              		.loc 1 1925 8
 2168 0054 386A     		ldr	r0, [r7, #32]
 2169 0056 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2170 005a 0346     		mov	r3, r0
 2171              		.loc 1 1925 6
 2172 005c 002B     		cmp	r3, #0
 2173 005e 2FD0     		beq	.L121
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2174              		.loc 1 1930 30
 2175 0060 1D4B     		ldr	r3, .L125
 2176 0062 1B68     		ldr	r3, [r3]
 2177              		.loc 1 1930 7
 2178 0064 002B     		cmp	r3, #0
 2179 0066 25D1     		bne	.L122
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2180              		.loc 1 1934 15
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 77


 2181 0068 3B6A     		ldr	r3, [r7, #32]
 2182 006a DA6A     		ldr	r2, [r3, #44]
 2183              		.loc 1 1934 43
 2184 006c 1B4B     		ldr	r3, .L125+4
 2185 006e 1B68     		ldr	r3, [r3]
 2186 0070 DB6A     		ldr	r3, [r3, #44]
 2187              		.loc 1 1934 8
 2188 0072 9A42     		cmp	r2, r3
 2189 0074 01D3     		bcc	.L123
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2190              		.loc 1 1936 22
 2191 0076 0123     		movs	r3, #1
 2192 0078 7B62     		str	r3, [r7, #36]
 2193              	.L123:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2194              		.loc 1 1943 15
 2195 007a 3B6A     		ldr	r3, [r7, #32]
 2196 007c 0433     		adds	r3, r3, #4
 2197 007e 1846     		mov	r0, r3
 2198 0080 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2199              		.loc 1 1944 6
 2200 0084 3B6A     		ldr	r3, [r7, #32]
 2201 0086 DB6A     		ldr	r3, [r3, #44]
 2202 0088 0122     		movs	r2, #1
 2203 008a 9A40     		lsls	r2, r2, r3
 2204 008c 144B     		ldr	r3, .L125+8
 2205 008e 1B68     		ldr	r3, [r3]
 2206 0090 1343     		orrs	r3, r3, r2
 2207 0092 134A     		ldr	r2, .L125+8
 2208 0094 1360     		str	r3, [r2]
 2209 0096 3B6A     		ldr	r3, [r7, #32]
 2210 0098 DA6A     		ldr	r2, [r3, #44]
 2211 009a 1346     		mov	r3, r2
 2212 009c 9B00     		lsls	r3, r3, #2
 2213 009e 1344     		add	r3, r3, r2
 2214 00a0 9B00     		lsls	r3, r3, #2
 2215 00a2 104A     		ldr	r2, .L125+12
 2216 00a4 1A44     		add	r2, r2, r3
 2217 00a6 3B6A     		ldr	r3, [r7, #32]
 2218 00a8 0433     		adds	r3, r3, #4
 2219 00aa 1946     		mov	r1, r3
 2220 00ac 1046     		mov	r0, r2
 2221 00ae FFF7FEFF 		bl	vListInsertEnd
 2222 00b2 05E0     		b	.L121
 2223              	.L122:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 78


1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2224              		.loc 1 1951 6
 2225 00b4 3B6A     		ldr	r3, [r7, #32]
 2226 00b6 1833     		adds	r3, r3, #24
 2227 00b8 1946     		mov	r1, r3
 2228 00ba 0B48     		ldr	r0, .L125+16
 2229 00bc FFF7FEFF 		bl	vListInsertEnd
 2230              	.L121:
 2231 00c0 FB69     		ldr	r3, [r7, #28]
 2232 00c2 FB60     		str	r3, [r7, #12]
 2233              	.LBB143:
 2234              	.LBB144:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2235              		.loc 2 233 2
 2236 00c4 FB68     		ldr	r3, [r7, #12]
 2237              		.syntax unified
 2238              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2239 00c6 83F31188 			msr basepri, r3	
 2240              	@ 0 "" 2
 2241              		.loc 2 237 1
 2242              		.thumb
 2243              		.syntax unified
 2244 00ca 00BF     		nop
 2245              	.LBE144:
 2246              	.LBE143:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2247              		.loc 1 1961 10
 2248 00cc 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2249              		.loc 1 1962 2
 2250 00ce 1846     		mov	r0, r3
 2251 00d0 2837     		adds	r7, r7, #40
 2252              	.LCFI64:
 2253              		.cfi_def_cfa_offset 8
 2254 00d2 BD46     		mov	sp, r7
 2255              	.LCFI65:
 2256              		.cfi_def_cfa_register 13
 2257              		@ sp needed
 2258 00d4 80BD     		pop	{r7, pc}
 2259              	.L126:
 2260 00d6 00BF     		.align	2
 2261              	.L125:
 2262 00d8 00000000 		.word	uxSchedulerSuspended
 2263 00dc 00000000 		.word	pxCurrentTCB
 2264 00e0 00000000 		.word	uxTopReadyPriority
 2265 00e4 00000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 79


 2266 00e8 00000000 		.word	xPendingReadyList
 2267              		.cfi_endproc
 2268              	.LFE17:
 2270              		.section	.rodata
 2271              		.align	2
 2272              	.LC0:
 2273 0000 49444C45 		.ascii	"IDLE\000"
 2273      00
 2274              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2275              		.align	1
 2276              		.global	vTaskStartScheduler
 2277              		.syntax unified
 2278              		.thumb
 2279              		.thumb_func
 2281              	vTaskStartScheduler:
 2282              	.LFB18:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2283              		.loc 1 1968 1
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 24
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287 0000 80B5     		push	{r7, lr}
 2288              	.LCFI66:
 2289              		.cfi_def_cfa_offset 8
 2290              		.cfi_offset 7, -8
 2291              		.cfi_offset 14, -4
 2292 0002 8AB0     		sub	sp, sp, #40
 2293              	.LCFI67:
 2294              		.cfi_def_cfa_offset 48
 2295 0004 04AF     		add	r7, sp, #16
 2296              	.LCFI68:
 2297              		.cfi_def_cfa 7, 32
 2298              	.LBB145:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2299              		.loc 1 1974 17
 2300 0006 0023     		movs	r3, #0
 2301 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2302              		.loc 1 1975 16
 2303 000a 0023     		movs	r3, #0
 2304 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2305              		.loc 1 1980 3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 80


 2306 000e 3A46     		mov	r2, r7
 2307 0010 391D     		adds	r1, r7, #4
 2308 0012 07F10803 		add	r3, r7, #8
 2309 0016 1846     		mov	r0, r3
 2310 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2311              		.loc 1 1981 21
 2312 001c 3968     		ldr	r1, [r7]
 2313 001e 7B68     		ldr	r3, [r7, #4]
 2314 0020 BA68     		ldr	r2, [r7, #8]
 2315 0022 0292     		str	r2, [sp, #8]
 2316 0024 0193     		str	r3, [sp, #4]
 2317 0026 0023     		movs	r3, #0
 2318 0028 0093     		str	r3, [sp]
 2319 002a 0023     		movs	r3, #0
 2320 002c 0A46     		mov	r2, r1
 2321 002e 2349     		ldr	r1, .L134
 2322 0030 2348     		ldr	r0, .L134+4
 2323 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2324 0036 0346     		mov	r3, r0
 2325              		.loc 1 1981 19
 2326 0038 224A     		ldr	r2, .L134+8
 2327 003a 1360     		str	r3, [r2]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2328              		.loc 1 1989 23
 2329 003c 214B     		ldr	r3, .L134+8
 2330 003e 1B68     		ldr	r3, [r3]
 2331              		.loc 1 1989 5
 2332 0040 002B     		cmp	r3, #0
 2333 0042 02D0     		beq	.L128
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2334              		.loc 1 1991 12
 2335 0044 0123     		movs	r3, #1
 2336 0046 7B61     		str	r3, [r7, #20]
 2337 0048 01E0     		b	.L129
 2338              	.L128:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2339              		.loc 1 1995 12
 2340 004a 0023     		movs	r3, #0
 2341 004c 7B61     		str	r3, [r7, #20]
 2342              	.L129:
 2343              	.LBE145:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 81


2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2344              		.loc 1 2023 4
 2345 004e 7B69     		ldr	r3, [r7, #20]
 2346 0050 012B     		cmp	r3, #1
 2347 0052 1DD1     		bne	.L130
 2348              	.LBB146:
 2349              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2350              		.loc 2 195 2
 2351              		.syntax unified
 2352              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2353 0054 4FF05003 			mov r3, #80												
 2354 0058 72B6     		cpsid i													
 2355 005a 83F31188 		msr basepri, r3											
 2356 005e BFF36F8F 		isb														
 2357 0062 BFF34F8F 		dsb														
 2358 0066 62B6     		cpsie i													
 2359              	
 2360              	@ 0 "" 2
 2361              		.thumb
 2362              		.syntax unified
 2363 0068 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2364              		.loc 2 205 1
 2365 006a 00BF     		nop
 2366              	.LBE147:
 2367              	.LBE146:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 82


2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 2368              		.loc 1 2045 33
 2369 006c 164B     		ldr	r3, .L134+12
 2370 006e 1B68     		ldr	r3, [r3]
 2371              		.loc 1 2045 18
 2372 0070 5033     		adds	r3, r3, #80
 2373              		.loc 1 2045 16
 2374 0072 164A     		ldr	r2, .L134+16
 2375 0074 1360     		str	r3, [r2]
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2376              		.loc 1 2049 24
 2377 0076 164B     		ldr	r3, .L134+20
 2378 0078 4FF0FF32 		mov	r2, #-1
 2379 007c 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2380              		.loc 1 2050 21
 2381 007e 154B     		ldr	r3, .L134+24
 2382 0080 0122     		movs	r2, #1
 2383 0082 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2384              		.loc 1 2051 14
 2385 0084 144B     		ldr	r3, .L134+28
 2386 0086 0022     		movs	r2, #0
 2387 0088 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2388              		.loc 1 2065 7
 2389 008a FFF7FEFF 		bl	xPortStartScheduler
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 83


2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2390              		.loc 1 2086 1
 2391 008e 10E0     		b	.L133
 2392              	.L130:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2393              		.loc 1 2080 3
 2394 0090 7B69     		ldr	r3, [r7, #20]
 2395 0092 B3F1FF3F 		cmp	r3, #-1
 2396 0096 0CD1     		bne	.L133
 2397              	.LBB148:
 2398              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2399              		.loc 2 195 2
 2400              		.syntax unified
 2401              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2402 0098 4FF05003 			mov r3, #80												
 2403 009c 72B6     		cpsid i													
 2404 009e 83F31188 		msr basepri, r3											
 2405 00a2 BFF36F8F 		isb														
 2406 00a6 BFF34F8F 		dsb														
 2407 00aa 62B6     		cpsie i													
 2408              	
 2409              	@ 0 "" 2
 2410              		.thumb
 2411              		.syntax unified
 2412 00ac FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2413              		.loc 2 205 1
 2414 00ae 00BF     		nop
 2415              	.L132:
 2416              	.LBE149:
 2417              	.LBE148:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2418              		.loc 1 2080 3 discriminator 2
 2419 00b0 FEE7     		b	.L132
 2420              	.L133:
 2421              		.loc 1 2086 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 84


 2422 00b2 00BF     		nop
 2423 00b4 1837     		adds	r7, r7, #24
 2424              	.LCFI69:
 2425              		.cfi_def_cfa_offset 8
 2426 00b6 BD46     		mov	sp, r7
 2427              	.LCFI70:
 2428              		.cfi_def_cfa_register 13
 2429              		@ sp needed
 2430 00b8 80BD     		pop	{r7, pc}
 2431              	.L135:
 2432 00ba 00BF     		.align	2
 2433              	.L134:
 2434 00bc 00000000 		.word	.LC0
 2435 00c0 00000000 		.word	prvIdleTask
 2436 00c4 00000000 		.word	xIdleTaskHandle
 2437 00c8 00000000 		.word	pxCurrentTCB
 2438 00cc 00000000 		.word	_impure_ptr
 2439 00d0 00000000 		.word	xNextTaskUnblockTime
 2440 00d4 00000000 		.word	xSchedulerRunning
 2441 00d8 00000000 		.word	xTickCount
 2442              		.cfi_endproc
 2443              	.LFE18:
 2445              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2446              		.align	1
 2447              		.global	vTaskEndScheduler
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2452              	vTaskEndScheduler:
 2453              	.LFB19:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2454              		.loc 1 2090 1
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 8
 2457              		@ frame_needed = 1, uses_anonymous_args = 0
 2458 0000 80B5     		push	{r7, lr}
 2459              	.LCFI71:
 2460              		.cfi_def_cfa_offset 8
 2461              		.cfi_offset 7, -8
 2462              		.cfi_offset 14, -4
 2463 0002 82B0     		sub	sp, sp, #8
 2464              	.LCFI72:
 2465              		.cfi_def_cfa_offset 16
 2466 0004 00AF     		add	r7, sp, #0
 2467              	.LCFI73:
 2468              		.cfi_def_cfa_register 7
 2469              	.LBB150:
 2470              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2471              		.loc 2 195 2
 2472              		.syntax unified
 2473              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2474 0006 4FF05003 			mov r3, #80												
 2475 000a 72B6     		cpsid i													
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 85


 2476 000c 83F31188 		msr basepri, r3											
 2477 0010 BFF36F8F 		isb														
 2478 0014 BFF34F8F 		dsb														
 2479 0018 62B6     		cpsie i													
 2480              	
 2481              	@ 0 "" 2
 2482              		.thumb
 2483              		.syntax unified
 2484 001a 7B60     		str	r3, [r7, #4]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2485              		.loc 2 205 1
 2486 001c 00BF     		nop
 2487              	.LBE151:
 2488              	.LBE150:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2489              		.loc 1 2095 20
 2490 001e 044B     		ldr	r3, .L137
 2491 0020 0022     		movs	r2, #0
 2492 0022 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2493              		.loc 1 2096 2
 2494 0024 FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2495              		.loc 1 2097 1
 2496 0028 00BF     		nop
 2497 002a 0837     		adds	r7, r7, #8
 2498              	.LCFI74:
 2499              		.cfi_def_cfa_offset 8
 2500 002c BD46     		mov	sp, r7
 2501              	.LCFI75:
 2502              		.cfi_def_cfa_register 13
 2503              		@ sp needed
 2504 002e 80BD     		pop	{r7, pc}
 2505              	.L138:
 2506              		.align	2
 2507              	.L137:
 2508 0030 00000000 		.word	xSchedulerRunning
 2509              		.cfi_endproc
 2510              	.LFE19:
 2512              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2513              		.align	1
 2514              		.global	vTaskSuspendAll
 2515              		.syntax unified
 2516              		.thumb
 2517              		.thumb_func
 2519              	vTaskSuspendAll:
 2520              	.LFB20:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2521              		.loc 1 2101 1
 2522              		.cfi_startproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 86


 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 1, uses_anonymous_args = 0
 2525              		@ link register save eliminated.
 2526 0000 80B4     		push	{r7}
 2527              	.LCFI76:
 2528              		.cfi_def_cfa_offset 4
 2529              		.cfi_offset 7, -4
 2530 0002 00AF     		add	r7, sp, #0
 2531              	.LCFI77:
 2532              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2533              		.loc 1 2106 2
 2534 0004 044B     		ldr	r3, .L140
 2535 0006 1B68     		ldr	r3, [r3]
 2536 0008 0133     		adds	r3, r3, #1
 2537 000a 034A     		ldr	r2, .L140
 2538 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2539              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2540              		.loc 1 2108 1
 2541 000e 00BF     		nop
 2542 0010 BD46     		mov	sp, r7
 2543              	.LCFI78:
 2544              		.cfi_def_cfa_register 13
 2545              		@ sp needed
 2546 0012 5DF8047B 		ldr	r7, [sp], #4
 2547              	.LCFI79:
 2548              		.cfi_restore 7
 2549              		.cfi_def_cfa_offset 0
 2550 0016 7047     		bx	lr
 2551              	.L141:
 2552              		.align	2
 2553              	.L140:
 2554 0018 00000000 		.word	uxSchedulerSuspended
 2555              		.cfi_endproc
 2556              	.LFE20:
 2558              		.section	.text.xTaskResumeAll,"ax",%progbits
 2559              		.align	1
 2560              		.global	xTaskResumeAll
 2561              		.syntax unified
 2562              		.thumb
 2563              		.thumb_func
 2565              	xTaskResumeAll:
 2566              	.LFB21:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 87


2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 88


2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2567              		.loc 1 2175 1
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 16
 2570              		@ frame_needed = 1, uses_anonymous_args = 0
 2571 0000 80B5     		push	{r7, lr}
 2572              	.LCFI80:
 2573              		.cfi_def_cfa_offset 8
 2574              		.cfi_offset 7, -8
 2575              		.cfi_offset 14, -4
 2576 0002 84B0     		sub	sp, sp, #16
 2577              	.LCFI81:
 2578              		.cfi_def_cfa_offset 24
 2579 0004 00AF     		add	r7, sp, #0
 2580              	.LCFI82:
 2581              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2582              		.loc 1 2176 8
 2583 0006 0023     		movs	r3, #0
 2584 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2585              		.loc 1 2177 12
 2586 000a 0023     		movs	r3, #0
 2587 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2588              		.loc 1 2181 2
 2589 000e 424B     		ldr	r3, .L153
 2590 0010 1B68     		ldr	r3, [r3]
 2591 0012 002B     		cmp	r3, #0
 2592 0014 0CD1     		bne	.L143
 2593              	.LBB152:
 2594              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2595              		.loc 2 195 2
 2596              		.syntax unified
 2597              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2598 0016 4FF05003 			mov r3, #80												
 2599 001a 72B6     		cpsid i													
 2600 001c 83F31188 		msr basepri, r3											
 2601 0020 BFF36F8F 		isb														
 2602 0024 BFF34F8F 		dsb														
 2603 0028 62B6     		cpsie i													
 2604              	
 2605              	@ 0 "" 2
 2606              		.thumb
 2607              		.syntax unified
 2608 002a 3B60     		str	r3, [r7]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2609              		.loc 2 205 1
 2610 002c 00BF     		nop
 2611              	.L144:
 2612              	.LBE153:
 2613              	.LBE152:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 89


 2614              		.loc 1 2181 2 discriminator 1
 2615 002e FEE7     		b	.L144
 2616              	.L143:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2617              		.loc 1 2188 2
 2618 0030 FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2619              		.loc 1 2190 3
 2620 0034 384B     		ldr	r3, .L153
 2621 0036 1B68     		ldr	r3, [r3]
 2622 0038 013B     		subs	r3, r3, #1
 2623 003a 374A     		ldr	r2, .L153
 2624 003c 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2625              		.loc 1 2192 28
 2626 003e 364B     		ldr	r3, .L153
 2627 0040 1B68     		ldr	r3, [r3]
 2628              		.loc 1 2192 5
 2629 0042 002B     		cmp	r3, #0
 2630 0044 61D1     		bne	.L145
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2631              		.loc 1 2194 31
 2632 0046 354B     		ldr	r3, .L153+4
 2633 0048 1B68     		ldr	r3, [r3]
 2634              		.loc 1 2194 6
 2635 004a 002B     		cmp	r3, #0
 2636 004c 5DD0     		beq	.L145
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2637              		.loc 1 2198 10
 2638 004e 2EE0     		b	.L146
 2639              	.L147:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2640              		.loc 1 2200 14
 2641 0050 334B     		ldr	r3, .L153+8
 2642 0052 DB68     		ldr	r3, [r3, #12]
 2643              		.loc 1 2200 12
 2644 0054 DB68     		ldr	r3, [r3, #12]
 2645 0056 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2646              		.loc 1 2201 15
 2647 0058 FB68     		ldr	r3, [r7, #12]
 2648 005a 1833     		adds	r3, r3, #24
 2649 005c 1846     		mov	r0, r3
 2650 005e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 90


2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2651              		.loc 1 2202 15
 2652 0062 FB68     		ldr	r3, [r7, #12]
 2653 0064 0433     		adds	r3, r3, #4
 2654 0066 1846     		mov	r0, r3
 2655 0068 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2656              		.loc 1 2203 6
 2657 006c FB68     		ldr	r3, [r7, #12]
 2658 006e DB6A     		ldr	r3, [r3, #44]
 2659 0070 0122     		movs	r2, #1
 2660 0072 9A40     		lsls	r2, r2, r3
 2661 0074 2B4B     		ldr	r3, .L153+12
 2662 0076 1B68     		ldr	r3, [r3]
 2663 0078 1343     		orrs	r3, r3, r2
 2664 007a 2A4A     		ldr	r2, .L153+12
 2665 007c 1360     		str	r3, [r2]
 2666 007e FB68     		ldr	r3, [r7, #12]
 2667 0080 DA6A     		ldr	r2, [r3, #44]
 2668 0082 1346     		mov	r3, r2
 2669 0084 9B00     		lsls	r3, r3, #2
 2670 0086 1344     		add	r3, r3, r2
 2671 0088 9B00     		lsls	r3, r3, #2
 2672 008a 274A     		ldr	r2, .L153+16
 2673 008c 1A44     		add	r2, r2, r3
 2674 008e FB68     		ldr	r3, [r7, #12]
 2675 0090 0433     		adds	r3, r3, #4
 2676 0092 1946     		mov	r1, r3
 2677 0094 1046     		mov	r0, r2
 2678 0096 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2679              		.loc 1 2207 15
 2680 009a FB68     		ldr	r3, [r7, #12]
 2681 009c DA6A     		ldr	r2, [r3, #44]
 2682              		.loc 1 2207 43
 2683 009e 234B     		ldr	r3, .L153+20
 2684 00a0 1B68     		ldr	r3, [r3]
 2685 00a2 DB6A     		ldr	r3, [r3, #44]
 2686              		.loc 1 2207 8
 2687 00a4 9A42     		cmp	r2, r3
 2688 00a6 02D3     		bcc	.L146
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2689              		.loc 1 2209 21
 2690 00a8 214B     		ldr	r3, .L153+24
 2691 00aa 0122     		movs	r2, #1
 2692 00ac 1A60     		str	r2, [r3]
 2693              	.L146:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2694              		.loc 1 2198 12
 2695 00ae 1C4B     		ldr	r3, .L153+8
 2696 00b0 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2697              		.loc 1 2198 10
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 91


 2698 00b2 002B     		cmp	r3, #0
 2699 00b4 CCD1     		bne	.L147
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2700              		.loc 1 2217 7
 2701 00b6 FB68     		ldr	r3, [r7, #12]
 2702 00b8 002B     		cmp	r3, #0
 2703 00ba 01D0     		beq	.L148
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2704              		.loc 1 2225 6
 2705 00bc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2706              	.L148:
 2707              	.LBB154:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2708              		.loc 1 2233 18
 2709 00c0 1C4B     		ldr	r3, .L153+28
 2710 00c2 1B68     		ldr	r3, [r3]
 2711 00c4 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2712              		.loc 1 2235 8
 2713 00c6 7B68     		ldr	r3, [r7, #4]
 2714 00c8 002B     		cmp	r3, #0
 2715 00ca 10D0     		beq	.L149
 2716              	.L151:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2717              		.loc 1 2239 12
 2718 00cc FFF7FEFF 		bl	xTaskIncrementTick
 2719 00d0 0346     		mov	r3, r0
 2720              		.loc 1 2239 10
 2721 00d2 002B     		cmp	r3, #0
 2722 00d4 02D0     		beq	.L150
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 92


 2723              		.loc 1 2241 23
 2724 00d6 164B     		ldr	r3, .L153+24
 2725 00d8 0122     		movs	r2, #1
 2726 00da 1A60     		str	r2, [r3]
 2727              	.L150:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2728              		.loc 1 2247 8
 2729 00dc 7B68     		ldr	r3, [r7, #4]
 2730 00de 013B     		subs	r3, r3, #1
 2731 00e0 7B60     		str	r3, [r7, #4]
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2732              		.loc 1 2248 7
 2733 00e2 7B68     		ldr	r3, [r7, #4]
 2734 00e4 002B     		cmp	r3, #0
 2735 00e6 F1D1     		bne	.L151
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2736              		.loc 1 2250 21
 2737 00e8 124B     		ldr	r3, .L153+28
 2738 00ea 0022     		movs	r2, #0
 2739 00ec 1A60     		str	r2, [r3]
 2740              	.L149:
 2741              	.LBE154:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2742              		.loc 1 2258 23
 2743 00ee 104B     		ldr	r3, .L153+24
 2744 00f0 1B68     		ldr	r3, [r3]
 2745              		.loc 1 2258 7
 2746 00f2 002B     		cmp	r3, #0
 2747 00f4 09D0     		beq	.L145
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2748              		.loc 1 2262 23
 2749 00f6 0123     		movs	r3, #1
 2750 00f8 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2751              		.loc 1 2265 6
 2752 00fa 0F4B     		ldr	r3, .L153+32
 2753 00fc 4FF08052 		mov	r2, #268435456
 2754 0100 1A60     		str	r2, [r3]
 2755              		.syntax unified
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 93


 2756              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2757 0102 BFF34F8F 		dsb
 2758              	@ 0 "" 2
 2759              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2760 0106 BFF36F8F 		isb
 2761              	@ 0 "" 2
 2762              		.thumb
 2763              		.syntax unified
 2764              	.L145:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2765              		.loc 1 2278 2
 2766 010a FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2767              		.loc 1 2280 9
 2768 010e BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2769              		.loc 1 2281 1
 2770 0110 1846     		mov	r0, r3
 2771 0112 1037     		adds	r7, r7, #16
 2772              	.LCFI83:
 2773              		.cfi_def_cfa_offset 8
 2774 0114 BD46     		mov	sp, r7
 2775              	.LCFI84:
 2776              		.cfi_def_cfa_register 13
 2777              		@ sp needed
 2778 0116 80BD     		pop	{r7, pc}
 2779              	.L154:
 2780              		.align	2
 2781              	.L153:
 2782 0118 00000000 		.word	uxSchedulerSuspended
 2783 011c 00000000 		.word	uxCurrentNumberOfTasks
 2784 0120 00000000 		.word	xPendingReadyList
 2785 0124 00000000 		.word	uxTopReadyPriority
 2786 0128 00000000 		.word	pxReadyTasksLists
 2787 012c 00000000 		.word	pxCurrentTCB
 2788 0130 00000000 		.word	xYieldPending
 2789 0134 00000000 		.word	uxPendedTicks
 2790 0138 04ED00E0 		.word	-536810236
 2791              		.cfi_endproc
 2792              	.LFE21:
 2794              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2795              		.align	1
 2796              		.global	xTaskGetTickCount
 2797              		.syntax unified
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 94


 2798              		.thumb
 2799              		.thumb_func
 2801              	xTaskGetTickCount:
 2802              	.LFB22:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2803              		.loc 1 2285 1
 2804              		.cfi_startproc
 2805              		@ args = 0, pretend = 0, frame = 8
 2806              		@ frame_needed = 1, uses_anonymous_args = 0
 2807              		@ link register save eliminated.
 2808 0000 80B4     		push	{r7}
 2809              	.LCFI85:
 2810              		.cfi_def_cfa_offset 4
 2811              		.cfi_offset 7, -4
 2812 0002 83B0     		sub	sp, sp, #12
 2813              	.LCFI86:
 2814              		.cfi_def_cfa_offset 16
 2815 0004 00AF     		add	r7, sp, #0
 2816              	.LCFI87:
 2817              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2818              		.loc 1 2291 10
 2819 0006 054B     		ldr	r3, .L157
 2820 0008 1B68     		ldr	r3, [r3]
 2821 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2822              		.loc 1 2295 9
 2823 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2824              		.loc 1 2296 1
 2825 000e 1846     		mov	r0, r3
 2826 0010 0C37     		adds	r7, r7, #12
 2827              	.LCFI88:
 2828              		.cfi_def_cfa_offset 4
 2829 0012 BD46     		mov	sp, r7
 2830              	.LCFI89:
 2831              		.cfi_def_cfa_register 13
 2832              		@ sp needed
 2833 0014 5DF8047B 		ldr	r7, [sp], #4
 2834              	.LCFI90:
 2835              		.cfi_restore 7
 2836              		.cfi_def_cfa_offset 0
 2837 0018 7047     		bx	lr
 2838              	.L158:
 2839 001a 00BF     		.align	2
 2840              	.L157:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 95


 2841 001c 00000000 		.word	xTickCount
 2842              		.cfi_endproc
 2843              	.LFE22:
 2845              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2846              		.align	1
 2847              		.global	xTaskGetTickCountFromISR
 2848              		.syntax unified
 2849              		.thumb
 2850              		.thumb_func
 2852              	xTaskGetTickCountFromISR:
 2853              	.LFB23:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2854              		.loc 1 2300 1
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 8
 2857              		@ frame_needed = 1, uses_anonymous_args = 0
 2858 0000 80B5     		push	{r7, lr}
 2859              	.LCFI91:
 2860              		.cfi_def_cfa_offset 8
 2861              		.cfi_offset 7, -8
 2862              		.cfi_offset 14, -4
 2863 0002 82B0     		sub	sp, sp, #8
 2864              	.LCFI92:
 2865              		.cfi_def_cfa_offset 16
 2866 0004 00AF     		add	r7, sp, #0
 2867              	.LCFI93:
 2868              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2869              		.loc 1 2318 2
 2870 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2871              		.loc 1 2320 25
 2872 000a 0023     		movs	r3, #0
 2873 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 96


 2874              		.loc 1 2322 11
 2875 000e 044B     		ldr	r3, .L161
 2876 0010 1B68     		ldr	r3, [r3]
 2877 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2878              		.loc 1 2326 9
 2879 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2880              		.loc 1 2327 1
 2881 0016 1846     		mov	r0, r3
 2882 0018 0837     		adds	r7, r7, #8
 2883              	.LCFI94:
 2884              		.cfi_def_cfa_offset 8
 2885 001a BD46     		mov	sp, r7
 2886              	.LCFI95:
 2887              		.cfi_def_cfa_register 13
 2888              		@ sp needed
 2889 001c 80BD     		pop	{r7, pc}
 2890              	.L162:
 2891 001e 00BF     		.align	2
 2892              	.L161:
 2893 0020 00000000 		.word	xTickCount
 2894              		.cfi_endproc
 2895              	.LFE23:
 2897              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2898              		.align	1
 2899              		.global	uxTaskGetNumberOfTasks
 2900              		.syntax unified
 2901              		.thumb
 2902              		.thumb_func
 2904              	uxTaskGetNumberOfTasks:
 2905              	.LFB24:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2906              		.loc 1 2331 1
 2907              		.cfi_startproc
 2908              		@ args = 0, pretend = 0, frame = 0
 2909              		@ frame_needed = 1, uses_anonymous_args = 0
 2910              		@ link register save eliminated.
 2911 0000 80B4     		push	{r7}
 2912              	.LCFI96:
 2913              		.cfi_def_cfa_offset 4
 2914              		.cfi_offset 7, -4
 2915 0002 00AF     		add	r7, sp, #0
 2916              	.LCFI97:
 2917              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2918              		.loc 1 2334 9
 2919 0004 034B     		ldr	r3, .L165
 2920 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 97


2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2921              		.loc 1 2335 1
 2922 0008 1846     		mov	r0, r3
 2923 000a BD46     		mov	sp, r7
 2924              	.LCFI98:
 2925              		.cfi_def_cfa_register 13
 2926              		@ sp needed
 2927 000c 5DF8047B 		ldr	r7, [sp], #4
 2928              	.LCFI99:
 2929              		.cfi_restore 7
 2930              		.cfi_def_cfa_offset 0
 2931 0010 7047     		bx	lr
 2932              	.L166:
 2933 0012 00BF     		.align	2
 2934              	.L165:
 2935 0014 00000000 		.word	uxCurrentNumberOfTasks
 2936              		.cfi_endproc
 2937              	.LFE24:
 2939              		.section	.text.pcTaskGetName,"ax",%progbits
 2940              		.align	1
 2941              		.global	pcTaskGetName
 2942              		.syntax unified
 2943              		.thumb
 2944              		.thumb_func
 2946              	pcTaskGetName:
 2947              	.LFB25:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2948              		.loc 1 2339 1
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 16
 2951              		@ frame_needed = 1, uses_anonymous_args = 0
 2952              		@ link register save eliminated.
 2953 0000 80B4     		push	{r7}
 2954              	.LCFI100:
 2955              		.cfi_def_cfa_offset 4
 2956              		.cfi_offset 7, -4
 2957 0002 85B0     		sub	sp, sp, #20
 2958              	.LCFI101:
 2959              		.cfi_def_cfa_offset 24
 2960 0004 00AF     		add	r7, sp, #0
 2961              	.LCFI102:
 2962              		.cfi_def_cfa_register 7
 2963 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2964              		.loc 1 2344 10
 2965 0008 7B68     		ldr	r3, [r7, #4]
 2966 000a 002B     		cmp	r3, #0
 2967 000c 02D1     		bne	.L168
 2968              		.loc 1 2344 10 is_stmt 0 discriminator 1
 2969 000e 0E4B     		ldr	r3, .L173
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 98


 2970 0010 1B68     		ldr	r3, [r3]
 2971 0012 00E0     		b	.L169
 2972              	.L168:
 2973              		.loc 1 2344 10 discriminator 2
 2974 0014 7B68     		ldr	r3, [r7, #4]
 2975              	.L169:
 2976              		.loc 1 2344 8 is_stmt 1 discriminator 4
 2977 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2978              		.loc 1 2345 2 discriminator 4
 2979 0018 FB68     		ldr	r3, [r7, #12]
 2980 001a 002B     		cmp	r3, #0
 2981 001c 0CD1     		bne	.L170
 2982              	.LBB155:
 2983              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2984              		.loc 2 195 2
 2985              		.syntax unified
 2986              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2987 001e 4FF05003 			mov r3, #80												
 2988 0022 72B6     		cpsid i													
 2989 0024 83F31188 		msr basepri, r3											
 2990 0028 BFF36F8F 		isb														
 2991 002c BFF34F8F 		dsb														
 2992 0030 62B6     		cpsie i													
 2993              	
 2994              	@ 0 "" 2
 2995              		.thumb
 2996              		.syntax unified
 2997 0032 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2998              		.loc 2 205 1
 2999 0034 00BF     		nop
 3000              	.L171:
 3001              	.LBE156:
 3002              	.LBE155:
 3003              		.loc 1 2345 2 discriminator 1
 3004 0036 FEE7     		b	.L171
 3005              	.L170:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3006              		.loc 1 2346 9
 3007 0038 FB68     		ldr	r3, [r7, #12]
 3008 003a 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3009              		.loc 1 2347 1
 3010 003c 1846     		mov	r0, r3
 3011 003e 1437     		adds	r7, r7, #20
 3012              	.LCFI103:
 3013              		.cfi_def_cfa_offset 4
 3014 0040 BD46     		mov	sp, r7
 3015              	.LCFI104:
 3016              		.cfi_def_cfa_register 13
 3017              		@ sp needed
 3018 0042 5DF8047B 		ldr	r7, [sp], #4
 3019              	.LCFI105:
 3020              		.cfi_restore 7
 3021              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 99


 3022 0046 7047     		bx	lr
 3023              	.L174:
 3024              		.align	2
 3025              	.L173:
 3026 0048 00000000 		.word	pxCurrentTCB
 3027              		.cfi_endproc
 3028              	.LFE25:
 3030              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3031              		.align	1
 3032              		.global	xTaskIncrementTick
 3033              		.syntax unified
 3034              		.thumb
 3035              		.thumb_func
 3037              	xTaskIncrementTick:
 3038              	.LFB26:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 100


2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 101


2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 102


2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 103


2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 104


2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3039              		.loc 1 2666 1
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 24
 3042              		@ frame_needed = 1, uses_anonymous_args = 0
 3043 0000 80B5     		push	{r7, lr}
 3044              	.LCFI106:
 3045              		.cfi_def_cfa_offset 8
 3046              		.cfi_offset 7, -8
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 105


 3047              		.cfi_offset 14, -4
 3048 0002 86B0     		sub	sp, sp, #24
 3049              	.LCFI107:
 3050              		.cfi_def_cfa_offset 32
 3051 0004 00AF     		add	r7, sp, #0
 3052              	.LCFI108:
 3053              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3054              		.loc 1 2669 12
 3055 0006 0023     		movs	r3, #0
 3056 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3057              		.loc 1 2675 27
 3058 000a 4F4B     		ldr	r3, .L189
 3059 000c 1B68     		ldr	r3, [r3]
 3060              		.loc 1 2675 4
 3061 000e 002B     		cmp	r3, #0
 3062 0010 40F08A80 		bne	.L176
 3063              	.LBB157:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3064              		.loc 1 2679 49
 3065 0014 4D4B     		ldr	r3, .L189+4
 3066 0016 1B68     		ldr	r3, [r3]
 3067              		.loc 1 2679 20
 3068 0018 0133     		adds	r3, r3, #1
 3069 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3070              		.loc 1 2683 14
 3071 001c 4B4A     		ldr	r2, .L189+4
 3072 001e 3B69     		ldr	r3, [r7, #16]
 3073 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3074              		.loc 1 2685 5
 3075 0022 3B69     		ldr	r3, [r7, #16]
 3076 0024 002B     		cmp	r3, #0
 3077 0026 22D1     		bne	.L177
 3078              	.LBB158:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3079              		.loc 1 2687 4
 3080 0028 494B     		ldr	r3, .L189+8
 3081 002a 1B68     		ldr	r3, [r3]
 3082 002c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 106


 3083 002e 002B     		cmp	r3, #0
 3084 0030 0CD0     		beq	.L178
 3085              	.LBB159:
 3086              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3087              		.loc 2 195 2
 3088              		.syntax unified
 3089              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3090 0032 4FF05003 			mov r3, #80												
 3091 0036 72B6     		cpsid i													
 3092 0038 83F31188 		msr basepri, r3											
 3093 003c BFF36F8F 		isb														
 3094 0040 BFF34F8F 		dsb														
 3095 0044 62B6     		cpsie i													
 3096              	
 3097              	@ 0 "" 2
 3098              		.thumb
 3099              		.syntax unified
 3100 0046 3B60     		str	r3, [r7]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3101              		.loc 2 205 1
 3102 0048 00BF     		nop
 3103              	.L179:
 3104              	.LBE160:
 3105              	.LBE159:
 3106              		.loc 1 2687 4 discriminator 1
 3107 004a FEE7     		b	.L179
 3108              	.L178:
 3109              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3110 004c 404B     		ldr	r3, .L189+8
 3111 004e 1B68     		ldr	r3, [r3]
 3112 0050 FB60     		str	r3, [r7, #12]
 3113 0052 404B     		ldr	r3, .L189+12
 3114 0054 1B68     		ldr	r3, [r3]
 3115 0056 3E4A     		ldr	r2, .L189+8
 3116 0058 1360     		str	r3, [r2]
 3117 005a 3E4A     		ldr	r2, .L189+12
 3118 005c FB68     		ldr	r3, [r7, #12]
 3119 005e 1360     		str	r3, [r2]
 3120 0060 3D4B     		ldr	r3, .L189+16
 3121 0062 1B68     		ldr	r3, [r3]
 3122 0064 0133     		adds	r3, r3, #1
 3123 0066 3C4A     		ldr	r2, .L189+16
 3124 0068 1360     		str	r3, [r2]
 3125 006a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3126              	.L177:
 3127              	.LBE158:
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 107


2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3128              		.loc 1 2698 23 is_stmt 1
 3129 006e 3B4B     		ldr	r3, .L189+20
 3130 0070 1B68     		ldr	r3, [r3]
 3131              		.loc 1 2698 5
 3132 0072 3A69     		ldr	r2, [r7, #16]
 3133 0074 9A42     		cmp	r2, r3
 3134 0076 48D3     		bcc	.L180
 3135              	.L185:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3136              		.loc 1 2702 9
 3137 0078 354B     		ldr	r3, .L189+8
 3138 007a 1B68     		ldr	r3, [r3]
 3139 007c 1B68     		ldr	r3, [r3]
 3140              		.loc 1 2702 7
 3141 007e 002B     		cmp	r3, #0
 3142 0080 04D1     		bne	.L181
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3143              		.loc 1 2709 27
 3144 0082 364B     		ldr	r3, .L189+20
 3145 0084 4FF0FF32 		mov	r2, #-1
 3146 0088 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3147              		.loc 1 2710 6
 3148 008a 3EE0     		b	.L180
 3149              	.L181:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3150              		.loc 1 2718 14
 3151 008c 304B     		ldr	r3, .L189+8
 3152 008e 1B68     		ldr	r3, [r3]
 3153 0090 DB68     		ldr	r3, [r3, #12]
 3154              		.loc 1 2718 12
 3155 0092 DB68     		ldr	r3, [r3, #12]
 3156 0094 BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3157              		.loc 1 2719 17
 3158 0096 BB68     		ldr	r3, [r7, #8]
 3159 0098 5B68     		ldr	r3, [r3, #4]
 3160 009a 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 108


 3161              		.loc 1 2721 8
 3162 009c 3A69     		ldr	r2, [r7, #16]
 3163 009e 7B68     		ldr	r3, [r7, #4]
 3164 00a0 9A42     		cmp	r2, r3
 3165 00a2 03D2     		bcs	.L182
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3166              		.loc 1 2728 28
 3167 00a4 2D4A     		ldr	r2, .L189+20
 3168 00a6 7B68     		ldr	r3, [r7, #4]
 3169 00a8 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3170              		.loc 1 2729 7
 3171 00aa 2EE0     		b	.L180
 3172              	.L182:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3173              		.loc 1 2737 15
 3174 00ac BB68     		ldr	r3, [r7, #8]
 3175 00ae 0433     		adds	r3, r3, #4
 3176 00b0 1846     		mov	r0, r3
 3177 00b2 FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3178              		.loc 1 2741 10
 3179 00b6 BB68     		ldr	r3, [r7, #8]
 3180 00b8 9B6A     		ldr	r3, [r3, #40]
 3181              		.loc 1 2741 8
 3182 00ba 002B     		cmp	r3, #0
 3183 00bc 04D0     		beq	.L183
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3184              		.loc 1 2743 16
 3185 00be BB68     		ldr	r3, [r7, #8]
 3186 00c0 1833     		adds	r3, r3, #24
 3187 00c2 1846     		mov	r0, r3
 3188 00c4 FFF7FEFF 		bl	uxListRemove
 3189              	.L183:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 109


2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3190              		.loc 1 2752 6
 3191 00c8 BB68     		ldr	r3, [r7, #8]
 3192 00ca DB6A     		ldr	r3, [r3, #44]
 3193 00cc 0122     		movs	r2, #1
 3194 00ce 9A40     		lsls	r2, r2, r3
 3195 00d0 234B     		ldr	r3, .L189+24
 3196 00d2 1B68     		ldr	r3, [r3]
 3197 00d4 1343     		orrs	r3, r3, r2
 3198 00d6 224A     		ldr	r2, .L189+24
 3199 00d8 1360     		str	r3, [r2]
 3200 00da BB68     		ldr	r3, [r7, #8]
 3201 00dc DA6A     		ldr	r2, [r3, #44]
 3202 00de 1346     		mov	r3, r2
 3203 00e0 9B00     		lsls	r3, r3, #2
 3204 00e2 1344     		add	r3, r3, r2
 3205 00e4 9B00     		lsls	r3, r3, #2
 3206 00e6 1F4A     		ldr	r2, .L189+28
 3207 00e8 1A44     		add	r2, r2, r3
 3208 00ea BB68     		ldr	r3, [r7, #8]
 3209 00ec 0433     		adds	r3, r3, #4
 3210 00ee 1946     		mov	r1, r3
 3211 00f0 1046     		mov	r0, r2
 3212 00f2 FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3213              		.loc 1 2762 16
 3214 00f6 BB68     		ldr	r3, [r7, #8]
 3215 00f8 DA6A     		ldr	r2, [r3, #44]
 3216              		.loc 1 2762 44
 3217 00fa 1B4B     		ldr	r3, .L189+32
 3218 00fc 1B68     		ldr	r3, [r3]
 3219 00fe DB6A     		ldr	r3, [r3, #44]
 3220              		.loc 1 2762 9
 3221 0100 9A42     		cmp	r2, r3
 3222 0102 B9D3     		bcc	.L185
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3223              		.loc 1 2764 24
 3224 0104 0123     		movs	r3, #1
 3225 0106 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3226              		.loc 1 2702 7
 3227 0108 B6E7     		b	.L185
 3228              	.L180:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 110


2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3229              		.loc 1 2781 8
 3230 010a 174B     		ldr	r3, .L189+32
 3231 010c 1B68     		ldr	r3, [r3]
 3232 010e DA6A     		ldr	r2, [r3, #44]
 3233 0110 1449     		ldr	r1, .L189+28
 3234 0112 1346     		mov	r3, r2
 3235 0114 9B00     		lsls	r3, r3, #2
 3236 0116 1344     		add	r3, r3, r2
 3237 0118 9B00     		lsls	r3, r3, #2
 3238 011a 0B44     		add	r3, r3, r1
 3239 011c 1B68     		ldr	r3, [r3]
 3240              		.loc 1 2781 6
 3241 011e 012B     		cmp	r3, #1
 3242 0120 07D9     		bls	.L186
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3243              		.loc 1 2783 21
 3244 0122 0123     		movs	r3, #1
 3245 0124 7B61     		str	r3, [r7, #20]
 3246 0126 04E0     		b	.L186
 3247              	.L176:
 3248              	.LBE157:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 111


2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 3249              		.loc 1 2809 3
 3250 0128 104B     		ldr	r3, .L189+36
 3251 012a 1B68     		ldr	r3, [r3]
 3252 012c 0133     		adds	r3, r3, #1
 3253 012e 0F4A     		ldr	r2, .L189+36
 3254 0130 1360     		str	r3, [r2]
 3255              	.L186:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3256              		.loc 1 2822 21
 3257 0132 0F4B     		ldr	r3, .L189+40
 3258 0134 1B68     		ldr	r3, [r3]
 3259              		.loc 1 2822 5
 3260 0136 002B     		cmp	r3, #0
 3261 0138 01D0     		beq	.L187
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3262              		.loc 1 2824 20
 3263 013a 0123     		movs	r3, #1
 3264 013c 7B61     		str	r3, [r7, #20]
 3265              	.L187:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3266              		.loc 1 2833 9
 3267 013e 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3268              		.loc 1 2834 1
 3269 0140 1846     		mov	r0, r3
 3270 0142 1837     		adds	r7, r7, #24
 3271              	.LCFI109:
 3272              		.cfi_def_cfa_offset 8
 3273 0144 BD46     		mov	sp, r7
 3274              	.LCFI110:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 112


 3275              		.cfi_def_cfa_register 13
 3276              		@ sp needed
 3277 0146 80BD     		pop	{r7, pc}
 3278              	.L190:
 3279              		.align	2
 3280              	.L189:
 3281 0148 00000000 		.word	uxSchedulerSuspended
 3282 014c 00000000 		.word	xTickCount
 3283 0150 00000000 		.word	pxDelayedTaskList
 3284 0154 00000000 		.word	pxOverflowDelayedTaskList
 3285 0158 00000000 		.word	xNumOfOverflows
 3286 015c 00000000 		.word	xNextTaskUnblockTime
 3287 0160 00000000 		.word	uxTopReadyPriority
 3288 0164 00000000 		.word	pxReadyTasksLists
 3289 0168 00000000 		.word	pxCurrentTCB
 3290 016c 00000000 		.word	uxPendedTicks
 3291 0170 00000000 		.word	xYieldPending
 3292              		.cfi_endproc
 3293              	.LFE26:
 3295              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 3296              		.align	1
 3297              		.global	vTaskSetApplicationTaskTag
 3298              		.syntax unified
 3299              		.thumb
 3300              		.thumb_func
 3302              	vTaskSetApplicationTaskTag:
 3303              	.LFB27:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3304              		.loc 1 2840 2
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 16
 3307              		@ frame_needed = 1, uses_anonymous_args = 0
 3308 0000 80B5     		push	{r7, lr}
 3309              	.LCFI111:
 3310              		.cfi_def_cfa_offset 8
 3311              		.cfi_offset 7, -8
 3312              		.cfi_offset 14, -4
 3313 0002 84B0     		sub	sp, sp, #16
 3314              	.LCFI112:
 3315              		.cfi_def_cfa_offset 24
 3316 0004 00AF     		add	r7, sp, #0
 3317              	.LCFI113:
 3318              		.cfi_def_cfa_register 7
 3319 0006 7860     		str	r0, [r7, #4]
 3320 0008 3960     		str	r1, [r7]
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 3321              		.loc 1 2845 5
 3322 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 113


 3323 000c 002B     		cmp	r3, #0
 3324 000e 03D1     		bne	.L192
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
 3325              		.loc 1 2847 9
 3326 0010 084B     		ldr	r3, .L194
 3327 0012 1B68     		ldr	r3, [r3]
 3328 0014 FB60     		str	r3, [r7, #12]
 3329 0016 01E0     		b	.L193
 3330              	.L192:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
 3331              		.loc 1 2851 9
 3332 0018 7B68     		ldr	r3, [r7, #4]
 3333 001a FB60     		str	r3, [r7, #12]
 3334              	.L193:
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 3335              		.loc 1 2856 3
 3336 001c FFF7FEFF 		bl	vPortEnterCritical
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 3337              		.loc 1 2858 20
 3338 0020 FB68     		ldr	r3, [r7, #12]
 3339 0022 3A68     		ldr	r2, [r7]
 3340 0024 DA64     		str	r2, [r3, #76]
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3341              		.loc 1 2860 3
 3342 0026 FFF7FEFF 		bl	vPortExitCritical
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3343              		.loc 1 2861 2
 3344 002a 00BF     		nop
 3345 002c 1037     		adds	r7, r7, #16
 3346              	.LCFI114:
 3347              		.cfi_def_cfa_offset 8
 3348 002e BD46     		mov	sp, r7
 3349              	.LCFI115:
 3350              		.cfi_def_cfa_register 13
 3351              		@ sp needed
 3352 0030 80BD     		pop	{r7, pc}
 3353              	.L195:
 3354 0032 00BF     		.align	2
 3355              	.L194:
 3356 0034 00000000 		.word	pxCurrentTCB
 3357              		.cfi_endproc
 3358              	.LFE27:
 3360              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 3361              		.align	1
 3362              		.global	xTaskGetApplicationTaskTag
 3363              		.syntax unified
 3364              		.thumb
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 114


 3365              		.thumb_func
 3367              	xTaskGetApplicationTaskTag:
 3368              	.LFB28:
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3369              		.loc 1 2869 2
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 16
 3372              		@ frame_needed = 1, uses_anonymous_args = 0
 3373 0000 80B5     		push	{r7, lr}
 3374              	.LCFI116:
 3375              		.cfi_def_cfa_offset 8
 3376              		.cfi_offset 7, -8
 3377              		.cfi_offset 14, -4
 3378 0002 84B0     		sub	sp, sp, #16
 3379              	.LCFI117:
 3380              		.cfi_def_cfa_offset 24
 3381 0004 00AF     		add	r7, sp, #0
 3382              	.LCFI118:
 3383              		.cfi_def_cfa_register 7
 3384 0006 7860     		str	r0, [r7, #4]
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3385              		.loc 1 2874 11
 3386 0008 7B68     		ldr	r3, [r7, #4]
 3387 000a 002B     		cmp	r3, #0
 3388 000c 02D1     		bne	.L197
 3389              		.loc 1 2874 11 is_stmt 0 discriminator 1
 3390 000e 084B     		ldr	r3, .L200
 3391 0010 1B68     		ldr	r3, [r3]
 3392 0012 00E0     		b	.L198
 3393              	.L197:
 3394              		.loc 1 2874 11 discriminator 2
 3395 0014 7B68     		ldr	r3, [r7, #4]
 3396              	.L198:
 3397              		.loc 1 2874 9 is_stmt 1 discriminator 4
 3398 0016 FB60     		str	r3, [r7, #12]
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 3399              		.loc 1 2878 3 discriminator 4
 3400 0018 FFF7FEFF 		bl	vPortEnterCritical
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
 3401              		.loc 1 2880 12 discriminator 4
 3402 001c FB68     		ldr	r3, [r7, #12]
 3403 001e DB6C     		ldr	r3, [r3, #76]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 115


 3404 0020 BB60     		str	r3, [r7, #8]
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3405              		.loc 1 2882 3 discriminator 4
 3406 0022 FFF7FEFF 		bl	vPortExitCritical
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 3407              		.loc 1 2884 10 discriminator 4
 3408 0026 BB68     		ldr	r3, [r7, #8]
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3409              		.loc 1 2885 2 discriminator 4
 3410 0028 1846     		mov	r0, r3
 3411 002a 1037     		adds	r7, r7, #16
 3412              	.LCFI119:
 3413              		.cfi_def_cfa_offset 8
 3414 002c BD46     		mov	sp, r7
 3415              	.LCFI120:
 3416              		.cfi_def_cfa_register 13
 3417              		@ sp needed
 3418 002e 80BD     		pop	{r7, pc}
 3419              	.L201:
 3420              		.align	2
 3421              	.L200:
 3422 0030 00000000 		.word	pxCurrentTCB
 3423              		.cfi_endproc
 3424              	.LFE28:
 3426              		.section	.text.xTaskGetApplicationTaskTagFromISR,"ax",%progbits
 3427              		.align	1
 3428              		.global	xTaskGetApplicationTaskTagFromISR
 3429              		.syntax unified
 3430              		.thumb
 3431              		.thumb_func
 3433              	xTaskGetApplicationTaskTagFromISR:
 3434              	.LFB29:
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3435              		.loc 1 2893 2
 3436              		.cfi_startproc
 3437              		@ args = 0, pretend = 0, frame = 32
 3438              		@ frame_needed = 1, uses_anonymous_args = 0
 3439              		@ link register save eliminated.
 3440 0000 80B4     		push	{r7}
 3441              	.LCFI121:
 3442              		.cfi_def_cfa_offset 4
 3443              		.cfi_offset 7, -4
 3444 0002 89B0     		sub	sp, sp, #36
 3445              	.LCFI122:
 3446              		.cfi_def_cfa_offset 40
 3447 0004 00AF     		add	r7, sp, #0
 3448              	.LCFI123:
 3449              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 116


 3450 0006 7860     		str	r0, [r7, #4]
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3451              		.loc 1 2899 11
 3452 0008 7B68     		ldr	r3, [r7, #4]
 3453 000a 002B     		cmp	r3, #0
 3454 000c 02D1     		bne	.L203
 3455              		.loc 1 2899 11 is_stmt 0 discriminator 1
 3456 000e 124B     		ldr	r3, .L207
 3457 0010 1B68     		ldr	r3, [r3]
 3458 0012 00E0     		b	.L204
 3459              	.L203:
 3460              		.loc 1 2899 11 discriminator 2
 3461 0014 7B68     		ldr	r3, [r7, #4]
 3462              	.L204:
 3463              		.loc 1 2899 9 is_stmt 1 discriminator 4
 3464 0016 FB61     		str	r3, [r7, #28]
 3465              	.LBB161:
 3466              	.LBB162:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3467              		.loc 2 213 2 discriminator 4
 3468              		.syntax unified
 3469              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3470 0018 EFF31182 			mrs r2, basepri											
 3471 001c 4FF05003 		mov r3, #80												
 3472 0020 72B6     		cpsid i													
 3473 0022 83F31188 		msr basepri, r3											
 3474 0026 BFF36F8F 		isb														
 3475 002a BFF34F8F 		dsb														
 3476 002e 62B6     		cpsie i													
 3477              	
 3478              	@ 0 "" 2
 3479              		.thumb
 3480              		.syntax unified
 3481 0030 FA60     		str	r2, [r7, #12]
 3482 0032 BB60     		str	r3, [r7, #8]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 3483              		.loc 2 227 9 discriminator 4
 3484 0034 FB68     		ldr	r3, [r7, #12]
 3485              	.LBE162:
 3486              	.LBE161:
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3487              		.loc 1 2903 28 discriminator 4
 3488 0036 BB61     		str	r3, [r7, #24]
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
 3489              		.loc 1 2905 12 discriminator 4
 3490 0038 FB69     		ldr	r3, [r7, #28]
 3491 003a DB6C     		ldr	r3, [r3, #76]
 3492 003c 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 117


 3493 003e BB69     		ldr	r3, [r7, #24]
 3494 0040 3B61     		str	r3, [r7, #16]
 3495              	.LBB163:
 3496              	.LBB164:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3497              		.loc 2 233 2 discriminator 4
 3498 0042 3B69     		ldr	r3, [r7, #16]
 3499              		.syntax unified
 3500              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3501 0044 83F31188 			msr basepri, r3	
 3502              	@ 0 "" 2
 3503              		.loc 2 237 1 discriminator 4
 3504              		.thumb
 3505              		.syntax unified
 3506 0048 00BF     		nop
 3507              	.LBE164:
 3508              	.LBE163:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 3509              		.loc 1 2909 10 discriminator 4
 3510 004a 7B69     		ldr	r3, [r7, #20]
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3511              		.loc 1 2910 2 discriminator 4
 3512 004c 1846     		mov	r0, r3
 3513 004e 2437     		adds	r7, r7, #36
 3514              	.LCFI124:
 3515              		.cfi_def_cfa_offset 4
 3516 0050 BD46     		mov	sp, r7
 3517              	.LCFI125:
 3518              		.cfi_def_cfa_register 13
 3519              		@ sp needed
 3520 0052 5DF8047B 		ldr	r7, [sp], #4
 3521              	.LCFI126:
 3522              		.cfi_restore 7
 3523              		.cfi_def_cfa_offset 0
 3524 0056 7047     		bx	lr
 3525              	.L208:
 3526              		.align	2
 3527              	.L207:
 3528 0058 00000000 		.word	pxCurrentTCB
 3529              		.cfi_endproc
 3530              	.LFE29:
 3532              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 3533              		.align	1
 3534              		.global	xTaskCallApplicationTaskHook
 3535              		.syntax unified
 3536              		.thumb
 3537              		.thumb_func
 3539              	xTaskCallApplicationTaskHook:
 3540              	.LFB30:
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 118


2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3541              		.loc 1 2918 2
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 16
 3544              		@ frame_needed = 1, uses_anonymous_args = 0
 3545 0000 80B5     		push	{r7, lr}
 3546              	.LCFI127:
 3547              		.cfi_def_cfa_offset 8
 3548              		.cfi_offset 7, -8
 3549              		.cfi_offset 14, -4
 3550 0002 84B0     		sub	sp, sp, #16
 3551              	.LCFI128:
 3552              		.cfi_def_cfa_offset 24
 3553 0004 00AF     		add	r7, sp, #0
 3554              	.LCFI129:
 3555              		.cfi_def_cfa_register 7
 3556 0006 7860     		str	r0, [r7, #4]
 3557 0008 3960     		str	r1, [r7]
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 3558              		.loc 1 2923 5
 3559 000a 7B68     		ldr	r3, [r7, #4]
 3560 000c 002B     		cmp	r3, #0
 3561 000e 03D1     		bne	.L210
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
 3562              		.loc 1 2925 9
 3563 0010 0B4B     		ldr	r3, .L215
 3564 0012 1B68     		ldr	r3, [r3]
 3565 0014 FB60     		str	r3, [r7, #12]
 3566 0016 01E0     		b	.L211
 3567              	.L210:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
 3568              		.loc 1 2929 9
 3569 0018 7B68     		ldr	r3, [r7, #4]
 3570 001a FB60     		str	r3, [r7, #12]
 3571              	.L211:
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 3572              		.loc 1 2932 11
 3573 001c FB68     		ldr	r3, [r7, #12]
 3574 001e DB6C     		ldr	r3, [r3, #76]
 3575              		.loc 1 2932 5
 3576 0020 002B     		cmp	r3, #0
 3577 0022 05D0     		beq	.L212
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 3578              		.loc 1 2934 18
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 119


 3579 0024 FB68     		ldr	r3, [r7, #12]
 3580 0026 DB6C     		ldr	r3, [r3, #76]
 3581              		.loc 1 2934 14
 3582 0028 3868     		ldr	r0, [r7]
 3583 002a 9847     		blx	r3
 3584              	.LVL0:
 3585 002c B860     		str	r0, [r7, #8]
 3586 002e 01E0     		b	.L213
 3587              	.L212:
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 3588              		.loc 1 2938 12
 3589 0030 0023     		movs	r3, #0
 3590 0032 BB60     		str	r3, [r7, #8]
 3591              	.L213:
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 3592              		.loc 1 2941 10
 3593 0034 BB68     		ldr	r3, [r7, #8]
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3594              		.loc 1 2942 2
 3595 0036 1846     		mov	r0, r3
 3596 0038 1037     		adds	r7, r7, #16
 3597              	.LCFI130:
 3598              		.cfi_def_cfa_offset 8
 3599 003a BD46     		mov	sp, r7
 3600              	.LCFI131:
 3601              		.cfi_def_cfa_register 13
 3602              		@ sp needed
 3603 003c 80BD     		pop	{r7, pc}
 3604              	.L216:
 3605 003e 00BF     		.align	2
 3606              	.L215:
 3607 0040 00000000 		.word	pxCurrentTCB
 3608              		.cfi_endproc
 3609              	.LFE30:
 3611              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3612              		.align	1
 3613              		.global	vTaskSwitchContext
 3614              		.syntax unified
 3615              		.thumb
 3616              		.thumb_func
 3618              	vTaskSwitchContext:
 3619              	.LFB31:
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3620              		.loc 1 2948 1
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 32
 3623              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 120


 3624 0000 80B5     		push	{r7, lr}
 3625              	.LCFI132:
 3626              		.cfi_def_cfa_offset 8
 3627              		.cfi_offset 7, -8
 3628              		.cfi_offset 14, -4
 3629 0002 88B0     		sub	sp, sp, #32
 3630              	.LCFI133:
 3631              		.cfi_def_cfa_offset 40
 3632 0004 00AF     		add	r7, sp, #0
 3633              	.LCFI134:
 3634              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3635              		.loc 1 2949 27
 3636 0006 3D4B     		ldr	r3, .L227
 3637 0008 1B68     		ldr	r3, [r3]
 3638              		.loc 1 2949 4
 3639 000a 002B     		cmp	r3, #0
 3640 000c 03D0     		beq	.L218
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3641              		.loc 1 2953 17
 3642 000e 3C4B     		ldr	r3, .L227+4
 3643 0010 0122     		movs	r2, #1
 3644 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 121


2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3645              		.loc 1 3017 1
 3646 0014 6DE0     		b	.L226
 3647              	.L218:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3648              		.loc 1 2957 17
 3649 0016 3A4B     		ldr	r3, .L227+4
 3650 0018 0022     		movs	r2, #0
 3651 001a 1A60     		str	r2, [r3]
 3652              	.LBB165:
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3653              		.loc 1 2988 3
 3654 001c 394B     		ldr	r3, .L227+8
 3655 001e 1B68     		ldr	r3, [r3]
 3656 0020 1B6B     		ldr	r3, [r3, #48]
 3657 0022 FB61     		str	r3, [r7, #28]
 3658 0024 4FF0A533 		mov	r3, #-1515870811
 3659 0028 BB61     		str	r3, [r7, #24]
 3660 002a FB69     		ldr	r3, [r7, #28]
 3661 002c 1B68     		ldr	r3, [r3]
 3662 002e BA69     		ldr	r2, [r7, #24]
 3663 0030 9A42     		cmp	r2, r3
 3664 0032 11D1     		bne	.L220
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3665              		.loc 1 2988 3 is_stmt 0 discriminator 2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 122


 3666 0034 FB69     		ldr	r3, [r7, #28]
 3667 0036 0433     		adds	r3, r3, #4
 3668 0038 1B68     		ldr	r3, [r3]
 3669 003a BA69     		ldr	r2, [r7, #24]
 3670 003c 9A42     		cmp	r2, r3
 3671 003e 0BD1     		bne	.L220
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3672              		.loc 1 2988 3 discriminator 4
 3673 0040 FB69     		ldr	r3, [r7, #28]
 3674 0042 0833     		adds	r3, r3, #8
 3675 0044 1B68     		ldr	r3, [r3]
 3676 0046 BA69     		ldr	r2, [r7, #24]
 3677 0048 9A42     		cmp	r2, r3
 3678 004a 05D1     		bne	.L220
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3679              		.loc 1 2988 3 discriminator 6
 3680 004c FB69     		ldr	r3, [r7, #28]
 3681 004e 0C33     		adds	r3, r3, #12
 3682 0050 1B68     		ldr	r3, [r3]
 3683 0052 BA69     		ldr	r2, [r7, #24]
 3684 0054 9A42     		cmp	r2, r3
 3685 0056 08D0     		beq	.L221
 3686              	.L220:
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3687              		.loc 1 2988 3 discriminator 7
 3688 0058 2A4B     		ldr	r3, .L227+8
 3689 005a 1A68     		ldr	r2, [r3]
 3690 005c 294B     		ldr	r3, .L227+8
 3691 005e 1B68     		ldr	r3, [r3]
 3692 0060 3433     		adds	r3, r3, #52
 3693 0062 1946     		mov	r1, r3
 3694 0064 1046     		mov	r0, r2
 3695 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3696              	.L221:
 3697              	.LBE165:
 3698              	.LBB166:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3699              		.loc 1 2999 3 is_stmt 1
 3700 006a 274B     		ldr	r3, .L227+12
 3701 006c 1B68     		ldr	r3, [r3]
 3702 006e FB60     		str	r3, [r7, #12]
 3703              	.LBB167:
 3704              	.LBB168:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 3705              		.loc 2 134 3
 3706 0070 FB68     		ldr	r3, [r7, #12]
 3707              		.syntax unified
 3708              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3709 0072 B3FA83F3 		clz r3, r3
 3710              	@ 0 "" 2
 3711              		.thumb
 3712              		.syntax unified
 3713 0076 FB72     		strb	r3, [r7, #11]
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 3714              		.loc 2 135 10
 3715 0078 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3716              	.LBE168:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 123


 3717              	.LBE167:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3718              		.loc 1 2999 3
 3719 007a C3F11F03 		rsb	r3, r3, #31
 3720 007e 7B61     		str	r3, [r7, #20]
 3721 0080 2249     		ldr	r1, .L227+16
 3722 0082 7A69     		ldr	r2, [r7, #20]
 3723 0084 1346     		mov	r3, r2
 3724 0086 9B00     		lsls	r3, r3, #2
 3725 0088 1344     		add	r3, r3, r2
 3726 008a 9B00     		lsls	r3, r3, #2
 3727 008c 0B44     		add	r3, r3, r1
 3728 008e 1B68     		ldr	r3, [r3]
 3729 0090 002B     		cmp	r3, #0
 3730 0092 0CD1     		bne	.L223
 3731              	.LBB169:
 3732              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3733              		.loc 2 195 2
 3734              		.syntax unified
 3735              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3736 0094 4FF05003 			mov r3, #80												
 3737 0098 72B6     		cpsid i													
 3738 009a 83F31188 		msr basepri, r3											
 3739 009e BFF36F8F 		isb														
 3740 00a2 BFF34F8F 		dsb														
 3741 00a6 62B6     		cpsie i													
 3742              	
 3743              	@ 0 "" 2
 3744              		.thumb
 3745              		.syntax unified
 3746 00a8 7B60     		str	r3, [r7, #4]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3747              		.loc 2 205 1
 3748 00aa 00BF     		nop
 3749              	.L224:
 3750              	.LBE170:
 3751              	.LBE169:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3752              		.loc 1 2999 3 discriminator 1
 3753 00ac FEE7     		b	.L224
 3754              	.L223:
 3755              	.LBB171:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3756              		.loc 1 2999 3 is_stmt 0 discriminator 2
 3757 00ae 7A69     		ldr	r2, [r7, #20]
 3758 00b0 1346     		mov	r3, r2
 3759 00b2 9B00     		lsls	r3, r3, #2
 3760 00b4 1344     		add	r3, r3, r2
 3761 00b6 9B00     		lsls	r3, r3, #2
 3762 00b8 144A     		ldr	r2, .L227+16
 3763 00ba 1344     		add	r3, r3, r2
 3764 00bc 3B61     		str	r3, [r7, #16]
 3765 00be 3B69     		ldr	r3, [r7, #16]
 3766 00c0 5B68     		ldr	r3, [r3, #4]
 3767 00c2 5A68     		ldr	r2, [r3, #4]
 3768 00c4 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 124


 3769 00c6 5A60     		str	r2, [r3, #4]
 3770 00c8 3B69     		ldr	r3, [r7, #16]
 3771 00ca 5A68     		ldr	r2, [r3, #4]
 3772 00cc 3B69     		ldr	r3, [r7, #16]
 3773 00ce 0833     		adds	r3, r3, #8
 3774 00d0 9A42     		cmp	r2, r3
 3775 00d2 04D1     		bne	.L225
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3776              		.loc 1 2999 3 discriminator 3
 3777 00d4 3B69     		ldr	r3, [r7, #16]
 3778 00d6 5B68     		ldr	r3, [r3, #4]
 3779 00d8 5A68     		ldr	r2, [r3, #4]
 3780 00da 3B69     		ldr	r3, [r7, #16]
 3781 00dc 5A60     		str	r2, [r3, #4]
 3782              	.L225:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3783              		.loc 1 2999 3 discriminator 5
 3784 00de 3B69     		ldr	r3, [r7, #16]
 3785 00e0 5B68     		ldr	r3, [r3, #4]
 3786 00e2 DB68     		ldr	r3, [r3, #12]
 3787 00e4 074A     		ldr	r2, .L227+8
 3788 00e6 1360     		str	r3, [r2]
 3789              	.LBE171:
 3790              	.LBE166:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3791              		.loc 1 3013 33 is_stmt 1 discriminator 5
 3792 00e8 064B     		ldr	r3, .L227+8
 3793 00ea 1B68     		ldr	r3, [r3]
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3794              		.loc 1 3013 18 discriminator 5
 3795 00ec 5033     		adds	r3, r3, #80
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3796              		.loc 1 3013 16 discriminator 5
 3797 00ee 084A     		ldr	r2, .L227+20
 3798 00f0 1360     		str	r3, [r2]
 3799              	.L226:
 3800              		.loc 1 3017 1
 3801 00f2 00BF     		nop
 3802 00f4 2037     		adds	r7, r7, #32
 3803              	.LCFI135:
 3804              		.cfi_def_cfa_offset 8
 3805 00f6 BD46     		mov	sp, r7
 3806              	.LCFI136:
 3807              		.cfi_def_cfa_register 13
 3808              		@ sp needed
 3809 00f8 80BD     		pop	{r7, pc}
 3810              	.L228:
 3811 00fa 00BF     		.align	2
 3812              	.L227:
 3813 00fc 00000000 		.word	uxSchedulerSuspended
 3814 0100 00000000 		.word	xYieldPending
 3815 0104 00000000 		.word	pxCurrentTCB
 3816 0108 00000000 		.word	uxTopReadyPriority
 3817 010c 00000000 		.word	pxReadyTasksLists
 3818 0110 00000000 		.word	_impure_ptr
 3819              		.cfi_endproc
 3820              	.LFE31:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 125


 3822              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3823              		.align	1
 3824              		.global	vTaskPlaceOnEventList
 3825              		.syntax unified
 3826              		.thumb
 3827              		.thumb_func
 3829              	vTaskPlaceOnEventList:
 3830              	.LFB32:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3831              		.loc 1 3021 1
 3832              		.cfi_startproc
 3833              		@ args = 0, pretend = 0, frame = 16
 3834              		@ frame_needed = 1, uses_anonymous_args = 0
 3835 0000 80B5     		push	{r7, lr}
 3836              	.LCFI137:
 3837              		.cfi_def_cfa_offset 8
 3838              		.cfi_offset 7, -8
 3839              		.cfi_offset 14, -4
 3840 0002 84B0     		sub	sp, sp, #16
 3841              	.LCFI138:
 3842              		.cfi_def_cfa_offset 24
 3843 0004 00AF     		add	r7, sp, #0
 3844              	.LCFI139:
 3845              		.cfi_def_cfa_register 7
 3846 0006 7860     		str	r0, [r7, #4]
 3847 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3848              		.loc 1 3022 2
 3849 000a 7B68     		ldr	r3, [r7, #4]
 3850 000c 002B     		cmp	r3, #0
 3851 000e 0CD1     		bne	.L230
 3852              	.LBB172:
 3853              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3854              		.loc 2 195 2
 3855              		.syntax unified
 3856              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3857 0010 4FF05003 			mov r3, #80												
 3858 0014 72B6     		cpsid i													
 3859 0016 83F31188 		msr basepri, r3											
 3860 001a BFF36F8F 		isb														
 3861 001e BFF34F8F 		dsb														
 3862 0022 62B6     		cpsie i													
 3863              	
 3864              	@ 0 "" 2
 3865              		.thumb
 3866              		.syntax unified
 3867 0024 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3868              		.loc 2 205 1
 3869 0026 00BF     		nop
 3870              	.L231:
 3871              	.LBE173:
 3872              	.LBE172:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 126


 3873              		.loc 1 3022 2 discriminator 1
 3874 0028 FEE7     		b	.L231
 3875              	.L230:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3876              		.loc 1 3031 43
 3877 002a 074B     		ldr	r3, .L232
 3878 002c 1B68     		ldr	r3, [r3]
 3879              		.loc 1 3031 2
 3880 002e 1833     		adds	r3, r3, #24
 3881 0030 1946     		mov	r1, r3
 3882 0032 7868     		ldr	r0, [r7, #4]
 3883 0034 FFF7FEFF 		bl	vListInsert
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3884              		.loc 1 3033 2
 3885 0038 0121     		movs	r1, #1
 3886 003a 3868     		ldr	r0, [r7]
 3887 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3888              		.loc 1 3034 1
 3889 0040 00BF     		nop
 3890 0042 1037     		adds	r7, r7, #16
 3891              	.LCFI140:
 3892              		.cfi_def_cfa_offset 8
 3893 0044 BD46     		mov	sp, r7
 3894              	.LCFI141:
 3895              		.cfi_def_cfa_register 13
 3896              		@ sp needed
 3897 0046 80BD     		pop	{r7, pc}
 3898              	.L233:
 3899              		.align	2
 3900              	.L232:
 3901 0048 00000000 		.word	pxCurrentTCB
 3902              		.cfi_endproc
 3903              	.LFE32:
 3905              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3906              		.align	1
 3907              		.global	vTaskPlaceOnUnorderedEventList
 3908              		.syntax unified
 3909              		.thumb
 3910              		.thumb_func
 3912              	vTaskPlaceOnUnorderedEventList:
 3913              	.LFB33:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3914              		.loc 1 3038 1
 3915              		.cfi_startproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 127


 3916              		@ args = 0, pretend = 0, frame = 24
 3917              		@ frame_needed = 1, uses_anonymous_args = 0
 3918 0000 80B5     		push	{r7, lr}
 3919              	.LCFI142:
 3920              		.cfi_def_cfa_offset 8
 3921              		.cfi_offset 7, -8
 3922              		.cfi_offset 14, -4
 3923 0002 86B0     		sub	sp, sp, #24
 3924              	.LCFI143:
 3925              		.cfi_def_cfa_offset 32
 3926 0004 00AF     		add	r7, sp, #0
 3927              	.LCFI144:
 3928              		.cfi_def_cfa_register 7
 3929 0006 F860     		str	r0, [r7, #12]
 3930 0008 B960     		str	r1, [r7, #8]
 3931 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3932              		.loc 1 3039 2
 3933 000c FB68     		ldr	r3, [r7, #12]
 3934 000e 002B     		cmp	r3, #0
 3935 0010 0CD1     		bne	.L235
 3936              	.LBB174:
 3937              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3938              		.loc 2 195 2
 3939              		.syntax unified
 3940              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3941 0012 4FF05003 			mov r3, #80												
 3942 0016 72B6     		cpsid i													
 3943 0018 83F31188 		msr basepri, r3											
 3944 001c BFF36F8F 		isb														
 3945 0020 BFF34F8F 		dsb														
 3946 0024 62B6     		cpsie i													
 3947              	
 3948              	@ 0 "" 2
 3949              		.thumb
 3950              		.syntax unified
 3951 0026 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3952              		.loc 2 205 1
 3953 0028 00BF     		nop
 3954              	.L236:
 3955              	.LBE175:
 3956              	.LBE174:
 3957              		.loc 1 3039 2 discriminator 1
 3958 002a FEE7     		b	.L236
 3959              	.L235:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3960              		.loc 1 3043 2
 3961 002c 124B     		ldr	r3, .L239
 3962 002e 1B68     		ldr	r3, [r3]
 3963 0030 002B     		cmp	r3, #0
 3964 0032 0CD1     		bne	.L237
 3965              	.LBB176:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 128


 3966              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3967              		.loc 2 195 2
 3968              		.syntax unified
 3969              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3970 0034 4FF05003 			mov r3, #80												
 3971 0038 72B6     		cpsid i													
 3972 003a 83F31188 		msr basepri, r3											
 3973 003e BFF36F8F 		isb														
 3974 0042 BFF34F8F 		dsb														
 3975 0046 62B6     		cpsie i													
 3976              	
 3977              	@ 0 "" 2
 3978              		.thumb
 3979              		.syntax unified
 3980 0048 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3981              		.loc 2 205 1
 3982 004a 00BF     		nop
 3983              	.L238:
 3984              	.LBE177:
 3985              	.LBE176:
 3986              		.loc 1 3043 2 discriminator 2
 3987 004c FEE7     		b	.L238
 3988              	.L237:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3989              		.loc 1 3048 2
 3990 004e 0B4B     		ldr	r3, .L239+4
 3991 0050 1B68     		ldr	r3, [r3]
 3992 0052 BA68     		ldr	r2, [r7, #8]
 3993 0054 42F00042 		orr	r2, r2, #-2147483648
 3994 0058 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3995              		.loc 1 3055 46
 3996 005a 084B     		ldr	r3, .L239+4
 3997 005c 1B68     		ldr	r3, [r3]
 3998              		.loc 1 3055 2
 3999 005e 1833     		adds	r3, r3, #24
 4000 0060 1946     		mov	r1, r3
 4001 0062 F868     		ldr	r0, [r7, #12]
 4002 0064 FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4003              		.loc 1 3057 2
 4004 0068 0121     		movs	r1, #1
 4005 006a 7868     		ldr	r0, [r7, #4]
 4006 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 129


3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4007              		.loc 1 3058 1
 4008 0070 00BF     		nop
 4009 0072 1837     		adds	r7, r7, #24
 4010              	.LCFI145:
 4011              		.cfi_def_cfa_offset 8
 4012 0074 BD46     		mov	sp, r7
 4013              	.LCFI146:
 4014              		.cfi_def_cfa_register 13
 4015              		@ sp needed
 4016 0076 80BD     		pop	{r7, pc}
 4017              	.L240:
 4018              		.align	2
 4019              	.L239:
 4020 0078 00000000 		.word	uxSchedulerSuspended
 4021 007c 00000000 		.word	pxCurrentTCB
 4022              		.cfi_endproc
 4023              	.LFE33:
 4025              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4026              		.align	1
 4027              		.global	xTaskRemoveFromEventList
 4028              		.syntax unified
 4029              		.thumb
 4030              		.thumb_func
 4032              	xTaskRemoveFromEventList:
 4033              	.LFB34:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 130


3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4034              		.loc 1 3095 1
 4035              		.cfi_startproc
 4036              		@ args = 0, pretend = 0, frame = 24
 4037              		@ frame_needed = 1, uses_anonymous_args = 0
 4038 0000 80B5     		push	{r7, lr}
 4039              	.LCFI147:
 4040              		.cfi_def_cfa_offset 8
 4041              		.cfi_offset 7, -8
 4042              		.cfi_offset 14, -4
 4043 0002 86B0     		sub	sp, sp, #24
 4044              	.LCFI148:
 4045              		.cfi_def_cfa_offset 32
 4046 0004 00AF     		add	r7, sp, #0
 4047              	.LCFI149:
 4048              		.cfi_def_cfa_register 7
 4049 0006 7860     		str	r0, [r7, #4]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4050              		.loc 1 3112 19
 4051 0008 7B68     		ldr	r3, [r7, #4]
 4052 000a DB68     		ldr	r3, [r3, #12]
 4053              		.loc 1 3112 17
 4054 000c DB68     		ldr	r3, [r3, #12]
 4055 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4056              		.loc 1 3113 2
 4057 0010 3B69     		ldr	r3, [r7, #16]
 4058 0012 002B     		cmp	r3, #0
 4059 0014 0CD1     		bne	.L242
 4060              	.LBB178:
 4061              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4062              		.loc 2 195 2
 4063              		.syntax unified
 4064              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4065 0016 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 131


 4066 001a 72B6     		cpsid i													
 4067 001c 83F31188 		msr basepri, r3											
 4068 0020 BFF36F8F 		isb														
 4069 0024 BFF34F8F 		dsb														
 4070 0028 62B6     		cpsie i													
 4071              	
 4072              	@ 0 "" 2
 4073              		.thumb
 4074              		.syntax unified
 4075 002a FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4076              		.loc 2 205 1
 4077 002c 00BF     		nop
 4078              	.L243:
 4079              	.LBE179:
 4080              	.LBE178:
 4081              		.loc 1 3113 2 discriminator 1
 4082 002e FEE7     		b	.L243
 4083              	.L242:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4084              		.loc 1 3114 11
 4085 0030 3B69     		ldr	r3, [r7, #16]
 4086 0032 1833     		adds	r3, r3, #24
 4087 0034 1846     		mov	r0, r3
 4088 0036 FFF7FEFF 		bl	uxListRemove
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4089              		.loc 1 3116 27
 4090 003a 1D4B     		ldr	r3, .L249
 4091 003c 1B68     		ldr	r3, [r3]
 4092              		.loc 1 3116 4
 4093 003e 002B     		cmp	r3, #0
 4094 0040 1CD1     		bne	.L244
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4095              		.loc 1 3118 12
 4096 0042 3B69     		ldr	r3, [r7, #16]
 4097 0044 0433     		adds	r3, r3, #4
 4098 0046 1846     		mov	r0, r3
 4099 0048 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4100              		.loc 1 3119 3
 4101 004c 3B69     		ldr	r3, [r7, #16]
 4102 004e DB6A     		ldr	r3, [r3, #44]
 4103 0050 0122     		movs	r2, #1
 4104 0052 9A40     		lsls	r2, r2, r3
 4105 0054 174B     		ldr	r3, .L249+4
 4106 0056 1B68     		ldr	r3, [r3]
 4107 0058 1343     		orrs	r3, r3, r2
 4108 005a 164A     		ldr	r2, .L249+4
 4109 005c 1360     		str	r3, [r2]
 4110 005e 3B69     		ldr	r3, [r7, #16]
 4111 0060 DA6A     		ldr	r2, [r3, #44]
 4112 0062 1346     		mov	r3, r2
 4113 0064 9B00     		lsls	r3, r3, #2
 4114 0066 1344     		add	r3, r3, r2
 4115 0068 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 132


 4116 006a 134A     		ldr	r2, .L249+8
 4117 006c 1A44     		add	r2, r2, r3
 4118 006e 3B69     		ldr	r3, [r7, #16]
 4119 0070 0433     		adds	r3, r3, #4
 4120 0072 1946     		mov	r1, r3
 4121 0074 1046     		mov	r0, r2
 4122 0076 FFF7FEFF 		bl	vListInsertEnd
 4123 007a 05E0     		b	.L245
 4124              	.L244:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4125              		.loc 1 3139 3
 4126 007c 3B69     		ldr	r3, [r7, #16]
 4127 007e 1833     		adds	r3, r3, #24
 4128 0080 1946     		mov	r1, r3
 4129 0082 0E48     		ldr	r0, .L249+12
 4130 0084 FFF7FEFF 		bl	vListInsertEnd
 4131              	.L245:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4132              		.loc 1 3142 20
 4133 0088 3B69     		ldr	r3, [r7, #16]
 4134 008a DA6A     		ldr	r2, [r3, #44]
 4135              		.loc 1 3142 47
 4136 008c 0C4B     		ldr	r3, .L249+16
 4137 008e 1B68     		ldr	r3, [r3]
 4138 0090 DB6A     		ldr	r3, [r3, #44]
 4139              		.loc 1 3142 4
 4140 0092 9A42     		cmp	r2, r3
 4141 0094 05D9     		bls	.L246
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4142              		.loc 1 3147 11
 4143 0096 0123     		movs	r3, #1
 4144 0098 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 133


3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4145              		.loc 1 3151 17
 4146 009a 0A4B     		ldr	r3, .L249+20
 4147 009c 0122     		movs	r2, #1
 4148 009e 1A60     		str	r2, [r3]
 4149 00a0 01E0     		b	.L247
 4150              	.L246:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4151              		.loc 1 3155 11
 4152 00a2 0023     		movs	r3, #0
 4153 00a4 7B61     		str	r3, [r7, #20]
 4154              	.L247:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4155              		.loc 1 3158 9
 4156 00a6 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4157              		.loc 1 3159 1
 4158 00a8 1846     		mov	r0, r3
 4159 00aa 1837     		adds	r7, r7, #24
 4160              	.LCFI150:
 4161              		.cfi_def_cfa_offset 8
 4162 00ac BD46     		mov	sp, r7
 4163              	.LCFI151:
 4164              		.cfi_def_cfa_register 13
 4165              		@ sp needed
 4166 00ae 80BD     		pop	{r7, pc}
 4167              	.L250:
 4168              		.align	2
 4169              	.L249:
 4170 00b0 00000000 		.word	uxSchedulerSuspended
 4171 00b4 00000000 		.word	uxTopReadyPriority
 4172 00b8 00000000 		.word	pxReadyTasksLists
 4173 00bc 00000000 		.word	xPendingReadyList
 4174 00c0 00000000 		.word	pxCurrentTCB
 4175 00c4 00000000 		.word	xYieldPending
 4176              		.cfi_endproc
 4177              	.LFE34:
 4179              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4180              		.align	1
 4181              		.global	vTaskRemoveFromUnorderedEventList
 4182              		.syntax unified
 4183              		.thumb
 4184              		.thumb_func
 4186              	vTaskRemoveFromUnorderedEventList:
 4187              	.LFB35:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 134


 4188              		.loc 1 3163 1
 4189              		.cfi_startproc
 4190              		@ args = 0, pretend = 0, frame = 24
 4191              		@ frame_needed = 1, uses_anonymous_args = 0
 4192 0000 80B5     		push	{r7, lr}
 4193              	.LCFI152:
 4194              		.cfi_def_cfa_offset 8
 4195              		.cfi_offset 7, -8
 4196              		.cfi_offset 14, -4
 4197 0002 86B0     		sub	sp, sp, #24
 4198              	.LCFI153:
 4199              		.cfi_def_cfa_offset 32
 4200 0004 00AF     		add	r7, sp, #0
 4201              	.LCFI154:
 4202              		.cfi_def_cfa_register 7
 4203 0006 7860     		str	r0, [r7, #4]
 4204 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4205              		.loc 1 3168 2
 4206 000a 2B4B     		ldr	r3, .L258
 4207 000c 1B68     		ldr	r3, [r3]
 4208 000e 002B     		cmp	r3, #0
 4209 0010 0CD1     		bne	.L252
 4210              	.LBB180:
 4211              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4212              		.loc 2 195 2
 4213              		.syntax unified
 4214              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4215 0012 4FF05003 			mov r3, #80												
 4216 0016 72B6     		cpsid i													
 4217 0018 83F31188 		msr basepri, r3											
 4218 001c BFF36F8F 		isb														
 4219 0020 BFF34F8F 		dsb														
 4220 0024 62B6     		cpsie i													
 4221              	
 4222              	@ 0 "" 2
 4223              		.thumb
 4224              		.syntax unified
 4225 0026 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4226              		.loc 2 205 1
 4227 0028 00BF     		nop
 4228              	.L253:
 4229              	.LBE181:
 4230              	.LBE180:
 4231              		.loc 1 3168 2 discriminator 1
 4232 002a FEE7     		b	.L253
 4233              	.L252:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4234              		.loc 1 3171 2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 135


 4235 002c 3B68     		ldr	r3, [r7]
 4236 002e 43F00042 		orr	r2, r3, #-2147483648
 4237 0032 7B68     		ldr	r3, [r7, #4]
 4238 0034 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4239              		.loc 1 3175 17
 4240 0036 7B68     		ldr	r3, [r7, #4]
 4241 0038 DB68     		ldr	r3, [r3, #12]
 4242 003a 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4243              		.loc 1 3176 2
 4244 003c 7B69     		ldr	r3, [r7, #20]
 4245 003e 002B     		cmp	r3, #0
 4246 0040 0CD1     		bne	.L254
 4247              	.LBB182:
 4248              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4249              		.loc 2 195 2
 4250              		.syntax unified
 4251              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4252 0042 4FF05003 			mov r3, #80												
 4253 0046 72B6     		cpsid i													
 4254 0048 83F31188 		msr basepri, r3											
 4255 004c BFF36F8F 		isb														
 4256 0050 BFF34F8F 		dsb														
 4257 0054 62B6     		cpsie i													
 4258              	
 4259              	@ 0 "" 2
 4260              		.thumb
 4261              		.syntax unified
 4262 0056 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4263              		.loc 2 205 1
 4264 0058 00BF     		nop
 4265              	.L255:
 4266              	.LBE183:
 4267              	.LBE182:
 4268              		.loc 1 3176 2 discriminator 2
 4269 005a FEE7     		b	.L255
 4270              	.L254:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4271              		.loc 1 3177 11
 4272 005c 7868     		ldr	r0, [r7, #4]
 4273 005e FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4274              		.loc 1 3182 11
 4275 0062 7B69     		ldr	r3, [r7, #20]
 4276 0064 0433     		adds	r3, r3, #4
 4277 0066 1846     		mov	r0, r3
 4278 0068 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 136


3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4279              		.loc 1 3183 2
 4280 006c 7B69     		ldr	r3, [r7, #20]
 4281 006e DB6A     		ldr	r3, [r3, #44]
 4282 0070 0122     		movs	r2, #1
 4283 0072 9A40     		lsls	r2, r2, r3
 4284 0074 114B     		ldr	r3, .L258+4
 4285 0076 1B68     		ldr	r3, [r3]
 4286 0078 1343     		orrs	r3, r3, r2
 4287 007a 104A     		ldr	r2, .L258+4
 4288 007c 1360     		str	r3, [r2]
 4289 007e 7B69     		ldr	r3, [r7, #20]
 4290 0080 DA6A     		ldr	r2, [r3, #44]
 4291 0082 1346     		mov	r3, r2
 4292 0084 9B00     		lsls	r3, r3, #2
 4293 0086 1344     		add	r3, r3, r2
 4294 0088 9B00     		lsls	r3, r3, #2
 4295 008a 0D4A     		ldr	r2, .L258+8
 4296 008c 1A44     		add	r2, r2, r3
 4297 008e 7B69     		ldr	r3, [r7, #20]
 4298 0090 0433     		adds	r3, r3, #4
 4299 0092 1946     		mov	r1, r3
 4300 0094 1046     		mov	r0, r2
 4301 0096 FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4302              		.loc 1 3185 20
 4303 009a 7B69     		ldr	r3, [r7, #20]
 4304 009c DA6A     		ldr	r2, [r3, #44]
 4305              		.loc 1 3185 47
 4306 009e 094B     		ldr	r3, .L258+12
 4307 00a0 1B68     		ldr	r3, [r3]
 4308 00a2 DB6A     		ldr	r3, [r3, #44]
 4309              		.loc 1 3185 4
 4310 00a4 9A42     		cmp	r2, r3
 4311 00a6 02D9     		bls	.L257
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4312              		.loc 1 3191 17
 4313 00a8 074B     		ldr	r3, .L258+16
 4314 00aa 0122     		movs	r2, #1
 4315 00ac 1A60     		str	r2, [r3]
 4316              	.L257:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4317              		.loc 1 3193 1
 4318 00ae 00BF     		nop
 4319 00b0 1837     		adds	r7, r7, #24
 4320              	.LCFI155:
 4321              		.cfi_def_cfa_offset 8
 4322 00b2 BD46     		mov	sp, r7
 4323              	.LCFI156:
 4324              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 137


 4325              		@ sp needed
 4326 00b4 80BD     		pop	{r7, pc}
 4327              	.L259:
 4328 00b6 00BF     		.align	2
 4329              	.L258:
 4330 00b8 00000000 		.word	uxSchedulerSuspended
 4331 00bc 00000000 		.word	uxTopReadyPriority
 4332 00c0 00000000 		.word	pxReadyTasksLists
 4333 00c4 00000000 		.word	pxCurrentTCB
 4334 00c8 00000000 		.word	xYieldPending
 4335              		.cfi_endproc
 4336              	.LFE35:
 4338              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4339              		.align	1
 4340              		.global	vTaskSetTimeOutState
 4341              		.syntax unified
 4342              		.thumb
 4343              		.thumb_func
 4345              	vTaskSetTimeOutState:
 4346              	.LFB36:
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4347              		.loc 1 3197 1
 4348              		.cfi_startproc
 4349              		@ args = 0, pretend = 0, frame = 16
 4350              		@ frame_needed = 1, uses_anonymous_args = 0
 4351 0000 80B5     		push	{r7, lr}
 4352              	.LCFI157:
 4353              		.cfi_def_cfa_offset 8
 4354              		.cfi_offset 7, -8
 4355              		.cfi_offset 14, -4
 4356 0002 84B0     		sub	sp, sp, #16
 4357              	.LCFI158:
 4358              		.cfi_def_cfa_offset 24
 4359 0004 00AF     		add	r7, sp, #0
 4360              	.LCFI159:
 4361              		.cfi_def_cfa_register 7
 4362 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4363              		.loc 1 3198 2
 4364 0008 7B68     		ldr	r3, [r7, #4]
 4365 000a 002B     		cmp	r3, #0
 4366 000c 0CD1     		bne	.L261
 4367              	.LBB184:
 4368              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4369              		.loc 2 195 2
 4370              		.syntax unified
 4371              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4372 000e 4FF05003 			mov r3, #80												
 4373 0012 72B6     		cpsid i													
 4374 0014 83F31188 		msr basepri, r3											
 4375 0018 BFF36F8F 		isb														
 4376 001c BFF34F8F 		dsb														
 4377 0020 62B6     		cpsie i													
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 138


 4378              	
 4379              	@ 0 "" 2
 4380              		.thumb
 4381              		.syntax unified
 4382 0022 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4383              		.loc 2 205 1
 4384 0024 00BF     		nop
 4385              	.L262:
 4386              	.LBE185:
 4387              	.LBE184:
 4388              		.loc 1 3198 2 discriminator 1
 4389 0026 FEE7     		b	.L262
 4390              	.L261:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4391              		.loc 1 3199 2
 4392 0028 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4393              		.loc 1 3201 29
 4394 002c 064B     		ldr	r3, .L263
 4395 002e 1A68     		ldr	r2, [r3]
 4396 0030 7B68     		ldr	r3, [r7, #4]
 4397 0032 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4398              		.loc 1 3202 30
 4399 0034 054B     		ldr	r3, .L263+4
 4400 0036 1A68     		ldr	r2, [r3]
 4401 0038 7B68     		ldr	r3, [r7, #4]
 4402 003a 5A60     		str	r2, [r3, #4]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4403              		.loc 1 3204 2
 4404 003c FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4405              		.loc 1 3205 1
 4406 0040 00BF     		nop
 4407 0042 1037     		adds	r7, r7, #16
 4408              	.LCFI160:
 4409              		.cfi_def_cfa_offset 8
 4410 0044 BD46     		mov	sp, r7
 4411              	.LCFI161:
 4412              		.cfi_def_cfa_register 13
 4413              		@ sp needed
 4414 0046 80BD     		pop	{r7, pc}
 4415              	.L264:
 4416              		.align	2
 4417              	.L263:
 4418 0048 00000000 		.word	xNumOfOverflows
 4419 004c 00000000 		.word	xTickCount
 4420              		.cfi_endproc
 4421              	.LFE36:
 4423              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4424              		.align	1
 4425              		.global	vTaskInternalSetTimeOutState
 4426              		.syntax unified
 4427              		.thumb
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 139


 4428              		.thumb_func
 4430              	vTaskInternalSetTimeOutState:
 4431              	.LFB37:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4432              		.loc 1 3209 1
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 8
 4435              		@ frame_needed = 1, uses_anonymous_args = 0
 4436              		@ link register save eliminated.
 4437 0000 80B4     		push	{r7}
 4438              	.LCFI162:
 4439              		.cfi_def_cfa_offset 4
 4440              		.cfi_offset 7, -4
 4441 0002 83B0     		sub	sp, sp, #12
 4442              	.LCFI163:
 4443              		.cfi_def_cfa_offset 16
 4444 0004 00AF     		add	r7, sp, #0
 4445              	.LCFI164:
 4446              		.cfi_def_cfa_register 7
 4447 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4448              		.loc 1 3211 28
 4449 0008 064B     		ldr	r3, .L266
 4450 000a 1A68     		ldr	r2, [r3]
 4451 000c 7B68     		ldr	r3, [r7, #4]
 4452 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4453              		.loc 1 3212 29
 4454 0010 054B     		ldr	r3, .L266+4
 4455 0012 1A68     		ldr	r2, [r3]
 4456 0014 7B68     		ldr	r3, [r7, #4]
 4457 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4458              		.loc 1 3213 1
 4459 0018 00BF     		nop
 4460 001a 0C37     		adds	r7, r7, #12
 4461              	.LCFI165:
 4462              		.cfi_def_cfa_offset 4
 4463 001c BD46     		mov	sp, r7
 4464              	.LCFI166:
 4465              		.cfi_def_cfa_register 13
 4466              		@ sp needed
 4467 001e 5DF8047B 		ldr	r7, [sp], #4
 4468              	.LCFI167:
 4469              		.cfi_restore 7
 4470              		.cfi_def_cfa_offset 0
 4471 0022 7047     		bx	lr
 4472              	.L267:
 4473              		.align	2
 4474              	.L266:
 4475 0024 00000000 		.word	xNumOfOverflows
 4476 0028 00000000 		.word	xTickCount
 4477              		.cfi_endproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 140


 4478              	.LFE37:
 4480              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4481              		.align	1
 4482              		.global	xTaskCheckForTimeOut
 4483              		.syntax unified
 4484              		.thumb
 4485              		.thumb_func
 4487              	xTaskCheckForTimeOut:
 4488              	.LFB38:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4489              		.loc 1 3217 1
 4490              		.cfi_startproc
 4491              		@ args = 0, pretend = 0, frame = 32
 4492              		@ frame_needed = 1, uses_anonymous_args = 0
 4493 0000 80B5     		push	{r7, lr}
 4494              	.LCFI168:
 4495              		.cfi_def_cfa_offset 8
 4496              		.cfi_offset 7, -8
 4497              		.cfi_offset 14, -4
 4498 0002 88B0     		sub	sp, sp, #32
 4499              	.LCFI169:
 4500              		.cfi_def_cfa_offset 40
 4501 0004 00AF     		add	r7, sp, #0
 4502              	.LCFI170:
 4503              		.cfi_def_cfa_register 7
 4504 0006 7860     		str	r0, [r7, #4]
 4505 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4506              		.loc 1 3220 2
 4507 000a 7B68     		ldr	r3, [r7, #4]
 4508 000c 002B     		cmp	r3, #0
 4509 000e 0CD1     		bne	.L269
 4510              	.LBB186:
 4511              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4512              		.loc 2 195 2
 4513              		.syntax unified
 4514              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4515 0010 4FF05003 			mov r3, #80												
 4516 0014 72B6     		cpsid i													
 4517 0016 83F31188 		msr basepri, r3											
 4518 001a BFF36F8F 		isb														
 4519 001e BFF34F8F 		dsb														
 4520 0022 62B6     		cpsie i													
 4521              	
 4522              	@ 0 "" 2
 4523              		.thumb
 4524              		.syntax unified
 4525 0024 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4526              		.loc 2 205 1
 4527 0026 00BF     		nop
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 141


 4528              	.L270:
 4529              	.LBE187:
 4530              	.LBE186:
 4531              		.loc 1 3220 2 discriminator 1
 4532 0028 FEE7     		b	.L270
 4533              	.L269:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4534              		.loc 1 3221 2
 4535 002a 3B68     		ldr	r3, [r7]
 4536 002c 002B     		cmp	r3, #0
 4537 002e 0CD1     		bne	.L271
 4538              	.LBB188:
 4539              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4540              		.loc 2 195 2
 4541              		.syntax unified
 4542              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4543 0030 4FF05003 			mov r3, #80												
 4544 0034 72B6     		cpsid i													
 4545 0036 83F31188 		msr basepri, r3											
 4546 003a BFF36F8F 		isb														
 4547 003e BFF34F8F 		dsb														
 4548 0042 62B6     		cpsie i													
 4549              	
 4550              	@ 0 "" 2
 4551              		.thumb
 4552              		.syntax unified
 4553 0044 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4554              		.loc 2 205 1
 4555 0046 00BF     		nop
 4556              	.L272:
 4557              	.LBE189:
 4558              	.LBE188:
 4559              		.loc 1 3221 2 discriminator 2
 4560 0048 FEE7     		b	.L272
 4561              	.L271:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4562              		.loc 1 3223 2
 4563 004a FFF7FEFF 		bl	vPortEnterCritical
 4564              	.LBB190:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4565              		.loc 1 3226 20
 4566 004e 1D4B     		ldr	r3, .L278
 4567 0050 1B68     		ldr	r3, [r3]
 4568 0052 BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4569              		.loc 1 3227 62
 4570 0054 7B68     		ldr	r3, [r7, #4]
 4571 0056 5B68     		ldr	r3, [r3, #4]
 4572              		.loc 1 3227 20
 4573 0058 BA69     		ldr	r2, [r7, #24]
 4574 005a D31A     		subs	r3, r2, r3
 4575 005c 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 142


3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4576              		.loc 1 3241 8
 4577 005e 3B68     		ldr	r3, [r7]
 4578 0060 1B68     		ldr	r3, [r3]
 4579              		.loc 1 3241 6
 4580 0062 B3F1FF3F 		cmp	r3, #-1
 4581 0066 02D1     		bne	.L273
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4582              		.loc 1 3246 13
 4583 0068 0023     		movs	r3, #0
 4584 006a FB61     		str	r3, [r7, #28]
 4585 006c 23E0     		b	.L274
 4586              	.L273:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4587              		.loc 1 3251 37
 4588 006e 7B68     		ldr	r3, [r7, #4]
 4589 0070 1A68     		ldr	r2, [r3]
 4590              		.loc 1 3251 25
 4591 0072 154B     		ldr	r3, .L278+4
 4592 0074 1B68     		ldr	r3, [r3]
 4593              		.loc 1 3251 5
 4594 0076 9A42     		cmp	r2, r3
 4595 0078 07D0     		beq	.L275
 4596              		.loc 1 3251 89 discriminator 1
 4597 007a 7B68     		ldr	r3, [r7, #4]
 4598 007c 5B68     		ldr	r3, [r3, #4]
 4599              		.loc 1 3251 56 discriminator 1
 4600 007e BA69     		ldr	r2, [r7, #24]
 4601 0080 9A42     		cmp	r2, r3
 4602 0082 02D3     		bcc	.L275
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 143


3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4603              		.loc 1 3258 12
 4604 0084 0123     		movs	r3, #1
 4605 0086 FB61     		str	r3, [r7, #28]
 4606 0088 15E0     		b	.L274
 4607              	.L275:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4608              		.loc 1 3260 27
 4609 008a 3B68     		ldr	r3, [r7]
 4610 008c 1B68     		ldr	r3, [r3]
 4611              		.loc 1 3260 10
 4612 008e 7A69     		ldr	r2, [r7, #20]
 4613 0090 9A42     		cmp	r2, r3
 4614 0092 0BD2     		bcs	.L276
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4615              		.loc 1 3263 19
 4616 0094 3B68     		ldr	r3, [r7]
 4617 0096 1A68     		ldr	r2, [r3]
 4618 0098 7B69     		ldr	r3, [r7, #20]
 4619 009a D21A     		subs	r2, r2, r3
 4620 009c 3B68     		ldr	r3, [r7]
 4621 009e 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4622              		.loc 1 3264 4
 4623 00a0 7868     		ldr	r0, [r7, #4]
 4624 00a2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4625              		.loc 1 3265 12
 4626 00a6 0023     		movs	r3, #0
 4627 00a8 FB61     		str	r3, [r7, #28]
 4628 00aa 04E0     		b	.L274
 4629              	.L276:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4630              		.loc 1 3269 19
 4631 00ac 3B68     		ldr	r3, [r7]
 4632 00ae 0022     		movs	r2, #0
 4633 00b0 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4634              		.loc 1 3270 12
 4635 00b2 0123     		movs	r3, #1
 4636 00b4 FB61     		str	r3, [r7, #28]
 4637              	.L274:
 4638              	.LBE190:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4639              		.loc 1 3273 2
 4640 00b6 FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4641              		.loc 1 3275 9
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 144


 4642 00ba FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4643              		.loc 1 3276 1
 4644 00bc 1846     		mov	r0, r3
 4645 00be 2037     		adds	r7, r7, #32
 4646              	.LCFI171:
 4647              		.cfi_def_cfa_offset 8
 4648 00c0 BD46     		mov	sp, r7
 4649              	.LCFI172:
 4650              		.cfi_def_cfa_register 13
 4651              		@ sp needed
 4652 00c2 80BD     		pop	{r7, pc}
 4653              	.L279:
 4654              		.align	2
 4655              	.L278:
 4656 00c4 00000000 		.word	xTickCount
 4657 00c8 00000000 		.word	xNumOfOverflows
 4658              		.cfi_endproc
 4659              	.LFE38:
 4661              		.section	.text.vTaskMissedYield,"ax",%progbits
 4662              		.align	1
 4663              		.global	vTaskMissedYield
 4664              		.syntax unified
 4665              		.thumb
 4666              		.thumb_func
 4668              	vTaskMissedYield:
 4669              	.LFB39:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4670              		.loc 1 3280 1
 4671              		.cfi_startproc
 4672              		@ args = 0, pretend = 0, frame = 0
 4673              		@ frame_needed = 1, uses_anonymous_args = 0
 4674              		@ link register save eliminated.
 4675 0000 80B4     		push	{r7}
 4676              	.LCFI173:
 4677              		.cfi_def_cfa_offset 4
 4678              		.cfi_offset 7, -4
 4679 0002 00AF     		add	r7, sp, #0
 4680              	.LCFI174:
 4681              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4682              		.loc 1 3281 16
 4683 0004 034B     		ldr	r3, .L281
 4684 0006 0122     		movs	r2, #1
 4685 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4686              		.loc 1 3282 1
 4687 000a 00BF     		nop
 4688 000c BD46     		mov	sp, r7
 4689              	.LCFI175:
 4690              		.cfi_def_cfa_register 13
 4691              		@ sp needed
 4692 000e 5DF8047B 		ldr	r7, [sp], #4
 4693              	.LCFI176:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 145


 4694              		.cfi_restore 7
 4695              		.cfi_def_cfa_offset 0
 4696 0012 7047     		bx	lr
 4697              	.L282:
 4698              		.align	2
 4699              	.L281:
 4700 0014 00000000 		.word	xYieldPending
 4701              		.cfi_endproc
 4702              	.LFE39:
 4704              		.section	.text.prvIdleTask,"ax",%progbits
 4705              		.align	1
 4706              		.syntax unified
 4707              		.thumb
 4708              		.thumb_func
 4710              	prvIdleTask:
 4711              	.LFB40:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 146


3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4712              		.loc 1 3335 1
 4713              		.cfi_startproc
 4714              		@ args = 0, pretend = 0, frame = 8
 4715              		@ frame_needed = 1, uses_anonymous_args = 0
 4716 0000 80B5     		push	{r7, lr}
 4717              	.LCFI177:
 4718              		.cfi_def_cfa_offset 8
 4719              		.cfi_offset 7, -8
 4720              		.cfi_offset 14, -4
 4721 0002 82B0     		sub	sp, sp, #8
 4722              	.LCFI178:
 4723              		.cfi_def_cfa_offset 16
 4724 0004 00AF     		add	r7, sp, #0
 4725              	.LCFI179:
 4726              		.cfi_def_cfa_register 7
 4727 0006 7860     		str	r0, [r7, #4]
 4728              	.L285:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4729              		.loc 1 3351 3
 4730 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 147


3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4731              		.loc 1 3374 8
 4732 000c 074B     		ldr	r3, .L286
 4733 000e 1B68     		ldr	r3, [r3]
 4734              		.loc 1 3374 6
 4735 0010 012B     		cmp	r3, #1
 4736 0012 07D9     		bls	.L284
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4737              		.loc 1 3376 5
 4738 0014 064B     		ldr	r3, .L286+4
 4739 0016 4FF08052 		mov	r2, #268435456
 4740 001a 1A60     		str	r2, [r3]
 4741              		.syntax unified
 4742              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4743 001c BFF34F8F 		dsb
 4744              	@ 0 "" 2
 4745              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4746 0020 BFF36F8F 		isb
 4747              	@ 0 "" 2
 4748              		.thumb
 4749              		.syntax unified
 4750              	.L284:
 4751              	.LBB191:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
 4752              		.loc 1 3394 4
 4753 0024 FFF7FEFF 		bl	vApplicationIdleHook
 4754              	.LBE191:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 148


3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4755              		.loc 1 3351 3
 4756 0028 EEE7     		b	.L285
 4757              	.L287:
 4758 002a 00BF     		.align	2
 4759              	.L286:
 4760 002c 00000000 		.word	pxReadyTasksLists
 4761 0030 04ED00E0 		.word	-536810236
 4762              		.cfi_endproc
 4763              	.LFE40:
 4765              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4766              		.align	1
 4767              		.syntax unified
 4768              		.thumb
 4769              		.thumb_func
 4771              	prvInitialiseTaskLists:
 4772              	.LFB41:
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 149


3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 150


3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4773              		.loc 1 3547 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 151


 4774              		.cfi_startproc
 4775              		@ args = 0, pretend = 0, frame = 8
 4776              		@ frame_needed = 1, uses_anonymous_args = 0
 4777 0000 80B5     		push	{r7, lr}
 4778              	.LCFI180:
 4779              		.cfi_def_cfa_offset 8
 4780              		.cfi_offset 7, -8
 4781              		.cfi_offset 14, -4
 4782 0002 82B0     		sub	sp, sp, #8
 4783              	.LCFI181:
 4784              		.cfi_def_cfa_offset 16
 4785 0004 00AF     		add	r7, sp, #0
 4786              	.LCFI182:
 4787              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4788              		.loc 1 3550 18
 4789 0006 0023     		movs	r3, #0
 4790 0008 7B60     		str	r3, [r7, #4]
 4791              		.loc 1 3550 2
 4792 000a 0CE0     		b	.L289
 4793              	.L290:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4794              		.loc 1 3552 3 discriminator 3
 4795 000c 7A68     		ldr	r2, [r7, #4]
 4796 000e 1346     		mov	r3, r2
 4797 0010 9B00     		lsls	r3, r3, #2
 4798 0012 1344     		add	r3, r3, r2
 4799 0014 9B00     		lsls	r3, r3, #2
 4800 0016 124A     		ldr	r2, .L291
 4801 0018 1344     		add	r3, r3, r2
 4802 001a 1846     		mov	r0, r3
 4803 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4804              		.loc 1 3550 101 discriminator 3
 4805 0020 7B68     		ldr	r3, [r7, #4]
 4806 0022 0133     		adds	r3, r3, #1
 4807 0024 7B60     		str	r3, [r7, #4]
 4808              	.L289:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4809              		.loc 1 3550 2 discriminator 1
 4810 0026 7B68     		ldr	r3, [r7, #4]
 4811 0028 062B     		cmp	r3, #6
 4812 002a EFD9     		bls	.L290
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4813              		.loc 1 3555 2
 4814 002c 0D48     		ldr	r0, .L291+4
 4815 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4816              		.loc 1 3556 2
 4817 0032 0D48     		ldr	r0, .L291+8
 4818 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 152


 4819              		.loc 1 3557 2
 4820 0038 0C48     		ldr	r0, .L291+12
 4821 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4822              		.loc 1 3561 3
 4823 003e 0C48     		ldr	r0, .L291+16
 4824 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4825              		.loc 1 3567 3
 4826 0044 0B48     		ldr	r0, .L291+20
 4827 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4828              		.loc 1 3573 20
 4829 004a 0B4B     		ldr	r3, .L291+24
 4830 004c 054A     		ldr	r2, .L291+4
 4831 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4832              		.loc 1 3574 28
 4833 0050 0A4B     		ldr	r3, .L291+28
 4834 0052 054A     		ldr	r2, .L291+8
 4835 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4836              		.loc 1 3575 1
 4837 0056 00BF     		nop
 4838 0058 0837     		adds	r7, r7, #8
 4839              	.LCFI183:
 4840              		.cfi_def_cfa_offset 8
 4841 005a BD46     		mov	sp, r7
 4842              	.LCFI184:
 4843              		.cfi_def_cfa_register 13
 4844              		@ sp needed
 4845 005c 80BD     		pop	{r7, pc}
 4846              	.L292:
 4847 005e 00BF     		.align	2
 4848              	.L291:
 4849 0060 00000000 		.word	pxReadyTasksLists
 4850 0064 00000000 		.word	xDelayedTaskList1
 4851 0068 00000000 		.word	xDelayedTaskList2
 4852 006c 00000000 		.word	xPendingReadyList
 4853 0070 00000000 		.word	xTasksWaitingTermination
 4854 0074 00000000 		.word	xSuspendedTaskList
 4855 0078 00000000 		.word	pxDelayedTaskList
 4856 007c 00000000 		.word	pxOverflowDelayedTaskList
 4857              		.cfi_endproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 153


 4858              	.LFE41:
 4860              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4861              		.align	1
 4862              		.syntax unified
 4863              		.thumb
 4864              		.thumb_func
 4866              	prvCheckTasksWaitingTermination:
 4867              	.LFB42:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4868              		.loc 1 3579 1
 4869              		.cfi_startproc
 4870              		@ args = 0, pretend = 0, frame = 8
 4871              		@ frame_needed = 1, uses_anonymous_args = 0
 4872 0000 80B5     		push	{r7, lr}
 4873              	.LCFI185:
 4874              		.cfi_def_cfa_offset 8
 4875              		.cfi_offset 7, -8
 4876              		.cfi_offset 14, -4
 4877 0002 82B0     		sub	sp, sp, #8
 4878              	.LCFI186:
 4879              		.cfi_def_cfa_offset 16
 4880 0004 00AF     		add	r7, sp, #0
 4881              	.LCFI187:
 4882              		.cfi_def_cfa_register 7
 4883              	.LBB192:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4884              		.loc 1 3589 8
 4885 0006 19E0     		b	.L294
 4886              	.L295:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 4887              		.loc 1 3591 4
 4888 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 4889              		.loc 1 3593 13
 4890 000c 104B     		ldr	r3, .L296
 4891 000e DB68     		ldr	r3, [r3, #12]
 4892              		.loc 1 3593 11
 4893 0010 DB68     		ldr	r3, [r3, #12]
 4894 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4895              		.loc 1 3594 14
 4896 0014 7B68     		ldr	r3, [r7, #4]
 4897 0016 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 154


 4898 0018 1846     		mov	r0, r3
 4899 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 4900              		.loc 1 3595 5
 4901 001e 0D4B     		ldr	r3, .L296+4
 4902 0020 1B68     		ldr	r3, [r3]
 4903 0022 013B     		subs	r3, r3, #1
 4904 0024 0B4A     		ldr	r2, .L296+4
 4905 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 4906              		.loc 1 3596 5
 4907 0028 0B4B     		ldr	r3, .L296+8
 4908 002a 1B68     		ldr	r3, [r3]
 4909 002c 013B     		subs	r3, r3, #1
 4910 002e 0A4A     		ldr	r2, .L296+8
 4911 0030 1360     		str	r3, [r2]
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 4912              		.loc 1 3598 4
 4913 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 4914              		.loc 1 3600 4
 4915 0036 7868     		ldr	r0, [r7, #4]
 4916 0038 FFF7FEFF 		bl	prvDeleteTCB
 4917              	.L294:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4918              		.loc 1 3589 39
 4919 003c 064B     		ldr	r3, .L296+8
 4920 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4921              		.loc 1 3589 8
 4922 0040 002B     		cmp	r3, #0
 4923 0042 E1D1     		bne	.L295
 4924              	.LBE192:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4925              		.loc 1 3604 1
 4926 0044 00BF     		nop
 4927 0046 00BF     		nop
 4928 0048 0837     		adds	r7, r7, #8
 4929              	.LCFI188:
 4930              		.cfi_def_cfa_offset 8
 4931 004a BD46     		mov	sp, r7
 4932              	.LCFI189:
 4933              		.cfi_def_cfa_register 13
 4934              		@ sp needed
 4935 004c 80BD     		pop	{r7, pc}
 4936              	.L297:
 4937 004e 00BF     		.align	2
 4938              	.L296:
 4939 0050 00000000 		.word	xTasksWaitingTermination
 4940 0054 00000000 		.word	uxCurrentNumberOfTasks
 4941 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4942              		.cfi_endproc
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 155


 4943              	.LFE42:
 4945              		.section	.text.prvDeleteTCB,"ax",%progbits
 4946              		.align	1
 4947              		.syntax unified
 4948              		.thumb
 4949              		.thumb_func
 4951              	prvDeleteTCB:
 4952              	.LFB43:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 156


3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 157


3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 158


3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 159


3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4953              		.loc 1 3827 2
 4954              		.cfi_startproc
 4955              		@ args = 0, pretend = 0, frame = 16
 4956              		@ frame_needed = 1, uses_anonymous_args = 0
 4957 0000 80B5     		push	{r7, lr}
 4958              	.LCFI190:
 4959              		.cfi_def_cfa_offset 8
 4960              		.cfi_offset 7, -8
 4961              		.cfi_offset 14, -4
 4962 0002 84B0     		sub	sp, sp, #16
 4963              	.LCFI191:
 4964              		.cfi_def_cfa_offset 24
 4965 0004 00AF     		add	r7, sp, #0
 4966              	.LCFI192:
 4967              		.cfi_def_cfa_register 7
 4968 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 4969              		.loc 1 3837 4
 4970 0008 7B68     		ldr	r3, [r7, #4]
 4971 000a 5033     		adds	r3, r3, #80
 4972 000c 1846     		mov	r0, r3
 4973 000e FFF7FEFF 		bl	_reclaim_reent
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 4974              		.loc 1 3853 13
 4975 0012 7B68     		ldr	r3, [r7, #4]
 4976 0014 93F87D34 		ldrb	r3, [r3, #1149]	@ zero_extendqisi2
 4977              		.loc 1 3853 6
 4978 0018 002B     		cmp	r3, #0
 4979 001a 08D1     		bne	.L299
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 160


3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 4980              		.loc 1 3857 21
 4981 001c 7B68     		ldr	r3, [r7, #4]
 4982 001e 1B6B     		ldr	r3, [r3, #48]
 4983              		.loc 1 3857 5
 4984 0020 1846     		mov	r0, r3
 4985 0022 FFF7FEFF 		bl	vPortFree
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 4986              		.loc 1 3858 5
 4987 0026 7868     		ldr	r0, [r7, #4]
 4988 0028 FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4989              		.loc 1 3875 2
 4990 002c 1AE0     		b	.L303
 4991              	.L299:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4992              		.loc 1 3860 18
 4993 002e 7B68     		ldr	r3, [r7, #4]
 4994 0030 93F87D34 		ldrb	r3, [r3, #1149]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4995              		.loc 1 3860 11
 4996 0034 012B     		cmp	r3, #1
 4997 0036 03D1     		bne	.L301
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4998              		.loc 1 3864 5
 4999 0038 7868     		ldr	r0, [r7, #4]
 5000 003a FFF7FEFF 		bl	vPortFree
 5001              		.loc 1 3875 2
 5002 003e 11E0     		b	.L303
 5003              	.L301:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5004              		.loc 1 3870 5
 5005 0040 7B68     		ldr	r3, [r7, #4]
 5006 0042 93F87D34 		ldrb	r3, [r3, #1149]	@ zero_extendqisi2
 5007 0046 022B     		cmp	r3, #2
 5008 0048 0CD0     		beq	.L303
 5009              	.LBB193:
 5010              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 161


 5011              		.loc 2 195 2
 5012              		.syntax unified
 5013              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5014 004a 4FF05003 			mov r3, #80												
 5015 004e 72B6     		cpsid i													
 5016 0050 83F31188 		msr basepri, r3											
 5017 0054 BFF36F8F 		isb														
 5018 0058 BFF34F8F 		dsb														
 5019 005c 62B6     		cpsie i													
 5020              	
 5021              	@ 0 "" 2
 5022              		.thumb
 5023              		.syntax unified
 5024 005e FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5025              		.loc 2 205 1
 5026 0060 00BF     		nop
 5027              	.L302:
 5028              	.LBE194:
 5029              	.LBE193:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5030              		.loc 1 3870 5 discriminator 1
 5031 0062 FEE7     		b	.L302
 5032              	.L303:
 5033              		.loc 1 3875 2
 5034 0064 00BF     		nop
 5035 0066 1037     		adds	r7, r7, #16
 5036              	.LCFI193:
 5037              		.cfi_def_cfa_offset 8
 5038 0068 BD46     		mov	sp, r7
 5039              	.LCFI194:
 5040              		.cfi_def_cfa_register 13
 5041              		@ sp needed
 5042 006a 80BD     		pop	{r7, pc}
 5043              		.cfi_endproc
 5044              	.LFE43:
 5046              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5047              		.align	1
 5048              		.syntax unified
 5049              		.thumb
 5050              		.thumb_func
 5052              	prvResetNextTaskUnblockTime:
 5053              	.LFB44:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5054              		.loc 1 3881 1
 5055              		.cfi_startproc
 5056              		@ args = 0, pretend = 0, frame = 8
 5057              		@ frame_needed = 1, uses_anonymous_args = 0
 5058              		@ link register save eliminated.
 5059 0000 80B4     		push	{r7}
 5060              	.LCFI195:
 5061              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 162


 5062              		.cfi_offset 7, -4
 5063 0002 83B0     		sub	sp, sp, #12
 5064              	.LCFI196:
 5065              		.cfi_def_cfa_offset 16
 5066 0004 00AF     		add	r7, sp, #0
 5067              	.LCFI197:
 5068              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5069              		.loc 1 3884 6
 5070 0006 0C4B     		ldr	r3, .L308
 5071 0008 1B68     		ldr	r3, [r3]
 5072 000a 1B68     		ldr	r3, [r3]
 5073              		.loc 1 3884 4
 5074 000c 002B     		cmp	r3, #0
 5075 000e 04D1     		bne	.L305
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5076              		.loc 1 3890 24
 5077 0010 0A4B     		ldr	r3, .L308+4
 5078 0012 4FF0FF32 		mov	r2, #-1
 5079 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5080              		.loc 1 3901 1
 5081 0018 08E0     		b	.L307
 5082              	.L305:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5083              		.loc 1 3898 15
 5084 001a 074B     		ldr	r3, .L308
 5085 001c 1B68     		ldr	r3, [r3]
 5086 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5087              		.loc 1 3898 13
 5088 0020 DB68     		ldr	r3, [r3, #12]
 5089 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5090              		.loc 1 3899 26
 5091 0024 7B68     		ldr	r3, [r7, #4]
 5092 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5093              		.loc 1 3899 24
 5094 0028 044A     		ldr	r2, .L308+4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 163


 5095 002a 1360     		str	r3, [r2]
 5096              	.L307:
 5097              		.loc 1 3901 1
 5098 002c 00BF     		nop
 5099 002e 0C37     		adds	r7, r7, #12
 5100              	.LCFI198:
 5101              		.cfi_def_cfa_offset 4
 5102 0030 BD46     		mov	sp, r7
 5103              	.LCFI199:
 5104              		.cfi_def_cfa_register 13
 5105              		@ sp needed
 5106 0032 5DF8047B 		ldr	r7, [sp], #4
 5107              	.LCFI200:
 5108              		.cfi_restore 7
 5109              		.cfi_def_cfa_offset 0
 5110 0036 7047     		bx	lr
 5111              	.L309:
 5112              		.align	2
 5113              	.L308:
 5114 0038 00000000 		.word	pxDelayedTaskList
 5115 003c 00000000 		.word	xNextTaskUnblockTime
 5116              		.cfi_endproc
 5117              	.LFE44:
 5119              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5120              		.align	1
 5121              		.global	xTaskGetCurrentTaskHandle
 5122              		.syntax unified
 5123              		.thumb
 5124              		.thumb_func
 5126              	xTaskGetCurrentTaskHandle:
 5127              	.LFB45:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5128              		.loc 1 3907 2
 5129              		.cfi_startproc
 5130              		@ args = 0, pretend = 0, frame = 8
 5131              		@ frame_needed = 1, uses_anonymous_args = 0
 5132              		@ link register save eliminated.
 5133 0000 80B4     		push	{r7}
 5134              	.LCFI201:
 5135              		.cfi_def_cfa_offset 4
 5136              		.cfi_offset 7, -4
 5137 0002 83B0     		sub	sp, sp, #12
 5138              	.LCFI202:
 5139              		.cfi_def_cfa_offset 16
 5140 0004 00AF     		add	r7, sp, #0
 5141              	.LCFI203:
 5142              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 164


3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5143              		.loc 1 3913 11
 5144 0006 054B     		ldr	r3, .L312
 5145 0008 1B68     		ldr	r3, [r3]
 5146 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5147              		.loc 1 3915 10
 5148 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5149              		.loc 1 3916 2
 5150 000e 1846     		mov	r0, r3
 5151 0010 0C37     		adds	r7, r7, #12
 5152              	.LCFI204:
 5153              		.cfi_def_cfa_offset 4
 5154 0012 BD46     		mov	sp, r7
 5155              	.LCFI205:
 5156              		.cfi_def_cfa_register 13
 5157              		@ sp needed
 5158 0014 5DF8047B 		ldr	r7, [sp], #4
 5159              	.LCFI206:
 5160              		.cfi_restore 7
 5161              		.cfi_def_cfa_offset 0
 5162 0018 7047     		bx	lr
 5163              	.L313:
 5164 001a 00BF     		.align	2
 5165              	.L312:
 5166 001c 00000000 		.word	pxCurrentTCB
 5167              		.cfi_endproc
 5168              	.LFE45:
 5170              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5171              		.align	1
 5172              		.global	xTaskGetSchedulerState
 5173              		.syntax unified
 5174              		.thumb
 5175              		.thumb_func
 5177              	xTaskGetSchedulerState:
 5178              	.LFB46:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5179              		.loc 1 3924 2
 5180              		.cfi_startproc
 5181              		@ args = 0, pretend = 0, frame = 8
 5182              		@ frame_needed = 1, uses_anonymous_args = 0
 5183              		@ link register save eliminated.
 5184 0000 80B4     		push	{r7}
 5185              	.LCFI207:
 5186              		.cfi_def_cfa_offset 4
 5187              		.cfi_offset 7, -4
 5188 0002 83B0     		sub	sp, sp, #12
 5189              	.LCFI208:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 165


 5190              		.cfi_def_cfa_offset 16
 5191 0004 00AF     		add	r7, sp, #0
 5192              	.LCFI209:
 5193              		.cfi_def_cfa_register 7
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5194              		.loc 1 3927 25
 5195 0006 0B4B     		ldr	r3, .L319
 5196 0008 1B68     		ldr	r3, [r3]
 5197              		.loc 1 3927 5
 5198 000a 002B     		cmp	r3, #0
 5199 000c 02D1     		bne	.L315
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5200              		.loc 1 3929 12
 5201 000e 0123     		movs	r3, #1
 5202 0010 7B60     		str	r3, [r7, #4]
 5203 0012 08E0     		b	.L316
 5204              	.L315:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5205              		.loc 1 3933 29
 5206 0014 084B     		ldr	r3, .L319+4
 5207 0016 1B68     		ldr	r3, [r3]
 5208              		.loc 1 3933 6
 5209 0018 002B     		cmp	r3, #0
 5210 001a 02D1     		bne	.L317
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5211              		.loc 1 3935 13
 5212 001c 0223     		movs	r3, #2
 5213 001e 7B60     		str	r3, [r7, #4]
 5214 0020 01E0     		b	.L316
 5215              	.L317:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5216              		.loc 1 3939 13
 5217 0022 0023     		movs	r3, #0
 5218 0024 7B60     		str	r3, [r7, #4]
 5219              	.L316:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5220              		.loc 1 3943 10
 5221 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5222              		.loc 1 3944 2
 5223 0028 1846     		mov	r0, r3
 5224 002a 0C37     		adds	r7, r7, #12
 5225              	.LCFI210:
 5226              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 166


 5227 002c BD46     		mov	sp, r7
 5228              	.LCFI211:
 5229              		.cfi_def_cfa_register 13
 5230              		@ sp needed
 5231 002e 5DF8047B 		ldr	r7, [sp], #4
 5232              	.LCFI212:
 5233              		.cfi_restore 7
 5234              		.cfi_def_cfa_offset 0
 5235 0032 7047     		bx	lr
 5236              	.L320:
 5237              		.align	2
 5238              	.L319:
 5239 0034 00000000 		.word	xSchedulerRunning
 5240 0038 00000000 		.word	uxSchedulerSuspended
 5241              		.cfi_endproc
 5242              	.LFE46:
 5244              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5245              		.align	1
 5246              		.global	xTaskPriorityInherit
 5247              		.syntax unified
 5248              		.thumb
 5249              		.thumb_func
 5251              	xTaskPriorityInherit:
 5252              	.LFB47:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5253              		.loc 1 3952 2
 5254              		.cfi_startproc
 5255              		@ args = 0, pretend = 0, frame = 16
 5256              		@ frame_needed = 1, uses_anonymous_args = 0
 5257 0000 80B5     		push	{r7, lr}
 5258              	.LCFI213:
 5259              		.cfi_def_cfa_offset 8
 5260              		.cfi_offset 7, -8
 5261              		.cfi_offset 14, -4
 5262 0002 84B0     		sub	sp, sp, #16
 5263              	.LCFI214:
 5264              		.cfi_def_cfa_offset 24
 5265 0004 00AF     		add	r7, sp, #0
 5266              	.LCFI215:
 5267              		.cfi_def_cfa_register 7
 5268 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5269              		.loc 1 3953 16
 5270 0008 7B68     		ldr	r3, [r7, #4]
 5271 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5272              		.loc 1 3954 13
 5273 000c 0023     		movs	r3, #0
 5274 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 167


3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5275              		.loc 1 3959 5
 5276 0010 7B68     		ldr	r3, [r7, #4]
 5277 0012 002B     		cmp	r3, #0
 5278 0014 69D0     		beq	.L322
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 5279              		.loc 1 3964 24
 5280 0016 BB68     		ldr	r3, [r7, #8]
 5281 0018 DA6A     		ldr	r2, [r3, #44]
 5282              		.loc 1 3964 51
 5283 001a 364B     		ldr	r3, .L329
 5284 001c 1B68     		ldr	r3, [r3]
 5285 001e DB6A     		ldr	r3, [r3, #44]
 5286              		.loc 1 3964 6
 5287 0020 9A42     		cmp	r2, r3
 5288 0022 59D2     		bcs	.L323
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 5289              		.loc 1 3969 11
 5290 0024 BB68     		ldr	r3, [r7, #8]
 5291 0026 9B69     		ldr	r3, [r3, #24]
 5292              		.loc 1 3969 7
 5293 0028 002B     		cmp	r3, #0
 5294 002a 06DB     		blt	.L324
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 5295              		.loc 1 3971 6
 5296 002c 314B     		ldr	r3, .L329
 5297 002e 1B68     		ldr	r3, [r3]
 5298 0030 DB6A     		ldr	r3, [r3, #44]
 5299 0032 C3F10702 		rsb	r2, r3, #7
 5300 0036 BB68     		ldr	r3, [r7, #8]
 5301 0038 9A61     		str	r2, [r3, #24]
 5302              	.L324:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 5303              		.loc 1 3980 9
 5304 003a BB68     		ldr	r3, [r7, #8]
 5305 003c 5969     		ldr	r1, [r3, #20]
 5306 003e BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 168


 5307 0040 DA6A     		ldr	r2, [r3, #44]
 5308 0042 1346     		mov	r3, r2
 5309 0044 9B00     		lsls	r3, r3, #2
 5310 0046 1344     		add	r3, r3, r2
 5311 0048 9B00     		lsls	r3, r3, #2
 5312 004a 2B4A     		ldr	r2, .L329+4
 5313 004c 1344     		add	r3, r3, r2
 5314              		.loc 1 3980 7
 5315 004e 9942     		cmp	r1, r3
 5316 0050 3AD1     		bne	.L325
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5317              		.loc 1 3982 10
 5318 0052 BB68     		ldr	r3, [r7, #8]
 5319 0054 0433     		adds	r3, r3, #4
 5320 0056 1846     		mov	r0, r3
 5321 0058 FFF7FEFF 		bl	uxListRemove
 5322 005c 0346     		mov	r3, r0
 5323              		.loc 1 3982 8
 5324 005e 002B     		cmp	r3, #0
 5325 0060 15D1     		bne	.L326
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 5326              		.loc 1 3984 7
 5327 0062 BB68     		ldr	r3, [r7, #8]
 5328 0064 DA6A     		ldr	r2, [r3, #44]
 5329 0066 2449     		ldr	r1, .L329+4
 5330 0068 1346     		mov	r3, r2
 5331 006a 9B00     		lsls	r3, r3, #2
 5332 006c 1344     		add	r3, r3, r2
 5333 006e 9B00     		lsls	r3, r3, #2
 5334 0070 0B44     		add	r3, r3, r1
 5335 0072 1B68     		ldr	r3, [r3]
 5336 0074 002B     		cmp	r3, #0
 5337 0076 0AD1     		bne	.L326
 5338              		.loc 1 3984 7 is_stmt 0 discriminator 1
 5339 0078 BB68     		ldr	r3, [r7, #8]
 5340 007a DB6A     		ldr	r3, [r3, #44]
 5341 007c 0122     		movs	r2, #1
 5342 007e 02FA03F3 		lsl	r3, r2, r3
 5343 0082 DA43     		mvns	r2, r3
 5344 0084 1D4B     		ldr	r3, .L329+8
 5345 0086 1B68     		ldr	r3, [r3]
 5346 0088 1340     		ands	r3, r3, r2
 5347 008a 1C4A     		ldr	r2, .L329+8
 5348 008c 1360     		str	r3, [r2]
 5349              	.L326:
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5350              		.loc 1 3992 49 is_stmt 1
 5351 008e 194B     		ldr	r3, .L329
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 169


 5352 0090 1B68     		ldr	r3, [r3]
 5353 0092 DA6A     		ldr	r2, [r3, #44]
 5354              		.loc 1 3992 35
 5355 0094 BB68     		ldr	r3, [r7, #8]
 5356 0096 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5357              		.loc 1 3993 6
 5358 0098 BB68     		ldr	r3, [r7, #8]
 5359 009a DB6A     		ldr	r3, [r3, #44]
 5360 009c 0122     		movs	r2, #1
 5361 009e 9A40     		lsls	r2, r2, r3
 5362 00a0 164B     		ldr	r3, .L329+8
 5363 00a2 1B68     		ldr	r3, [r3]
 5364 00a4 1343     		orrs	r3, r3, r2
 5365 00a6 154A     		ldr	r2, .L329+8
 5366 00a8 1360     		str	r3, [r2]
 5367 00aa BB68     		ldr	r3, [r7, #8]
 5368 00ac DA6A     		ldr	r2, [r3, #44]
 5369 00ae 1346     		mov	r3, r2
 5370 00b0 9B00     		lsls	r3, r3, #2
 5371 00b2 1344     		add	r3, r3, r2
 5372 00b4 9B00     		lsls	r3, r3, #2
 5373 00b6 104A     		ldr	r2, .L329+4
 5374 00b8 1A44     		add	r2, r2, r3
 5375 00ba BB68     		ldr	r3, [r7, #8]
 5376 00bc 0433     		adds	r3, r3, #4
 5377 00be 1946     		mov	r1, r3
 5378 00c0 1046     		mov	r0, r2
 5379 00c2 FFF7FEFF 		bl	vListInsertEnd
 5380 00c6 04E0     		b	.L327
 5381              	.L325:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5382              		.loc 1 3998 49
 5383 00c8 0A4B     		ldr	r3, .L329
 5384 00ca 1B68     		ldr	r3, [r3]
 5385 00cc DA6A     		ldr	r2, [r3, #44]
 5386              		.loc 1 3998 35
 5387 00ce BB68     		ldr	r3, [r7, #8]
 5388 00d0 DA62     		str	r2, [r3, #44]
 5389              	.L327:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5390              		.loc 1 4004 13
 5391 00d2 0123     		movs	r3, #1
 5392 00d4 FB60     		str	r3, [r7, #12]
 5393 00d6 08E0     		b	.L322
 5394              	.L323:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 170


4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 5395              		.loc 1 4008 25
 5396 00d8 BB68     		ldr	r3, [r7, #8]
 5397 00da 5A6C     		ldr	r2, [r3, #68]
 5398              		.loc 1 4008 56
 5399 00dc 054B     		ldr	r3, .L329
 5400 00de 1B68     		ldr	r3, [r3]
 5401 00e0 DB6A     		ldr	r3, [r3, #44]
 5402              		.loc 1 4008 7
 5403 00e2 9A42     		cmp	r2, r3
 5404 00e4 01D2     		bcs	.L322
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 5405              		.loc 1 4017 14
 5406 00e6 0123     		movs	r3, #1
 5407 00e8 FB60     		str	r3, [r7, #12]
 5408              	.L322:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5409              		.loc 1 4030 10
 5410 00ea FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5411              		.loc 1 4031 2
 5412 00ec 1846     		mov	r0, r3
 5413 00ee 1037     		adds	r7, r7, #16
 5414              	.LCFI216:
 5415              		.cfi_def_cfa_offset 8
 5416 00f0 BD46     		mov	sp, r7
 5417              	.LCFI217:
 5418              		.cfi_def_cfa_register 13
 5419              		@ sp needed
 5420 00f2 80BD     		pop	{r7, pc}
 5421              	.L330:
 5422              		.align	2
 5423              	.L329:
 5424 00f4 00000000 		.word	pxCurrentTCB
 5425 00f8 00000000 		.word	pxReadyTasksLists
 5426 00fc 00000000 		.word	uxTopReadyPriority
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 171


 5427              		.cfi_endproc
 5428              	.LFE47:
 5430              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5431              		.align	1
 5432              		.global	xTaskPriorityDisinherit
 5433              		.syntax unified
 5434              		.thumb
 5435              		.thumb_func
 5437              	xTaskPriorityDisinherit:
 5438              	.LFB48:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5439              		.loc 1 4039 2
 5440              		.cfi_startproc
 5441              		@ args = 0, pretend = 0, frame = 24
 5442              		@ frame_needed = 1, uses_anonymous_args = 0
 5443 0000 80B5     		push	{r7, lr}
 5444              	.LCFI218:
 5445              		.cfi_def_cfa_offset 8
 5446              		.cfi_offset 7, -8
 5447              		.cfi_offset 14, -4
 5448 0002 86B0     		sub	sp, sp, #24
 5449              	.LCFI219:
 5450              		.cfi_def_cfa_offset 32
 5451 0004 00AF     		add	r7, sp, #0
 5452              	.LCFI220:
 5453              		.cfi_def_cfa_register 7
 5454 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5455              		.loc 1 4040 16
 5456 0008 7B68     		ldr	r3, [r7, #4]
 5457 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5458              		.loc 1 4041 13
 5459 000c 0023     		movs	r3, #0
 5460 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5461              		.loc 1 4043 5
 5462 0010 7B68     		ldr	r3, [r7, #4]
 5463 0012 002B     		cmp	r3, #0
 5464 0014 72D0     		beq	.L332
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5465              		.loc 1 4049 4
 5466 0016 3C4B     		ldr	r3, .L339
 5467 0018 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 172


 5468 001a 3A69     		ldr	r2, [r7, #16]
 5469 001c 9A42     		cmp	r2, r3
 5470 001e 0CD0     		beq	.L333
 5471              	.LBB195:
 5472              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5473              		.loc 2 195 2
 5474              		.syntax unified
 5475              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5476 0020 4FF05003 			mov r3, #80												
 5477 0024 72B6     		cpsid i													
 5478 0026 83F31188 		msr basepri, r3											
 5479 002a BFF36F8F 		isb														
 5480 002e BFF34F8F 		dsb														
 5481 0032 62B6     		cpsie i													
 5482              	
 5483              	@ 0 "" 2
 5484              		.thumb
 5485              		.syntax unified
 5486 0034 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5487              		.loc 2 205 1
 5488 0036 00BF     		nop
 5489              	.L334:
 5490              	.LBE196:
 5491              	.LBE195:
 5492              		.loc 1 4049 4 discriminator 1
 5493 0038 FEE7     		b	.L334
 5494              	.L333:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5495              		.loc 1 4050 4
 5496 003a 3B69     		ldr	r3, [r7, #16]
 5497 003c 9B6C     		ldr	r3, [r3, #72]
 5498 003e 002B     		cmp	r3, #0
 5499 0040 0CD1     		bne	.L335
 5500              	.LBB197:
 5501              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5502              		.loc 2 195 2
 5503              		.syntax unified
 5504              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5505 0042 4FF05003 			mov r3, #80												
 5506 0046 72B6     		cpsid i													
 5507 0048 83F31188 		msr basepri, r3											
 5508 004c BFF36F8F 		isb														
 5509 0050 BFF34F8F 		dsb														
 5510 0054 62B6     		cpsie i													
 5511              	
 5512              	@ 0 "" 2
 5513              		.thumb
 5514              		.syntax unified
 5515 0056 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5516              		.loc 2 205 1
 5517 0058 00BF     		nop
 5518              	.L336:
 5519              	.LBE198:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 173


 5520              	.LBE197:
 5521              		.loc 1 4050 4 discriminator 2
 5522 005a FEE7     		b	.L336
 5523              	.L335:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5524              		.loc 1 4051 11
 5525 005c 3B69     		ldr	r3, [r7, #16]
 5526 005e 9B6C     		ldr	r3, [r3, #72]
 5527              		.loc 1 4051 28
 5528 0060 5A1E     		subs	r2, r3, #1
 5529 0062 3B69     		ldr	r3, [r7, #16]
 5530 0064 9A64     		str	r2, [r3, #72]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5531              		.loc 1 4055 13
 5532 0066 3B69     		ldr	r3, [r7, #16]
 5533 0068 DA6A     		ldr	r2, [r3, #44]
 5534              		.loc 1 4055 34
 5535 006a 3B69     		ldr	r3, [r7, #16]
 5536 006c 5B6C     		ldr	r3, [r3, #68]
 5537              		.loc 1 4055 6
 5538 006e 9A42     		cmp	r2, r3
 5539 0070 44D0     		beq	.L332
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5540              		.loc 1 4058 14
 5541 0072 3B69     		ldr	r3, [r7, #16]
 5542 0074 9B6C     		ldr	r3, [r3, #72]
 5543              		.loc 1 4058 7
 5544 0076 002B     		cmp	r3, #0
 5545 0078 40D1     		bne	.L332
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5546              		.loc 1 4065 10
 5547 007a 3B69     		ldr	r3, [r7, #16]
 5548 007c 0433     		adds	r3, r3, #4
 5549 007e 1846     		mov	r0, r3
 5550 0080 FFF7FEFF 		bl	uxListRemove
 5551 0084 0346     		mov	r3, r0
 5552              		.loc 1 4065 8
 5553 0086 002B     		cmp	r3, #0
 5554 0088 15D1     		bne	.L337
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5555              		.loc 1 4067 7
 5556 008a 3B69     		ldr	r3, [r7, #16]
 5557 008c DA6A     		ldr	r2, [r3, #44]
 5558 008e 1F49     		ldr	r1, .L339+4
 5559 0090 1346     		mov	r3, r2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 174


 5560 0092 9B00     		lsls	r3, r3, #2
 5561 0094 1344     		add	r3, r3, r2
 5562 0096 9B00     		lsls	r3, r3, #2
 5563 0098 0B44     		add	r3, r3, r1
 5564 009a 1B68     		ldr	r3, [r3]
 5565 009c 002B     		cmp	r3, #0
 5566 009e 0AD1     		bne	.L337
 5567              		.loc 1 4067 7 is_stmt 0 discriminator 1
 5568 00a0 3B69     		ldr	r3, [r7, #16]
 5569 00a2 DB6A     		ldr	r3, [r3, #44]
 5570 00a4 0122     		movs	r2, #1
 5571 00a6 02FA03F3 		lsl	r3, r2, r3
 5572 00aa DA43     		mvns	r2, r3
 5573 00ac 184B     		ldr	r3, .L339+8
 5574 00ae 1B68     		ldr	r3, [r3]
 5575 00b0 1340     		ands	r3, r3, r2
 5576 00b2 174A     		ldr	r2, .L339+8
 5577 00b4 1360     		str	r3, [r2]
 5578              	.L337:
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5579              		.loc 1 4077 31 is_stmt 1
 5580 00b6 3B69     		ldr	r3, [r7, #16]
 5581 00b8 5A6C     		ldr	r2, [r3, #68]
 5582              		.loc 1 4077 24
 5583 00ba 3B69     		ldr	r3, [r7, #16]
 5584 00bc DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5585              		.loc 1 4082 6
 5586 00be 3B69     		ldr	r3, [r7, #16]
 5587 00c0 DB6A     		ldr	r3, [r3, #44]
 5588 00c2 C3F10702 		rsb	r2, r3, #7
 5589 00c6 3B69     		ldr	r3, [r7, #16]
 5590 00c8 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5591              		.loc 1 4083 6
 5592 00ca 3B69     		ldr	r3, [r7, #16]
 5593 00cc DB6A     		ldr	r3, [r3, #44]
 5594 00ce 0122     		movs	r2, #1
 5595 00d0 9A40     		lsls	r2, r2, r3
 5596 00d2 0F4B     		ldr	r3, .L339+8
 5597 00d4 1B68     		ldr	r3, [r3]
 5598 00d6 1343     		orrs	r3, r3, r2
 5599 00d8 0D4A     		ldr	r2, .L339+8
 5600 00da 1360     		str	r3, [r2]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 175


 5601 00dc 3B69     		ldr	r3, [r7, #16]
 5602 00de DA6A     		ldr	r2, [r3, #44]
 5603 00e0 1346     		mov	r3, r2
 5604 00e2 9B00     		lsls	r3, r3, #2
 5605 00e4 1344     		add	r3, r3, r2
 5606 00e6 9B00     		lsls	r3, r3, #2
 5607 00e8 084A     		ldr	r2, .L339+4
 5608 00ea 1A44     		add	r2, r2, r3
 5609 00ec 3B69     		ldr	r3, [r7, #16]
 5610 00ee 0433     		adds	r3, r3, #4
 5611 00f0 1946     		mov	r1, r3
 5612 00f2 1046     		mov	r0, r2
 5613 00f4 FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 5614              		.loc 1 4093 14
 5615 00f8 0123     		movs	r3, #1
 5616 00fa 7B61     		str	r3, [r7, #20]
 5617              	.L332:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5618              		.loc 1 4110 10
 5619 00fc 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5620              		.loc 1 4111 2
 5621 00fe 1846     		mov	r0, r3
 5622 0100 1837     		adds	r7, r7, #24
 5623              	.LCFI221:
 5624              		.cfi_def_cfa_offset 8
 5625 0102 BD46     		mov	sp, r7
 5626              	.LCFI222:
 5627              		.cfi_def_cfa_register 13
 5628              		@ sp needed
 5629 0104 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 176


 5630              	.L340:
 5631 0106 00BF     		.align	2
 5632              	.L339:
 5633 0108 00000000 		.word	pxCurrentTCB
 5634 010c 00000000 		.word	pxReadyTasksLists
 5635 0110 00000000 		.word	uxTopReadyPriority
 5636              		.cfi_endproc
 5637              	.LFE48:
 5639              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5640              		.align	1
 5641              		.global	vTaskPriorityDisinheritAfterTimeout
 5642              		.syntax unified
 5643              		.thumb
 5644              		.thumb_func
 5646              	vTaskPriorityDisinheritAfterTimeout:
 5647              	.LFB49:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5648              		.loc 1 4119 2
 5649              		.cfi_startproc
 5650              		@ args = 0, pretend = 0, frame = 32
 5651              		@ frame_needed = 1, uses_anonymous_args = 0
 5652 0000 80B5     		push	{r7, lr}
 5653              	.LCFI223:
 5654              		.cfi_def_cfa_offset 8
 5655              		.cfi_offset 7, -8
 5656              		.cfi_offset 14, -4
 5657 0002 88B0     		sub	sp, sp, #32
 5658              	.LCFI224:
 5659              		.cfi_def_cfa_offset 40
 5660 0004 00AF     		add	r7, sp, #0
 5661              	.LCFI225:
 5662              		.cfi_def_cfa_register 7
 5663 0006 7860     		str	r0, [r7, #4]
 5664 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5665              		.loc 1 4120 16
 5666 000a 7B68     		ldr	r3, [r7, #4]
 5667 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5668              		.loc 1 4122 20
 5669 000e 0123     		movs	r3, #1
 5670 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5671              		.loc 1 4124 5
 5672 0012 7B68     		ldr	r3, [r7, #4]
 5673 0014 002B     		cmp	r3, #0
 5674 0016 00F08780 		beq	.L351
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 177


4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5675              		.loc 1 4128 4
 5676 001a BB69     		ldr	r3, [r7, #24]
 5677 001c 9B6C     		ldr	r3, [r3, #72]
 5678 001e 002B     		cmp	r3, #0
 5679 0020 0CD1     		bne	.L343
 5680              	.LBB199:
 5681              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5682              		.loc 2 195 2
 5683              		.syntax unified
 5684              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5685 0022 4FF05003 			mov r3, #80												
 5686 0026 72B6     		cpsid i													
 5687 0028 83F31188 		msr basepri, r3											
 5688 002c BFF36F8F 		isb														
 5689 0030 BFF34F8F 		dsb														
 5690 0034 62B6     		cpsie i													
 5691              	
 5692              	@ 0 "" 2
 5693              		.thumb
 5694              		.syntax unified
 5695 0036 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5696              		.loc 2 205 1
 5697 0038 00BF     		nop
 5698              	.L344:
 5699              	.LBE200:
 5700              	.LBE199:
 5701              		.loc 1 4128 4 discriminator 1
 5702 003a FEE7     		b	.L344
 5703              	.L343:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 5704              		.loc 1 4134 13
 5705 003c BB69     		ldr	r3, [r7, #24]
 5706 003e 5B6C     		ldr	r3, [r3, #68]
 5707              		.loc 1 4134 6
 5708 0040 3A68     		ldr	r2, [r7]
 5709 0042 9A42     		cmp	r2, r3
 5710 0044 02D9     		bls	.L345
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 5711              		.loc 1 4136 21
 5712 0046 3B68     		ldr	r3, [r7]
 5713 0048 FB61     		str	r3, [r7, #28]
 5714 004a 02E0     		b	.L346
 5715              	.L345:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 178


4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 5716              		.loc 1 4140 21
 5717 004c BB69     		ldr	r3, [r7, #24]
 5718 004e 5B6C     		ldr	r3, [r3, #68]
 5719 0050 FB61     		str	r3, [r7, #28]
 5720              	.L346:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 5721              		.loc 1 4144 13
 5722 0052 BB69     		ldr	r3, [r7, #24]
 5723 0054 DB6A     		ldr	r3, [r3, #44]
 5724              		.loc 1 4144 6
 5725 0056 FA69     		ldr	r2, [r7, #28]
 5726 0058 9A42     		cmp	r2, r3
 5727 005a 65D0     		beq	.L351
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 5728              		.loc 1 4150 14
 5729 005c BB69     		ldr	r3, [r7, #24]
 5730 005e 9B6C     		ldr	r3, [r3, #72]
 5731              		.loc 1 4150 7
 5732 0060 7A69     		ldr	r2, [r7, #20]
 5733 0062 9A42     		cmp	r2, r3
 5734 0064 60D1     		bne	.L351
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 5735              		.loc 1 4155 6
 5736 0066 324B     		ldr	r3, .L352
 5737 0068 1B68     		ldr	r3, [r3]
 5738 006a BA69     		ldr	r2, [r7, #24]
 5739 006c 9A42     		cmp	r2, r3
 5740 006e 0CD1     		bne	.L347
 5741              	.LBB201:
 5742              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5743              		.loc 2 195 2
 5744              		.syntax unified
 5745              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5746 0070 4FF05003 			mov r3, #80												
 5747 0074 72B6     		cpsid i													
 5748 0076 83F31188 		msr basepri, r3											
 5749 007a BFF36F8F 		isb														
 5750 007e BFF34F8F 		dsb														
 5751 0082 62B6     		cpsie i													
 5752              	
 5753              	@ 0 "" 2
 5754              		.thumb
 5755              		.syntax unified
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 179


 5756 0084 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5757              		.loc 2 205 1
 5758 0086 00BF     		nop
 5759              	.L348:
 5760              	.LBE202:
 5761              	.LBE201:
 5762              		.loc 1 4155 6 discriminator 2
 5763 0088 FEE7     		b	.L348
 5764              	.L347:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5765              		.loc 1 4161 28
 5766 008a BB69     		ldr	r3, [r7, #24]
 5767 008c DB6A     		ldr	r3, [r3, #44]
 5768 008e 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5769              		.loc 1 4162 24
 5770 0090 BB69     		ldr	r3, [r7, #24]
 5771 0092 FA69     		ldr	r2, [r7, #28]
 5772 0094 DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 5773              		.loc 1 4166 12
 5774 0096 BB69     		ldr	r3, [r7, #24]
 5775 0098 9B69     		ldr	r3, [r3, #24]
 5776              		.loc 1 4166 8
 5777 009a 002B     		cmp	r3, #0
 5778 009c 04DB     		blt	.L349
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 5779              		.loc 1 4168 7
 5780 009e FB69     		ldr	r3, [r7, #28]
 5781 00a0 C3F10702 		rsb	r2, r3, #7
 5782 00a4 BB69     		ldr	r3, [r7, #24]
 5783 00a6 9A61     		str	r2, [r3, #24]
 5784              	.L349:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 5785              		.loc 1 4181 10
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 180


 5786 00a8 BB69     		ldr	r3, [r7, #24]
 5787 00aa 5969     		ldr	r1, [r3, #20]
 5788 00ac 3A69     		ldr	r2, [r7, #16]
 5789 00ae 1346     		mov	r3, r2
 5790 00b0 9B00     		lsls	r3, r3, #2
 5791 00b2 1344     		add	r3, r3, r2
 5792 00b4 9B00     		lsls	r3, r3, #2
 5793 00b6 1F4A     		ldr	r2, .L352+4
 5794 00b8 1344     		add	r3, r3, r2
 5795              		.loc 1 4181 8
 5796 00ba 9942     		cmp	r1, r3
 5797 00bc 34D1     		bne	.L351
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5798              		.loc 1 4183 11
 5799 00be BB69     		ldr	r3, [r7, #24]
 5800 00c0 0433     		adds	r3, r3, #4
 5801 00c2 1846     		mov	r0, r3
 5802 00c4 FFF7FEFF 		bl	uxListRemove
 5803 00c8 0346     		mov	r3, r0
 5804              		.loc 1 4183 9
 5805 00ca 002B     		cmp	r3, #0
 5806 00cc 15D1     		bne	.L350
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5807              		.loc 1 4185 8
 5808 00ce BB69     		ldr	r3, [r7, #24]
 5809 00d0 DA6A     		ldr	r2, [r3, #44]
 5810 00d2 1849     		ldr	r1, .L352+4
 5811 00d4 1346     		mov	r3, r2
 5812 00d6 9B00     		lsls	r3, r3, #2
 5813 00d8 1344     		add	r3, r3, r2
 5814 00da 9B00     		lsls	r3, r3, #2
 5815 00dc 0B44     		add	r3, r3, r1
 5816 00de 1B68     		ldr	r3, [r3]
 5817 00e0 002B     		cmp	r3, #0
 5818 00e2 0AD1     		bne	.L350
 5819              		.loc 1 4185 8 is_stmt 0 discriminator 1
 5820 00e4 BB69     		ldr	r3, [r7, #24]
 5821 00e6 DB6A     		ldr	r3, [r3, #44]
 5822 00e8 0122     		movs	r2, #1
 5823 00ea 02FA03F3 		lsl	r3, r2, r3
 5824 00ee DA43     		mvns	r2, r3
 5825 00f0 114B     		ldr	r3, .L352+8
 5826 00f2 1B68     		ldr	r3, [r3]
 5827 00f4 1340     		ands	r3, r3, r2
 5828 00f6 104A     		ldr	r2, .L352+8
 5829 00f8 1360     		str	r3, [r2]
 5830              	.L350:
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 5831              		.loc 1 4192 7 is_stmt 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 181


 5832 00fa BB69     		ldr	r3, [r7, #24]
 5833 00fc DB6A     		ldr	r3, [r3, #44]
 5834 00fe 0122     		movs	r2, #1
 5835 0100 9A40     		lsls	r2, r2, r3
 5836 0102 0D4B     		ldr	r3, .L352+8
 5837 0104 1B68     		ldr	r3, [r3]
 5838 0106 1343     		orrs	r3, r3, r2
 5839 0108 0B4A     		ldr	r2, .L352+8
 5840 010a 1360     		str	r3, [r2]
 5841 010c BB69     		ldr	r3, [r7, #24]
 5842 010e DA6A     		ldr	r2, [r3, #44]
 5843 0110 1346     		mov	r3, r2
 5844 0112 9B00     		lsls	r3, r3, #2
 5845 0114 1344     		add	r3, r3, r2
 5846 0116 9B00     		lsls	r3, r3, #2
 5847 0118 064A     		ldr	r2, .L352+4
 5848 011a 1A44     		add	r2, r2, r3
 5849 011c BB69     		ldr	r3, [r7, #24]
 5850 011e 0433     		adds	r3, r3, #4
 5851 0120 1946     		mov	r1, r3
 5852 0122 1046     		mov	r0, r2
 5853 0124 FFF7FEFF 		bl	vListInsertEnd
 5854              	.L351:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5855              		.loc 1 4213 2
 5856 0128 00BF     		nop
 5857 012a 2037     		adds	r7, r7, #32
 5858              	.LCFI226:
 5859              		.cfi_def_cfa_offset 8
 5860 012c BD46     		mov	sp, r7
 5861              	.LCFI227:
 5862              		.cfi_def_cfa_register 13
 5863              		@ sp needed
 5864 012e 80BD     		pop	{r7, pc}
 5865              	.L353:
 5866              		.align	2
 5867              	.L352:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 182


 5868 0130 00000000 		.word	pxCurrentTCB
 5869 0134 00000000 		.word	pxReadyTasksLists
 5870 0138 00000000 		.word	uxTopReadyPriority
 5871              		.cfi_endproc
 5872              	.LFE49:
 5874              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5875              		.align	1
 5876              		.global	uxTaskResetEventItemValue
 5877              		.syntax unified
 5878              		.thumb
 5879              		.thumb_func
 5881              	uxTaskResetEventItemValue:
 5882              	.LFB50:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 183


4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 184


4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 185


4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 186


4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 187


4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5883              		.loc 1 4534 1
 5884              		.cfi_startproc
 5885              		@ args = 0, pretend = 0, frame = 8
 5886              		@ frame_needed = 1, uses_anonymous_args = 0
 5887              		@ link register save eliminated.
 5888 0000 80B4     		push	{r7}
 5889              	.LCFI228:
 5890              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 188


 5891              		.cfi_offset 7, -4
 5892 0002 83B0     		sub	sp, sp, #12
 5893              	.LCFI229:
 5894              		.cfi_def_cfa_offset 16
 5895 0004 00AF     		add	r7, sp, #0
 5896              	.LCFI230:
 5897              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5898              		.loc 1 4537 13
 5899 0006 094B     		ldr	r3, .L356
 5900 0008 1B68     		ldr	r3, [r3]
 5901              		.loc 1 4537 11
 5902 000a 9B69     		ldr	r3, [r3, #24]
 5903 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5904              		.loc 1 4541 2
 5905 000e 074B     		ldr	r3, .L356
 5906 0010 1B68     		ldr	r3, [r3]
 5907 0012 DA6A     		ldr	r2, [r3, #44]
 5908 0014 054B     		ldr	r3, .L356
 5909 0016 1B68     		ldr	r3, [r3]
 5910 0018 C2F10702 		rsb	r2, r2, #7
 5911 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5912              		.loc 1 4543 9
 5913 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5914              		.loc 1 4544 1
 5915 0020 1846     		mov	r0, r3
 5916 0022 0C37     		adds	r7, r7, #12
 5917              	.LCFI231:
 5918              		.cfi_def_cfa_offset 4
 5919 0024 BD46     		mov	sp, r7
 5920              	.LCFI232:
 5921              		.cfi_def_cfa_register 13
 5922              		@ sp needed
 5923 0026 5DF8047B 		ldr	r7, [sp], #4
 5924              	.LCFI233:
 5925              		.cfi_restore 7
 5926              		.cfi_def_cfa_offset 0
 5927 002a 7047     		bx	lr
 5928              	.L357:
 5929              		.align	2
 5930              	.L356:
 5931 002c 00000000 		.word	pxCurrentTCB
 5932              		.cfi_endproc
 5933              	.LFE50:
 5935              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5936              		.align	1
 5937              		.global	pvTaskIncrementMutexHeldCount
 5938              		.syntax unified
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 189


 5939              		.thumb
 5940              		.thumb_func
 5942              	pvTaskIncrementMutexHeldCount:
 5943              	.LFB51:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5944              		.loc 1 4550 2
 5945              		.cfi_startproc
 5946              		@ args = 0, pretend = 0, frame = 0
 5947              		@ frame_needed = 1, uses_anonymous_args = 0
 5948              		@ link register save eliminated.
 5949 0000 80B4     		push	{r7}
 5950              	.LCFI234:
 5951              		.cfi_def_cfa_offset 4
 5952              		.cfi_offset 7, -4
 5953 0002 00AF     		add	r7, sp, #0
 5954              	.LCFI235:
 5955              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5956              		.loc 1 4553 20
 5957 0004 074B     		ldr	r3, .L361
 5958 0006 1B68     		ldr	r3, [r3]
 5959              		.loc 1 4553 5
 5960 0008 002B     		cmp	r3, #0
 5961 000a 04D0     		beq	.L359
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5962              		.loc 1 4555 18
 5963 000c 054B     		ldr	r3, .L361
 5964 000e 1B68     		ldr	r3, [r3]
 5965 0010 9A6C     		ldr	r2, [r3, #72]
 5966              		.loc 1 4555 35
 5967 0012 0132     		adds	r2, r2, #1
 5968 0014 9A64     		str	r2, [r3, #72]
 5969              	.L359:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5970              		.loc 1 4558 10
 5971 0016 034B     		ldr	r3, .L361
 5972 0018 1B68     		ldr	r3, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5973              		.loc 1 4559 2
 5974 001a 1846     		mov	r0, r3
 5975 001c BD46     		mov	sp, r7
 5976              	.LCFI236:
 5977              		.cfi_def_cfa_register 13
 5978              		@ sp needed
 5979 001e 5DF8047B 		ldr	r7, [sp], #4
 5980              	.LCFI237:
 5981              		.cfi_restore 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 190


 5982              		.cfi_def_cfa_offset 0
 5983 0022 7047     		bx	lr
 5984              	.L362:
 5985              		.align	2
 5986              	.L361:
 5987 0024 00000000 		.word	pxCurrentTCB
 5988              		.cfi_endproc
 5989              	.LFE51:
 5991              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5992              		.align	1
 5993              		.global	ulTaskNotifyTake
 5994              		.syntax unified
 5995              		.thumb
 5996              		.thumb_func
 5998              	ulTaskNotifyTake:
 5999              	.LFB52:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6000              		.loc 1 4567 2
 6001              		.cfi_startproc
 6002              		@ args = 0, pretend = 0, frame = 16
 6003              		@ frame_needed = 1, uses_anonymous_args = 0
 6004 0000 80B5     		push	{r7, lr}
 6005              	.LCFI238:
 6006              		.cfi_def_cfa_offset 8
 6007              		.cfi_offset 7, -8
 6008              		.cfi_offset 14, -4
 6009 0002 84B0     		sub	sp, sp, #16
 6010              	.LCFI239:
 6011              		.cfi_def_cfa_offset 24
 6012 0004 00AF     		add	r7, sp, #0
 6013              	.LCFI240:
 6014              		.cfi_def_cfa_register 7
 6015 0006 7860     		str	r0, [r7, #4]
 6016 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6017              		.loc 1 4570 3
 6018 000a FFF7FEFF 		bl	vPortEnterCritical
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6019              		.loc 1 4573 20
 6020 000e 204B     		ldr	r3, .L368
 6021 0010 1B68     		ldr	r3, [r3]
 6022 0012 D3F87834 		ldr	r3, [r3, #1144]
 6023              		.loc 1 4573 6
 6024 0016 002B     		cmp	r3, #0
 6025 0018 13D1     		bne	.L364
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 191


4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6026              		.loc 1 4576 17
 6027 001a 1D4B     		ldr	r3, .L368
 6028 001c 1B68     		ldr	r3, [r3]
 6029              		.loc 1 4576 33
 6030 001e 0122     		movs	r2, #1
 6031 0020 83F87C24 		strb	r2, [r3, #1148]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6032              		.loc 1 4578 7
 6033 0024 3B68     		ldr	r3, [r7]
 6034 0026 002B     		cmp	r3, #0
 6035 0028 0BD0     		beq	.L364
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6036              		.loc 1 4580 6
 6037 002a 0121     		movs	r1, #1
 6038 002c 3868     		ldr	r0, [r7]
 6039 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6040              		.loc 1 4587 6
 6041 0032 184B     		ldr	r3, .L368+4
 6042 0034 4FF08052 		mov	r2, #268435456
 6043 0038 1A60     		str	r2, [r3]
 6044              		.syntax unified
 6045              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6046 003a BFF34F8F 		dsb
 6047              	@ 0 "" 2
 6048              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6049 003e BFF36F8F 		isb
 6050              	@ 0 "" 2
 6051              		.thumb
 6052              		.syntax unified
 6053              	.L364:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6054              		.loc 1 4599 3
 6055 0042 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 192


 6056              		.loc 1 4601 3
 6057 0046 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6058              		.loc 1 4604 27
 6059 004a 114B     		ldr	r3, .L368
 6060 004c 1B68     		ldr	r3, [r3]
 6061              		.loc 1 4604 13
 6062 004e D3F87834 		ldr	r3, [r3, #1144]
 6063 0052 FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6064              		.loc 1 4606 6
 6065 0054 FB68     		ldr	r3, [r7, #12]
 6066 0056 002B     		cmp	r3, #0
 6067 0058 0ED0     		beq	.L365
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6068              		.loc 1 4608 7
 6069 005a 7B68     		ldr	r3, [r7, #4]
 6070 005c 002B     		cmp	r3, #0
 6071 005e 05D0     		beq	.L366
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6072              		.loc 1 4610 18
 6073 0060 0B4B     		ldr	r3, .L368
 6074 0062 1B68     		ldr	r3, [r3]
 6075              		.loc 1 4610 36
 6076 0064 0022     		movs	r2, #0
 6077 0066 C3F87824 		str	r2, [r3, #1144]
 6078 006a 05E0     		b	.L365
 6079              	.L366:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6080              		.loc 1 4614 18
 6081 006c 084B     		ldr	r3, .L368
 6082 006e 1B68     		ldr	r3, [r3]
 6083              		.loc 1 4614 47
 6084 0070 FA68     		ldr	r2, [r7, #12]
 6085 0072 013A     		subs	r2, r2, #1
 6086              		.loc 1 4614 36
 6087 0074 C3F87824 		str	r2, [r3, #1144]
 6088              	.L365:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6089              		.loc 1 4622 16
 6090 0078 054B     		ldr	r3, .L368
 6091 007a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 193


 6092              		.loc 1 4622 32
 6093 007c 0022     		movs	r2, #0
 6094 007e 83F87C24 		strb	r2, [r3, #1148]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6095              		.loc 1 4624 3
 6096 0082 FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6097              		.loc 1 4626 10
 6098 0086 FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6099              		.loc 1 4627 2
 6100 0088 1846     		mov	r0, r3
 6101 008a 1037     		adds	r7, r7, #16
 6102              	.LCFI241:
 6103              		.cfi_def_cfa_offset 8
 6104 008c BD46     		mov	sp, r7
 6105              	.LCFI242:
 6106              		.cfi_def_cfa_register 13
 6107              		@ sp needed
 6108 008e 80BD     		pop	{r7, pc}
 6109              	.L369:
 6110              		.align	2
 6111              	.L368:
 6112 0090 00000000 		.word	pxCurrentTCB
 6113 0094 04ED00E0 		.word	-536810236
 6114              		.cfi_endproc
 6115              	.LFE52:
 6117              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6118              		.align	1
 6119              		.global	xTaskNotifyWait
 6120              		.syntax unified
 6121              		.thumb
 6122              		.thumb_func
 6124              	xTaskNotifyWait:
 6125              	.LFB53:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6126              		.loc 1 4635 2
 6127              		.cfi_startproc
 6128              		@ args = 0, pretend = 0, frame = 24
 6129              		@ frame_needed = 1, uses_anonymous_args = 0
 6130 0000 80B5     		push	{r7, lr}
 6131              	.LCFI243:
 6132              		.cfi_def_cfa_offset 8
 6133              		.cfi_offset 7, -8
 6134              		.cfi_offset 14, -4
 6135 0002 86B0     		sub	sp, sp, #24
 6136              	.LCFI244:
 6137              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 194


 6138 0004 00AF     		add	r7, sp, #0
 6139              	.LCFI245:
 6140              		.cfi_def_cfa_register 7
 6141 0006 F860     		str	r0, [r7, #12]
 6142 0008 B960     		str	r1, [r7, #8]
 6143 000a 7A60     		str	r2, [r7, #4]
 6144 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6145              		.loc 1 4638 3
 6146 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6147              		.loc 1 4641 20
 6148 0012 294B     		ldr	r3, .L376
 6149 0014 1B68     		ldr	r3, [r3]
 6150 0016 93F87C34 		ldrb	r3, [r3, #1148]
 6151 001a DBB2     		uxtb	r3, r3
 6152              		.loc 1 4641 6
 6153 001c 022B     		cmp	r3, #2
 6154 001e 1CD0     		beq	.L371
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6155              		.loc 1 4646 35
 6156 0020 254B     		ldr	r3, .L376
 6157 0022 1B68     		ldr	r3, [r3]
 6158 0024 D3F87814 		ldr	r1, [r3, #1144]
 6159              		.loc 1 4646 38
 6160 0028 FA68     		ldr	r2, [r7, #12]
 6161 002a D243     		mvns	r2, r2
 6162              		.loc 1 4646 35
 6163 002c 0A40     		ands	r2, r2, r1
 6164 002e C3F87824 		str	r2, [r3, #1144]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6165              		.loc 1 4649 17
 6166 0032 214B     		ldr	r3, .L376
 6167 0034 1B68     		ldr	r3, [r3]
 6168              		.loc 1 4649 33
 6169 0036 0122     		movs	r2, #1
 6170 0038 83F87C24 		strb	r2, [r3, #1148]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6171              		.loc 1 4651 7
 6172 003c 3B68     		ldr	r3, [r7]
 6173 003e 002B     		cmp	r3, #0
 6174 0040 0BD0     		beq	.L371
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6175              		.loc 1 4653 6
 6176 0042 0121     		movs	r1, #1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 195


 6177 0044 3868     		ldr	r0, [r7]
 6178 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6179              		.loc 1 4660 6
 6180 004a 1C4B     		ldr	r3, .L376+4
 6181 004c 4FF08052 		mov	r2, #268435456
 6182 0050 1A60     		str	r2, [r3]
 6183              		.syntax unified
 6184              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6185 0052 BFF34F8F 		dsb
 6186              	@ 0 "" 2
 6187              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6188 0056 BFF36F8F 		isb
 6189              	@ 0 "" 2
 6190              		.thumb
 6191              		.syntax unified
 6192              	.L371:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6193              		.loc 1 4672 3
 6194 005a FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6195              		.loc 1 4674 3
 6196 005e FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6197              		.loc 1 4678 6
 6198 0062 7B68     		ldr	r3, [r7, #4]
 6199 0064 002B     		cmp	r3, #0
 6200 0066 05D0     		beq	.L372
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6201              		.loc 1 4682 41
 6202 0068 134B     		ldr	r3, .L376
 6203 006a 1B68     		ldr	r3, [r3]
 6204 006c D3F87824 		ldr	r2, [r3, #1144]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 196


 6205              		.loc 1 4682 27
 6206 0070 7B68     		ldr	r3, [r7, #4]
 6207 0072 1A60     		str	r2, [r3]
 6208              	.L372:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6209              		.loc 1 4689 20
 6210 0074 104B     		ldr	r3, .L376
 6211 0076 1B68     		ldr	r3, [r3]
 6212 0078 93F87C34 		ldrb	r3, [r3, #1148]
 6213 007c DBB2     		uxtb	r3, r3
 6214              		.loc 1 4689 6
 6215 007e 022B     		cmp	r3, #2
 6216 0080 02D0     		beq	.L373
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6217              		.loc 1 4692 13
 6218 0082 0023     		movs	r3, #0
 6219 0084 7B61     		str	r3, [r7, #20]
 6220 0086 0AE0     		b	.L374
 6221              	.L373:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6222              		.loc 1 4698 35
 6223 0088 0B4B     		ldr	r3, .L376
 6224 008a 1B68     		ldr	r3, [r3]
 6225 008c D3F87814 		ldr	r1, [r3, #1144]
 6226              		.loc 1 4698 38
 6227 0090 BA68     		ldr	r2, [r7, #8]
 6228 0092 D243     		mvns	r2, r2
 6229              		.loc 1 4698 35
 6230 0094 0A40     		ands	r2, r2, r1
 6231 0096 C3F87824 		str	r2, [r3, #1144]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6232              		.loc 1 4699 13
 6233 009a 0123     		movs	r3, #1
 6234 009c 7B61     		str	r3, [r7, #20]
 6235              	.L374:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6236              		.loc 1 4702 16
 6237 009e 064B     		ldr	r3, .L376
 6238 00a0 1B68     		ldr	r3, [r3]
 6239              		.loc 1 4702 32
 6240 00a2 0022     		movs	r2, #0
 6241 00a4 83F87C24 		strb	r2, [r3, #1148]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 197


4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6242              		.loc 1 4704 3
 6243 00a8 FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6244              		.loc 1 4706 10
 6245 00ac 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6246              		.loc 1 4707 2
 6247 00ae 1846     		mov	r0, r3
 6248 00b0 1837     		adds	r7, r7, #24
 6249              	.LCFI246:
 6250              		.cfi_def_cfa_offset 8
 6251 00b2 BD46     		mov	sp, r7
 6252              	.LCFI247:
 6253              		.cfi_def_cfa_register 13
 6254              		@ sp needed
 6255 00b4 80BD     		pop	{r7, pc}
 6256              	.L377:
 6257 00b6 00BF     		.align	2
 6258              	.L376:
 6259 00b8 00000000 		.word	pxCurrentTCB
 6260 00bc 04ED00E0 		.word	-536810236
 6261              		.cfi_endproc
 6262              	.LFE53:
 6264              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6265              		.align	1
 6266              		.global	xTaskGenericNotify
 6267              		.syntax unified
 6268              		.thumb
 6269              		.thumb_func
 6271              	xTaskGenericNotify:
 6272              	.LFB54:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6273              		.loc 1 4715 2
 6274              		.cfi_startproc
 6275              		@ args = 0, pretend = 0, frame = 40
 6276              		@ frame_needed = 1, uses_anonymous_args = 0
 6277 0000 80B5     		push	{r7, lr}
 6278              	.LCFI248:
 6279              		.cfi_def_cfa_offset 8
 6280              		.cfi_offset 7, -8
 6281              		.cfi_offset 14, -4
 6282 0002 8AB0     		sub	sp, sp, #40
 6283              	.LCFI249:
 6284              		.cfi_def_cfa_offset 48
 6285 0004 00AF     		add	r7, sp, #0
 6286              	.LCFI250:
 6287              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 198


 6288 0006 F860     		str	r0, [r7, #12]
 6289 0008 B960     		str	r1, [r7, #8]
 6290 000a 3B60     		str	r3, [r7]
 6291 000c 1346     		mov	r3, r2
 6292 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6293              		.loc 1 4717 13
 6294 0010 0123     		movs	r3, #1
 6295 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6296              		.loc 1 4720 3
 6297 0014 FB68     		ldr	r3, [r7, #12]
 6298 0016 002B     		cmp	r3, #0
 6299 0018 0CD1     		bne	.L379
 6300              	.LBB203:
 6301              	.LBB204:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6302              		.loc 2 195 2
 6303              		.syntax unified
 6304              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6305 001a 4FF05003 			mov r3, #80												
 6306 001e 72B6     		cpsid i													
 6307 0020 83F31188 		msr basepri, r3											
 6308 0024 BFF36F8F 		isb														
 6309 0028 BFF34F8F 		dsb														
 6310 002c 62B6     		cpsie i													
 6311              	
 6312              	@ 0 "" 2
 6313              		.thumb
 6314              		.syntax unified
 6315 002e BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6316              		.loc 2 205 1
 6317 0030 00BF     		nop
 6318              	.L380:
 6319              	.LBE204:
 6320              	.LBE203:
 6321              		.loc 1 4720 3 discriminator 1
 6322 0032 FEE7     		b	.L380
 6323              	.L379:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6324              		.loc 1 4721 9
 6325 0034 FB68     		ldr	r3, [r7, #12]
 6326 0036 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6327              		.loc 1 4723 3
 6328 0038 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6329              		.loc 1 4725 6
 6330 003c 3B68     		ldr	r3, [r7]
 6331 003e 002B     		cmp	r3, #0
 6332 0040 04D0     		beq	.L381
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 199


4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6333              		.loc 1 4727 42
 6334 0042 3B6A     		ldr	r3, [r7, #32]
 6335 0044 D3F87824 		ldr	r2, [r3, #1144]
 6336              		.loc 1 4727 35
 6337 0048 3B68     		ldr	r3, [r7]
 6338 004a 1A60     		str	r2, [r3]
 6339              	.L381:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6340              		.loc 1 4730 26
 6341 004c 3B6A     		ldr	r3, [r7, #32]
 6342 004e 93F87C34 		ldrb	r3, [r3, #1148]
 6343 0052 FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6344              		.loc 1 4732 25
 6345 0054 3B6A     		ldr	r3, [r7, #32]
 6346 0056 0222     		movs	r2, #2
 6347 0058 83F87C24 		strb	r2, [r3, #1148]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6348              		.loc 1 4734 4
 6349 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6350 005e 042B     		cmp	r3, #4
 6351 0060 2DD8     		bhi	.L382
 6352 0062 01A2     		adr	r2, .L384
 6353 0064 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6354              		.p2align 2
 6355              	.L384:
 6356 0068 E5000000 		.word	.L398+1
 6357 006c 7D000000 		.word	.L387+1
 6358 0070 8F000000 		.word	.L386+1
 6359 0074 9F000000 		.word	.L385+1
 6360 0078 A9000000 		.word	.L383+1
 6361              		.p2align 1
 6362              	.L387:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6363              		.loc 1 4737 29
 6364 007c 3B6A     		ldr	r3, [r7, #32]
 6365 007e D3F87824 		ldr	r2, [r3, #1144]
 6366 0082 BB68     		ldr	r3, [r7, #8]
 6367 0084 1A43     		orrs	r2, r2, r3
 6368 0086 3B6A     		ldr	r3, [r7, #32]
 6369 0088 C3F87824 		str	r2, [r3, #1144]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6370              		.loc 1 4738 6
 6371 008c 2DE0     		b	.L389
 6372              	.L386:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6373              		.loc 1 4741 13
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 200


 6374 008e 3B6A     		ldr	r3, [r7, #32]
 6375 0090 D3F87834 		ldr	r3, [r3, #1144]
 6376              		.loc 1 4741 32
 6377 0094 5A1C     		adds	r2, r3, #1
 6378 0096 3B6A     		ldr	r3, [r7, #32]
 6379 0098 C3F87824 		str	r2, [r3, #1144]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6380              		.loc 1 4742 6
 6381 009c 25E0     		b	.L389
 6382              	.L385:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6383              		.loc 1 4745 29
 6384 009e 3B6A     		ldr	r3, [r7, #32]
 6385 00a0 BA68     		ldr	r2, [r7, #8]
 6386 00a2 C3F87824 		str	r2, [r3, #1144]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6387              		.loc 1 4746 6
 6388 00a6 20E0     		b	.L389
 6389              	.L383:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6390              		.loc 1 4749 8
 6391 00a8 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6392 00aa 022B     		cmp	r3, #2
 6393 00ac 04D0     		beq	.L390
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6394              		.loc 1 4751 30
 6395 00ae 3B6A     		ldr	r3, [r7, #32]
 6396 00b0 BA68     		ldr	r2, [r7, #8]
 6397 00b2 C3F87824 		str	r2, [r3, #1144]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6398              		.loc 1 4758 6
 6399 00b6 18E0     		b	.L389
 6400              	.L390:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6401              		.loc 1 4756 15
 6402 00b8 0023     		movs	r3, #0
 6403 00ba 7B62     		str	r3, [r7, #36]
 6404              		.loc 1 4758 6
 6405 00bc 15E0     		b	.L389
 6406              	.L382:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 201


4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6407              		.loc 1 4769 6
 6408 00be 3B6A     		ldr	r3, [r7, #32]
 6409 00c0 D3F87834 		ldr	r3, [r3, #1144]
 6410 00c4 B3F1FF3F 		cmp	r3, #-1
 6411 00c8 0ED0     		beq	.L399
 6412              	.LBB205:
 6413              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6414              		.loc 2 195 2
 6415              		.syntax unified
 6416              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6417 00ca 4FF05003 			mov r3, #80												
 6418 00ce 72B6     		cpsid i													
 6419 00d0 83F31188 		msr basepri, r3											
 6420 00d4 BFF36F8F 		isb														
 6421 00d8 BFF34F8F 		dsb														
 6422 00dc 62B6     		cpsie i													
 6423              	
 6424              	@ 0 "" 2
 6425              		.thumb
 6426              		.syntax unified
 6427 00de 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6428              		.loc 2 205 1
 6429 00e0 00BF     		nop
 6430              	.L393:
 6431              	.LBE206:
 6432              	.LBE205:
 6433              		.loc 1 4769 6 discriminator 2
 6434 00e2 FEE7     		b	.L393
 6435              	.L398:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6436              		.loc 1 4763 6
 6437 00e4 00BF     		nop
 6438 00e6 00E0     		b	.L389
 6439              	.L399:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6440              		.loc 1 4771 6
 6441 00e8 00BF     		nop
 6442              	.L389:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6443              		.loc 1 4778 6
 6444 00ea FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6445 00ec 012B     		cmp	r3, #1
 6446 00ee 3BD1     		bne	.L394
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 202


4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6447              		.loc 1 4780 14
 6448 00f0 3B6A     		ldr	r3, [r7, #32]
 6449 00f2 0433     		adds	r3, r3, #4
 6450 00f4 1846     		mov	r0, r3
 6451 00f6 FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6452              		.loc 1 4781 5
 6453 00fa 3B6A     		ldr	r3, [r7, #32]
 6454 00fc DB6A     		ldr	r3, [r3, #44]
 6455 00fe 0122     		movs	r2, #1
 6456 0100 9A40     		lsls	r2, r2, r3
 6457 0102 1D4B     		ldr	r3, .L400
 6458 0104 1B68     		ldr	r3, [r3]
 6459 0106 1343     		orrs	r3, r3, r2
 6460 0108 1B4A     		ldr	r2, .L400
 6461 010a 1360     		str	r3, [r2]
 6462 010c 3B6A     		ldr	r3, [r7, #32]
 6463 010e DA6A     		ldr	r2, [r3, #44]
 6464 0110 1346     		mov	r3, r2
 6465 0112 9B00     		lsls	r3, r3, #2
 6466 0114 1344     		add	r3, r3, r2
 6467 0116 9B00     		lsls	r3, r3, #2
 6468 0118 184A     		ldr	r2, .L400+4
 6469 011a 1A44     		add	r2, r2, r3
 6470 011c 3B6A     		ldr	r3, [r7, #32]
 6471 011e 0433     		adds	r3, r3, #4
 6472 0120 1946     		mov	r1, r3
 6473 0122 1046     		mov	r0, r2
 6474 0124 FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6475              		.loc 1 4784 5
 6476 0128 3B6A     		ldr	r3, [r7, #32]
 6477 012a 9B6A     		ldr	r3, [r3, #40]
 6478 012c 002B     		cmp	r3, #0
 6479 012e 0CD0     		beq	.L395
 6480              	.LBB207:
 6481              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6482              		.loc 2 195 2
 6483              		.syntax unified
 6484              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6485 0130 4FF05003 			mov r3, #80												
 6486 0134 72B6     		cpsid i													
 6487 0136 83F31188 		msr basepri, r3											
 6488 013a BFF36F8F 		isb														
 6489 013e BFF34F8F 		dsb														
 6490 0142 62B6     		cpsie i													
 6491              	
 6492              	@ 0 "" 2
 6493              		.thumb
 6494              		.syntax unified
 6495 0144 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 203


 6496              		.loc 2 205 1
 6497 0146 00BF     		nop
 6498              	.L396:
 6499              	.LBE208:
 6500              	.LBE207:
 6501              		.loc 1 4784 5 discriminator 3
 6502 0148 FEE7     		b	.L396
 6503              	.L395:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6504              		.loc 1 4802 14
 6505 014a 3B6A     		ldr	r3, [r7, #32]
 6506 014c DA6A     		ldr	r2, [r3, #44]
 6507              		.loc 1 4802 41
 6508 014e 0C4B     		ldr	r3, .L400+8
 6509 0150 1B68     		ldr	r3, [r3]
 6510 0152 DB6A     		ldr	r3, [r3, #44]
 6511              		.loc 1 4802 7
 6512 0154 9A42     		cmp	r2, r3
 6513 0156 07D9     		bls	.L394
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6514              		.loc 1 4806 6
 6515 0158 0A4B     		ldr	r3, .L400+12
 6516 015a 4FF08052 		mov	r2, #268435456
 6517 015e 1A60     		str	r2, [r3]
 6518              		.syntax unified
 6519              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6520 0160 BFF34F8F 		dsb
 6521              	@ 0 "" 2
 6522              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6523 0164 BFF36F8F 		isb
 6524              	@ 0 "" 2
 6525              		.thumb
 6526              		.syntax unified
 6527              	.L394:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 204


4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6528              		.loc 1 4818 3
 6529 0168 FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6530              		.loc 1 4820 10
 6531 016c 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6532              		.loc 1 4821 2
 6533 016e 1846     		mov	r0, r3
 6534 0170 2837     		adds	r7, r7, #40
 6535              	.LCFI251:
 6536              		.cfi_def_cfa_offset 8
 6537 0172 BD46     		mov	sp, r7
 6538              	.LCFI252:
 6539              		.cfi_def_cfa_register 13
 6540              		@ sp needed
 6541 0174 80BD     		pop	{r7, pc}
 6542              	.L401:
 6543 0176 00BF     		.align	2
 6544              	.L400:
 6545 0178 00000000 		.word	uxTopReadyPriority
 6546 017c 00000000 		.word	pxReadyTasksLists
 6547 0180 00000000 		.word	pxCurrentTCB
 6548 0184 04ED00E0 		.word	-536810236
 6549              		.cfi_endproc
 6550              	.LFE54:
 6552              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6553              		.align	1
 6554              		.global	xTaskGenericNotifyFromISR
 6555              		.syntax unified
 6556              		.thumb
 6557              		.thumb_func
 6559              	xTaskGenericNotifyFromISR:
 6560              	.LFB55:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6561              		.loc 1 4829 2
 6562              		.cfi_startproc
 6563              		@ args = 4, pretend = 0, frame = 56
 6564              		@ frame_needed = 1, uses_anonymous_args = 0
 6565 0000 80B5     		push	{r7, lr}
 6566              	.LCFI253:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 205


 6567              		.cfi_def_cfa_offset 8
 6568              		.cfi_offset 7, -8
 6569              		.cfi_offset 14, -4
 6570 0002 8EB0     		sub	sp, sp, #56
 6571              	.LCFI254:
 6572              		.cfi_def_cfa_offset 64
 6573 0004 00AF     		add	r7, sp, #0
 6574              	.LCFI255:
 6575              		.cfi_def_cfa_register 7
 6576 0006 F860     		str	r0, [r7, #12]
 6577 0008 B960     		str	r1, [r7, #8]
 6578 000a 3B60     		str	r3, [r7]
 6579 000c 1346     		mov	r3, r2
 6580 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6581              		.loc 1 4832 13
 6582 0010 0123     		movs	r3, #1
 6583 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6584              		.loc 1 4835 3
 6585 0014 FB68     		ldr	r3, [r7, #12]
 6586 0016 002B     		cmp	r3, #0
 6587 0018 0CD1     		bne	.L403
 6588              	.LBB209:
 6589              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6590              		.loc 2 195 2
 6591              		.syntax unified
 6592              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6593 001a 4FF05003 			mov r3, #80												
 6594 001e 72B6     		cpsid i													
 6595 0020 83F31188 		msr basepri, r3											
 6596 0024 BFF36F8F 		isb														
 6597 0028 BFF34F8F 		dsb														
 6598 002c 62B6     		cpsie i													
 6599              	
 6600              	@ 0 "" 2
 6601              		.thumb
 6602              		.syntax unified
 6603 002e 7B62     		str	r3, [r7, #36]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6604              		.loc 2 205 1
 6605 0030 00BF     		nop
 6606              	.L404:
 6607              	.LBE210:
 6608              	.LBE209:
 6609              		.loc 1 4835 3 discriminator 1
 6610 0032 FEE7     		b	.L404
 6611              	.L403:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 206


4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6612              		.loc 1 4853 3
 6613 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6614              		.loc 1 4855 9
 6615 0038 FB68     		ldr	r3, [r7, #12]
 6616 003a 3B63     		str	r3, [r7, #48]
 6617              	.LBB211:
 6618              	.LBB212:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6619              		.loc 2 213 2
 6620              		.syntax unified
 6621              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6622 003c EFF31182 			mrs r2, basepri											
 6623 0040 4FF05003 		mov r3, #80												
 6624 0044 72B6     		cpsid i													
 6625 0046 83F31188 		msr basepri, r3											
 6626 004a BFF36F8F 		isb														
 6627 004e BFF34F8F 		dsb														
 6628 0052 62B6     		cpsie i													
 6629              	
 6630              	@ 0 "" 2
 6631              		.thumb
 6632              		.syntax unified
 6633 0054 3A62     		str	r2, [r7, #32]
 6634 0056 FB61     		str	r3, [r7, #28]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 6635              		.loc 2 227 9
 6636 0058 3B6A     		ldr	r3, [r7, #32]
 6637              	.LBE212:
 6638              	.LBE211:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6639              		.loc 1 4857 28
 6640 005a FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6641              		.loc 1 4859 6
 6642 005c 3B68     		ldr	r3, [r7]
 6643 005e 002B     		cmp	r3, #0
 6644 0060 04D0     		beq	.L406
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 207


 6645              		.loc 1 4861 42
 6646 0062 3B6B     		ldr	r3, [r7, #48]
 6647 0064 D3F87824 		ldr	r2, [r3, #1144]
 6648              		.loc 1 4861 35
 6649 0068 3B68     		ldr	r3, [r7]
 6650 006a 1A60     		str	r2, [r3]
 6651              	.L406:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6652              		.loc 1 4864 26
 6653 006c 3B6B     		ldr	r3, [r7, #48]
 6654 006e 93F87C34 		ldrb	r3, [r3, #1148]
 6655 0072 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6656              		.loc 1 4865 25
 6657 0076 3B6B     		ldr	r3, [r7, #48]
 6658 0078 0222     		movs	r2, #2
 6659 007a 83F87C24 		strb	r2, [r3, #1148]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6660              		.loc 1 4867 4
 6661 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6662 0080 042B     		cmp	r3, #4
 6663 0082 2FD8     		bhi	.L407
 6664 0084 01A2     		adr	r2, .L409
 6665 0086 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6666 008a 00BF     		.p2align 2
 6667              	.L409:
 6668 008c 0B010000 		.word	.L426+1
 6669 0090 A1000000 		.word	.L412+1
 6670 0094 B3000000 		.word	.L411+1
 6671 0098 C3000000 		.word	.L410+1
 6672 009c CD000000 		.word	.L408+1
 6673              		.p2align 1
 6674              	.L412:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6675              		.loc 1 4870 29
 6676 00a0 3B6B     		ldr	r3, [r7, #48]
 6677 00a2 D3F87824 		ldr	r2, [r3, #1144]
 6678 00a6 BB68     		ldr	r3, [r7, #8]
 6679 00a8 1A43     		orrs	r2, r2, r3
 6680 00aa 3B6B     		ldr	r3, [r7, #48]
 6681 00ac C3F87824 		str	r2, [r3, #1144]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6682              		.loc 1 4871 6
 6683 00b0 2EE0     		b	.L414
 6684              	.L411:
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6685              		.loc 1 4874 13
 6686 00b2 3B6B     		ldr	r3, [r7, #48]
 6687 00b4 D3F87834 		ldr	r3, [r3, #1144]
 6688              		.loc 1 4874 32
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 208


 6689 00b8 5A1C     		adds	r2, r3, #1
 6690 00ba 3B6B     		ldr	r3, [r7, #48]
 6691 00bc C3F87824 		str	r2, [r3, #1144]
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6692              		.loc 1 4875 6
 6693 00c0 26E0     		b	.L414
 6694              	.L410:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6695              		.loc 1 4878 29
 6696 00c2 3B6B     		ldr	r3, [r7, #48]
 6697 00c4 BA68     		ldr	r2, [r7, #8]
 6698 00c6 C3F87824 		str	r2, [r3, #1144]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6699              		.loc 1 4879 6
 6700 00ca 21E0     		b	.L414
 6701              	.L408:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6702              		.loc 1 4882 8
 6703 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6704 00d0 022B     		cmp	r3, #2
 6705 00d2 04D0     		beq	.L415
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6706              		.loc 1 4884 30
 6707 00d4 3B6B     		ldr	r3, [r7, #48]
 6708 00d6 BA68     		ldr	r2, [r7, #8]
 6709 00d8 C3F87824 		str	r2, [r3, #1144]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6710              		.loc 1 4891 6
 6711 00dc 18E0     		b	.L414
 6712              	.L415:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6713              		.loc 1 4889 15
 6714 00de 0023     		movs	r3, #0
 6715 00e0 7B63     		str	r3, [r7, #52]
 6716              		.loc 1 4891 6
 6717 00e2 15E0     		b	.L414
 6718              	.L407:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 209


4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6719              		.loc 1 4902 6
 6720 00e4 3B6B     		ldr	r3, [r7, #48]
 6721 00e6 D3F87834 		ldr	r3, [r3, #1144]
 6722 00ea B3F1FF3F 		cmp	r3, #-1
 6723 00ee 0ED0     		beq	.L427
 6724              	.LBB213:
 6725              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6726              		.loc 2 195 2
 6727              		.syntax unified
 6728              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6729 00f0 4FF05003 			mov r3, #80												
 6730 00f4 72B6     		cpsid i													
 6731 00f6 83F31188 		msr basepri, r3											
 6732 00fa BFF36F8F 		isb														
 6733 00fe BFF34F8F 		dsb														
 6734 0102 62B6     		cpsie i													
 6735              	
 6736              	@ 0 "" 2
 6737              		.thumb
 6738              		.syntax unified
 6739 0104 BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6740              		.loc 2 205 1
 6741 0106 00BF     		nop
 6742              	.L418:
 6743              	.LBE214:
 6744              	.LBE213:
 6745              		.loc 1 4902 6 discriminator 2
 6746 0108 FEE7     		b	.L418
 6747              	.L426:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6748              		.loc 1 4896 6
 6749 010a 00BF     		nop
 6750 010c 00E0     		b	.L414
 6751              	.L427:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6752              		.loc 1 4903 6
 6753 010e 00BF     		nop
 6754              	.L414:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6755              		.loc 1 4910 6
 6756 0110 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6757 0114 012B     		cmp	r3, #1
 6758 0116 47D1     		bne	.L419
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6759              		.loc 1 4913 5
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 210


 6760 0118 3B6B     		ldr	r3, [r7, #48]
 6761 011a 9B6A     		ldr	r3, [r3, #40]
 6762 011c 002B     		cmp	r3, #0
 6763 011e 0CD0     		beq	.L420
 6764              	.LBB215:
 6765              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6766              		.loc 2 195 2
 6767              		.syntax unified
 6768              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6769 0120 4FF05003 			mov r3, #80												
 6770 0124 72B6     		cpsid i													
 6771 0126 83F31188 		msr basepri, r3											
 6772 012a BFF36F8F 		isb														
 6773 012e BFF34F8F 		dsb														
 6774 0132 62B6     		cpsie i													
 6775              	
 6776              	@ 0 "" 2
 6777              		.thumb
 6778              		.syntax unified
 6779 0134 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6780              		.loc 2 205 1
 6781 0136 00BF     		nop
 6782              	.L421:
 6783              	.LBE216:
 6784              	.LBE215:
 6785              		.loc 1 4913 5 discriminator 3
 6786 0138 FEE7     		b	.L421
 6787              	.L420:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6788              		.loc 1 4915 30
 6789 013a 214B     		ldr	r3, .L428
 6790 013c 1B68     		ldr	r3, [r3]
 6791              		.loc 1 4915 7
 6792 013e 002B     		cmp	r3, #0
 6793 0140 1CD1     		bne	.L422
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6794              		.loc 1 4917 15
 6795 0142 3B6B     		ldr	r3, [r7, #48]
 6796 0144 0433     		adds	r3, r3, #4
 6797 0146 1846     		mov	r0, r3
 6798 0148 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6799              		.loc 1 4918 6
 6800 014c 3B6B     		ldr	r3, [r7, #48]
 6801 014e DB6A     		ldr	r3, [r3, #44]
 6802 0150 0122     		movs	r2, #1
 6803 0152 9A40     		lsls	r2, r2, r3
 6804 0154 1B4B     		ldr	r3, .L428+4
 6805 0156 1B68     		ldr	r3, [r3]
 6806 0158 1343     		orrs	r3, r3, r2
 6807 015a 1A4A     		ldr	r2, .L428+4
 6808 015c 1360     		str	r3, [r2]
 6809 015e 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 211


 6810 0160 DA6A     		ldr	r2, [r3, #44]
 6811 0162 1346     		mov	r3, r2
 6812 0164 9B00     		lsls	r3, r3, #2
 6813 0166 1344     		add	r3, r3, r2
 6814 0168 9B00     		lsls	r3, r3, #2
 6815 016a 174A     		ldr	r2, .L428+8
 6816 016c 1A44     		add	r2, r2, r3
 6817 016e 3B6B     		ldr	r3, [r7, #48]
 6818 0170 0433     		adds	r3, r3, #4
 6819 0172 1946     		mov	r1, r3
 6820 0174 1046     		mov	r0, r2
 6821 0176 FFF7FEFF 		bl	vListInsertEnd
 6822 017a 05E0     		b	.L423
 6823              	.L422:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6824              		.loc 1 4924 6
 6825 017c 3B6B     		ldr	r3, [r7, #48]
 6826 017e 1833     		adds	r3, r3, #24
 6827 0180 1946     		mov	r1, r3
 6828 0182 1248     		ldr	r0, .L428+12
 6829 0184 FFF7FEFF 		bl	vListInsertEnd
 6830              	.L423:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6831              		.loc 1 4927 14
 6832 0188 3B6B     		ldr	r3, [r7, #48]
 6833 018a DA6A     		ldr	r2, [r3, #44]
 6834              		.loc 1 4927 41
 6835 018c 104B     		ldr	r3, .L428+16
 6836 018e 1B68     		ldr	r3, [r3]
 6837 0190 DB6A     		ldr	r3, [r3, #44]
 6838              		.loc 1 4927 7
 6839 0192 9A42     		cmp	r2, r3
 6840 0194 08D9     		bls	.L419
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6841              		.loc 1 4931 8
 6842 0196 3B6C     		ldr	r3, [r7, #64]
 6843 0198 002B     		cmp	r3, #0
 6844 019a 02D0     		beq	.L424
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6845              		.loc 1 4933 34
 6846 019c 3B6C     		ldr	r3, [r7, #64]
 6847 019e 0122     		movs	r2, #1
 6848 01a0 1A60     		str	r2, [r3]
 6849              	.L424:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 212


4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6850              		.loc 1 4939 20
 6851 01a2 0C4B     		ldr	r3, .L428+20
 6852 01a4 0122     		movs	r2, #1
 6853 01a6 1A60     		str	r2, [r3]
 6854              	.L419:
 6855 01a8 FB6A     		ldr	r3, [r7, #44]
 6856 01aa 3B61     		str	r3, [r7, #16]
 6857              	.LBB217:
 6858              	.LBB218:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6859              		.loc 2 233 2
 6860 01ac 3B69     		ldr	r3, [r7, #16]
 6861              		.syntax unified
 6862              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6863 01ae 83F31188 			msr basepri, r3	
 6864              	@ 0 "" 2
 6865              		.loc 2 237 1
 6866              		.thumb
 6867              		.syntax unified
 6868 01b2 00BF     		nop
 6869              	.LBE218:
 6870              	.LBE217:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6871              		.loc 1 4949 10
 6872 01b4 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6873              		.loc 1 4950 2
 6874 01b6 1846     		mov	r0, r3
 6875 01b8 3837     		adds	r7, r7, #56
 6876              	.LCFI256:
 6877              		.cfi_def_cfa_offset 8
 6878 01ba BD46     		mov	sp, r7
 6879              	.LCFI257:
 6880              		.cfi_def_cfa_register 13
 6881              		@ sp needed
 6882 01bc 80BD     		pop	{r7, pc}
 6883              	.L429:
 6884 01be 00BF     		.align	2
 6885              	.L428:
 6886 01c0 00000000 		.word	uxSchedulerSuspended
 6887 01c4 00000000 		.word	uxTopReadyPriority
 6888 01c8 00000000 		.word	pxReadyTasksLists
 6889 01cc 00000000 		.word	xPendingReadyList
 6890 01d0 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 213


 6891 01d4 00000000 		.word	xYieldPending
 6892              		.cfi_endproc
 6893              	.LFE55:
 6895              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6896              		.align	1
 6897              		.global	vTaskNotifyGiveFromISR
 6898              		.syntax unified
 6899              		.thumb
 6900              		.thumb_func
 6902              	vTaskNotifyGiveFromISR:
 6903              	.LFB56:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6904              		.loc 1 4958 2
 6905              		.cfi_startproc
 6906              		@ args = 0, pretend = 0, frame = 40
 6907              		@ frame_needed = 1, uses_anonymous_args = 0
 6908 0000 80B5     		push	{r7, lr}
 6909              	.LCFI258:
 6910              		.cfi_def_cfa_offset 8
 6911              		.cfi_offset 7, -8
 6912              		.cfi_offset 14, -4
 6913 0002 8AB0     		sub	sp, sp, #40
 6914              	.LCFI259:
 6915              		.cfi_def_cfa_offset 48
 6916 0004 00AF     		add	r7, sp, #0
 6917              	.LCFI260:
 6918              		.cfi_def_cfa_register 7
 6919 0006 7860     		str	r0, [r7, #4]
 6920 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6921              		.loc 1 4963 3
 6922 000a 7B68     		ldr	r3, [r7, #4]
 6923 000c 002B     		cmp	r3, #0
 6924 000e 0CD1     		bne	.L431
 6925              	.LBB219:
 6926              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6927              		.loc 2 195 2
 6928              		.syntax unified
 6929              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6930 0010 4FF05003 			mov r3, #80												
 6931 0014 72B6     		cpsid i													
 6932 0016 83F31188 		msr basepri, r3											
 6933 001a BFF36F8F 		isb														
 6934 001e BFF34F8F 		dsb														
 6935 0022 62B6     		cpsie i													
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 214


 6936              	
 6937              	@ 0 "" 2
 6938              		.thumb
 6939              		.syntax unified
 6940 0024 BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6941              		.loc 2 205 1
 6942 0026 00BF     		nop
 6943              	.L432:
 6944              	.LBE220:
 6945              	.LBE219:
 6946              		.loc 1 4963 3 discriminator 1
 6947 0028 FEE7     		b	.L432
 6948              	.L431:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6949              		.loc 1 4981 3
 6950 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6951              		.loc 1 4983 9
 6952 002e 7B68     		ldr	r3, [r7, #4]
 6953 0030 7B62     		str	r3, [r7, #36]
 6954              	.LBB221:
 6955              	.LBB222:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6956              		.loc 2 213 2
 6957              		.syntax unified
 6958              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6959 0032 EFF31182 			mrs r2, basepri											
 6960 0036 4FF05003 		mov r3, #80												
 6961 003a 72B6     		cpsid i													
 6962 003c 83F31188 		msr basepri, r3											
 6963 0040 BFF36F8F 		isb														
 6964 0044 BFF34F8F 		dsb														
 6965 0048 62B6     		cpsie i													
 6966              	
 6967              	@ 0 "" 2
 6968              		.thumb
 6969              		.syntax unified
 6970 004a 7A61     		str	r2, [r7, #20]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 215


 6971 004c 3B61     		str	r3, [r7, #16]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 6972              		.loc 2 227 9
 6973 004e 7B69     		ldr	r3, [r7, #20]
 6974              	.LBE222:
 6975              	.LBE221:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6976              		.loc 1 4985 28
 6977 0050 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6978              		.loc 1 4987 26
 6979 0052 7B6A     		ldr	r3, [r7, #36]
 6980 0054 93F87C34 		ldrb	r3, [r3, #1148]
 6981 0058 FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6982              		.loc 1 4988 25
 6983 005a 7B6A     		ldr	r3, [r7, #36]
 6984 005c 0222     		movs	r2, #2
 6985 005e 83F87C24 		strb	r2, [r3, #1148]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6986              		.loc 1 4992 11
 6987 0062 7B6A     		ldr	r3, [r7, #36]
 6988 0064 D3F87834 		ldr	r3, [r3, #1144]
 6989              		.loc 1 4992 30
 6990 0068 5A1C     		adds	r2, r3, #1
 6991 006a 7B6A     		ldr	r3, [r7, #36]
 6992 006c C3F87824 		str	r2, [r3, #1144]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6993              		.loc 1 4998 6
 6994 0070 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6995 0072 012B     		cmp	r3, #1
 6996 0074 47D1     		bne	.L434
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6997              		.loc 1 5001 5
 6998 0076 7B6A     		ldr	r3, [r7, #36]
 6999 0078 9B6A     		ldr	r3, [r3, #40]
 7000 007a 002B     		cmp	r3, #0
 7001 007c 0CD0     		beq	.L435
 7002              	.LBB223:
 7003              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 7004              		.loc 2 195 2
 7005              		.syntax unified
 7006              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7007 007e 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 216


 7008 0082 72B6     		cpsid i													
 7009 0084 83F31188 		msr basepri, r3											
 7010 0088 BFF36F8F 		isb														
 7011 008c BFF34F8F 		dsb														
 7012 0090 62B6     		cpsie i													
 7013              	
 7014              	@ 0 "" 2
 7015              		.thumb
 7016              		.syntax unified
 7017 0092 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7018              		.loc 2 205 1
 7019 0094 00BF     		nop
 7020              	.L436:
 7021              	.LBE224:
 7022              	.LBE223:
 7023              		.loc 1 5001 5 discriminator 2
 7024 0096 FEE7     		b	.L436
 7025              	.L435:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7026              		.loc 1 5003 30
 7027 0098 204B     		ldr	r3, .L440
 7028 009a 1B68     		ldr	r3, [r3]
 7029              		.loc 1 5003 7
 7030 009c 002B     		cmp	r3, #0
 7031 009e 1CD1     		bne	.L437
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7032              		.loc 1 5005 15
 7033 00a0 7B6A     		ldr	r3, [r7, #36]
 7034 00a2 0433     		adds	r3, r3, #4
 7035 00a4 1846     		mov	r0, r3
 7036 00a6 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7037              		.loc 1 5006 6
 7038 00aa 7B6A     		ldr	r3, [r7, #36]
 7039 00ac DB6A     		ldr	r3, [r3, #44]
 7040 00ae 0122     		movs	r2, #1
 7041 00b0 9A40     		lsls	r2, r2, r3
 7042 00b2 1B4B     		ldr	r3, .L440+4
 7043 00b4 1B68     		ldr	r3, [r3]
 7044 00b6 1343     		orrs	r3, r3, r2
 7045 00b8 194A     		ldr	r2, .L440+4
 7046 00ba 1360     		str	r3, [r2]
 7047 00bc 7B6A     		ldr	r3, [r7, #36]
 7048 00be DA6A     		ldr	r2, [r3, #44]
 7049 00c0 1346     		mov	r3, r2
 7050 00c2 9B00     		lsls	r3, r3, #2
 7051 00c4 1344     		add	r3, r3, r2
 7052 00c6 9B00     		lsls	r3, r3, #2
 7053 00c8 164A     		ldr	r2, .L440+8
 7054 00ca 1A44     		add	r2, r2, r3
 7055 00cc 7B6A     		ldr	r3, [r7, #36]
 7056 00ce 0433     		adds	r3, r3, #4
 7057 00d0 1946     		mov	r1, r3
 7058 00d2 1046     		mov	r0, r2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 217


 7059 00d4 FFF7FEFF 		bl	vListInsertEnd
 7060 00d8 05E0     		b	.L438
 7061              	.L437:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7062              		.loc 1 5012 6
 7063 00da 7B6A     		ldr	r3, [r7, #36]
 7064 00dc 1833     		adds	r3, r3, #24
 7065 00de 1946     		mov	r1, r3
 7066 00e0 1148     		ldr	r0, .L440+12
 7067 00e2 FFF7FEFF 		bl	vListInsertEnd
 7068              	.L438:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7069              		.loc 1 5015 14
 7070 00e6 7B6A     		ldr	r3, [r7, #36]
 7071 00e8 DA6A     		ldr	r2, [r3, #44]
 7072              		.loc 1 5015 41
 7073 00ea 104B     		ldr	r3, .L440+16
 7074 00ec 1B68     		ldr	r3, [r3]
 7075 00ee DB6A     		ldr	r3, [r3, #44]
 7076              		.loc 1 5015 7
 7077 00f0 9A42     		cmp	r2, r3
 7078 00f2 08D9     		bls	.L434
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7079              		.loc 1 5019 8
 7080 00f4 3B68     		ldr	r3, [r7]
 7081 00f6 002B     		cmp	r3, #0
 7082 00f8 02D0     		beq	.L439
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7083              		.loc 1 5021 34
 7084 00fa 3B68     		ldr	r3, [r7]
 7085 00fc 0122     		movs	r2, #1
 7086 00fe 1A60     		str	r2, [r3]
 7087              	.L439:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7088              		.loc 1 5027 20
 7089 0100 0B4B     		ldr	r3, .L440+20
 7090 0102 0122     		movs	r2, #1
 7091 0104 1A60     		str	r2, [r3]
 7092              	.L434:
 7093 0106 3B6A     		ldr	r3, [r7, #32]
 7094 0108 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 218


 7095              	.LBB225:
 7096              	.LBB226:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 7097              		.loc 2 233 2
 7098 010a BB68     		ldr	r3, [r7, #8]
 7099              		.syntax unified
 7100              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7101 010c 83F31188 			msr basepri, r3	
 7102              	@ 0 "" 2
 7103              		.loc 2 237 1
 7104              		.thumb
 7105              		.syntax unified
 7106 0110 00BF     		nop
 7107              	.LBE226:
 7108              	.LBE225:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7109              		.loc 1 5036 2
 7110 0112 00BF     		nop
 7111 0114 2837     		adds	r7, r7, #40
 7112              	.LCFI261:
 7113              		.cfi_def_cfa_offset 8
 7114 0116 BD46     		mov	sp, r7
 7115              	.LCFI262:
 7116              		.cfi_def_cfa_register 13
 7117              		@ sp needed
 7118 0118 80BD     		pop	{r7, pc}
 7119              	.L441:
 7120 011a 00BF     		.align	2
 7121              	.L440:
 7122 011c 00000000 		.word	uxSchedulerSuspended
 7123 0120 00000000 		.word	uxTopReadyPriority
 7124 0124 00000000 		.word	pxReadyTasksLists
 7125 0128 00000000 		.word	xPendingReadyList
 7126 012c 00000000 		.word	pxCurrentTCB
 7127 0130 00000000 		.word	xYieldPending
 7128              		.cfi_endproc
 7129              	.LFE56:
 7131              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7132              		.align	1
 7133              		.global	xTaskNotifyStateClear
 7134              		.syntax unified
 7135              		.thumb
 7136              		.thumb_func
 7138              	xTaskNotifyStateClear:
 7139              	.LFB57:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 219


5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7140              		.loc 1 5045 2
 7141              		.cfi_startproc
 7142              		@ args = 0, pretend = 0, frame = 16
 7143              		@ frame_needed = 1, uses_anonymous_args = 0
 7144 0000 80B5     		push	{r7, lr}
 7145              	.LCFI263:
 7146              		.cfi_def_cfa_offset 8
 7147              		.cfi_offset 7, -8
 7148              		.cfi_offset 14, -4
 7149 0002 84B0     		sub	sp, sp, #16
 7150              	.LCFI264:
 7151              		.cfi_def_cfa_offset 24
 7152 0004 00AF     		add	r7, sp, #0
 7153              	.LCFI265:
 7154              		.cfi_def_cfa_register 7
 7155 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7156              		.loc 1 5051 11
 7157 0008 7B68     		ldr	r3, [r7, #4]
 7158 000a 002B     		cmp	r3, #0
 7159 000c 02D1     		bne	.L443
 7160              		.loc 1 5051 11 is_stmt 0 discriminator 1
 7161 000e 0E4B     		ldr	r3, .L448
 7162 0010 1B68     		ldr	r3, [r3]
 7163 0012 00E0     		b	.L444
 7164              	.L443:
 7165              		.loc 1 5051 11 discriminator 2
 7166 0014 7B68     		ldr	r3, [r7, #4]
 7167              	.L444:
 7168              		.loc 1 5051 9 is_stmt 1 discriminator 4
 7169 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7170              		.loc 1 5053 3 discriminator 4
 7171 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7172              		.loc 1 5055 13 discriminator 4
 7173 001c BB68     		ldr	r3, [r7, #8]
 7174 001e 93F87C34 		ldrb	r3, [r3, #1148]
 7175 0022 DBB2     		uxtb	r3, r3
 7176              		.loc 1 5055 6 discriminator 4
 7177 0024 022B     		cmp	r3, #2
 7178 0026 06D1     		bne	.L445
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7179              		.loc 1 5057 26
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 220


 7180 0028 BB68     		ldr	r3, [r7, #8]
 7181 002a 0022     		movs	r2, #0
 7182 002c 83F87C24 		strb	r2, [r3, #1148]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7183              		.loc 1 5058 13
 7184 0030 0123     		movs	r3, #1
 7185 0032 FB60     		str	r3, [r7, #12]
 7186 0034 01E0     		b	.L446
 7187              	.L445:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7188              		.loc 1 5062 13
 7189 0036 0023     		movs	r3, #0
 7190 0038 FB60     		str	r3, [r7, #12]
 7191              	.L446:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7192              		.loc 1 5065 3
 7193 003a FFF7FEFF 		bl	vPortExitCritical
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7194              		.loc 1 5067 10
 7195 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7196              		.loc 1 5068 2
 7197 0040 1846     		mov	r0, r3
 7198 0042 1037     		adds	r7, r7, #16
 7199              	.LCFI266:
 7200              		.cfi_def_cfa_offset 8
 7201 0044 BD46     		mov	sp, r7
 7202              	.LCFI267:
 7203              		.cfi_def_cfa_register 13
 7204              		@ sp needed
 7205 0046 80BD     		pop	{r7, pc}
 7206              	.L449:
 7207              		.align	2
 7208              	.L448:
 7209 0048 00000000 		.word	pxCurrentTCB
 7210              		.cfi_endproc
 7211              	.LFE57:
 7213              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7214              		.align	1
 7215              		.syntax unified
 7216              		.thumb
 7217              		.thumb_func
 7219              	prvAddCurrentTaskToDelayedList:
 7220              	.LFB58:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 221


5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7221              		.loc 1 5082 1
 7222              		.cfi_startproc
 7223              		@ args = 0, pretend = 0, frame = 16
 7224              		@ frame_needed = 1, uses_anonymous_args = 0
 7225 0000 80B5     		push	{r7, lr}
 7226              	.LCFI268:
 7227              		.cfi_def_cfa_offset 8
 7228              		.cfi_offset 7, -8
 7229              		.cfi_offset 14, -4
 7230 0002 84B0     		sub	sp, sp, #16
 7231              	.LCFI269:
 7232              		.cfi_def_cfa_offset 24
 7233 0004 00AF     		add	r7, sp, #0
 7234              	.LCFI270:
 7235              		.cfi_def_cfa_register 7
 7236 0006 7860     		str	r0, [r7, #4]
 7237 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7238              		.loc 1 5084 18
 7239 000a 294B     		ldr	r3, .L456
 7240 000c 1B68     		ldr	r3, [r3]
 7241 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7242              		.loc 1 5097 35
 7243 0010 284B     		ldr	r3, .L456+4
 7244 0012 1B68     		ldr	r3, [r3]
 7245              		.loc 1 5097 6
 7246 0014 0433     		adds	r3, r3, #4
 7247 0016 1846     		mov	r0, r3
 7248 0018 FFF7FEFF 		bl	uxListRemove
 7249 001c 0346     		mov	r3, r0
 7250              		.loc 1 5097 4
 7251 001e 002B     		cmp	r3, #0
 7252 0020 0BD1     		bne	.L451
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 222


5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 7253              		.loc 1 5101 3
 7254 0022 244B     		ldr	r3, .L456+4
 7255 0024 1B68     		ldr	r3, [r3]
 7256 0026 DB6A     		ldr	r3, [r3, #44]
 7257 0028 0122     		movs	r2, #1
 7258 002a 02FA03F3 		lsl	r3, r2, r3
 7259 002e DA43     		mvns	r2, r3
 7260 0030 214B     		ldr	r3, .L456+8
 7261 0032 1B68     		ldr	r3, [r3]
 7262 0034 1340     		ands	r3, r3, r2
 7263 0036 204A     		ldr	r2, .L456+8
 7264 0038 1360     		str	r3, [r2]
 7265              	.L451:
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7266              		.loc 1 5110 5
 7267 003a 7B68     		ldr	r3, [r7, #4]
 7268 003c B3F1FF3F 		cmp	r3, #-1
 7269 0040 0AD1     		bne	.L452
 7270              		.loc 1 5110 41 discriminator 1
 7271 0042 3B68     		ldr	r3, [r7]
 7272 0044 002B     		cmp	r3, #0
 7273 0046 07D0     		beq	.L452
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7274              		.loc 1 5115 56
 7275 0048 1A4B     		ldr	r3, .L456+4
 7276 004a 1B68     		ldr	r3, [r3]
 7277              		.loc 1 5115 4
 7278 004c 0433     		adds	r3, r3, #4
 7279 004e 1946     		mov	r1, r3
 7280 0050 1A48     		ldr	r0, .L456+12
 7281 0052 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 223


5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 224


5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7282              		.loc 1 5190 1
 7283 0056 26E0     		b	.L455
 7284              	.L452:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7285              		.loc 1 5122 16
 7286 0058 FA68     		ldr	r2, [r7, #12]
 7287 005a 7B68     		ldr	r3, [r7, #4]
 7288 005c 1344     		add	r3, r3, r2
 7289 005e BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7290              		.loc 1 5125 4
 7291 0060 144B     		ldr	r3, .L456+4
 7292 0062 1B68     		ldr	r3, [r3]
 7293 0064 BA68     		ldr	r2, [r7, #8]
 7294 0066 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7295              		.loc 1 5127 6
 7296 0068 BA68     		ldr	r2, [r7, #8]
 7297 006a FB68     		ldr	r3, [r7, #12]
 7298 006c 9A42     		cmp	r2, r3
 7299 006e 09D2     		bcs	.L454
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 7300              		.loc 1 5131 5
 7301 0070 134B     		ldr	r3, .L456+16
 7302 0072 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 7303              		.loc 1 5131 60
 7304 0074 0F4B     		ldr	r3, .L456+4
 7305 0076 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 7306              		.loc 1 5131 5
 7307 0078 0433     		adds	r3, r3, #4
 7308 007a 1946     		mov	r1, r3
 7309 007c 1046     		mov	r0, r2
 7310 007e FFF7FEFF 		bl	vListInsert
 7311              		.loc 1 5190 1
 7312 0082 10E0     		b	.L455
 7313              	.L454:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7314              		.loc 1 5137 5
 7315 0084 0F4B     		ldr	r3, .L456+20
 7316 0086 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7317              		.loc 1 5137 52
 7318 0088 0A4B     		ldr	r3, .L456+4
 7319 008a 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7320              		.loc 1 5137 5
 7321 008c 0433     		adds	r3, r3, #4
 7322 008e 1946     		mov	r1, r3
 7323 0090 1046     		mov	r0, r2
 7324 0092 FFF7FEFF 		bl	vListInsert
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 225


5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 7325              		.loc 1 5142 21
 7326 0096 0C4B     		ldr	r3, .L456+24
 7327 0098 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 7328              		.loc 1 5142 7
 7329 009a BA68     		ldr	r2, [r7, #8]
 7330 009c 9A42     		cmp	r2, r3
 7331 009e 02D2     		bcs	.L455
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 7332              		.loc 1 5144 27
 7333 00a0 094A     		ldr	r2, .L456+24
 7334 00a2 BB68     		ldr	r3, [r7, #8]
 7335 00a4 1360     		str	r3, [r2]
 7336              	.L455:
 7337              		.loc 1 5190 1
 7338 00a6 00BF     		nop
 7339 00a8 1037     		adds	r7, r7, #16
 7340              	.LCFI271:
 7341              		.cfi_def_cfa_offset 8
 7342 00aa BD46     		mov	sp, r7
 7343              	.LCFI272:
 7344              		.cfi_def_cfa_register 13
 7345              		@ sp needed
 7346 00ac 80BD     		pop	{r7, pc}
 7347              	.L457:
 7348 00ae 00BF     		.align	2
 7349              	.L456:
 7350 00b0 00000000 		.word	xTickCount
 7351 00b4 00000000 		.word	pxCurrentTCB
 7352 00b8 00000000 		.word	uxTopReadyPriority
 7353 00bc 00000000 		.word	xSuspendedTaskList
 7354 00c0 00000000 		.word	pxOverflowDelayedTaskList
 7355 00c4 00000000 		.word	pxDelayedTaskList
 7356 00c8 00000000 		.word	xNextTaskUnblockTime
 7357              		.cfi_endproc
 7358              	.LFE58:
 7360              		.text
 7361              	.Letext0:
 7362              		.file 3 "d:\\3.tools\\arm_gcc_toolchain\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 7363              		.file 4 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 7364              		.file 5 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 7365              		.file 6 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 7366              		.file 7 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 7367              		.file 8 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 7368              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 7369              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 7370              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 7371              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 226


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:21     .bss.pxCurrentTCB:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:27     .bss.pxReadyTasksLists:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:33     .bss.xDelayedTaskList1:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:39     .bss.xDelayedTaskList2:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:45     .bss.pxDelayedTaskList:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:57     .bss.xPendingReadyList:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:63     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:75     .bss.xSuspendedTaskList:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:81     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:87     .bss.xTickCount:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:90     .bss.xTickCount:00000000 xTickCount
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:93     .bss.uxTopReadyPriority:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:99     .bss.xSchedulerRunning:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:105    .bss.uxPendedTicks:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:108    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:111    .bss.xYieldPending:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:114    .bss.xYieldPending:00000000 xYieldPending
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:117    .bss.xNumOfOverflows:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:123    .bss.uxTaskNumber:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:126    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:129    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:135    .bss.xIdleTaskHandle:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:141    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:147    .text.xTaskCreateStatic:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:153    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:444    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:711    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:325    .text.xTaskCreate:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:331    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:439    .text.prvInitialiseNewTask:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:706    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4771   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:852    .text.prvAddNewTaskToReadyList:000000b8 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:863    .text.vTaskDelete:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:869    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4951   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 227


C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5052   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1058   .text.vTaskDelete:000000fc $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1072   .text.vTaskDelay:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1078   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2519   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7219   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2565   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1173   .text.vTaskDelay:00000064 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1179   .text.uxTaskPriorityGet:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1185   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1240   .text.uxTaskPriorityGet:00000030 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1245   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1251   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1344   .text.uxTaskPriorityGetFromISR:00000058 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1349   .text.vTaskPrioritySet:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1355   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1598   .text.vTaskPrioritySet:00000148 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1606   .text.vTaskSuspend:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1612   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3618   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1814   .text.vTaskSuspend:00000108 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1826   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1831   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1926   .text.prvTaskIsTaskSuspended:00000060 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1932   .text.vTaskResume:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:1938   .text.vTaskResume:00000000 vTaskResume
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2075   .text.vTaskResume:000000b0 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2083   .text.xTaskResumeFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2089   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2262   .text.xTaskResumeFromISR:000000d8 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2271   .rodata:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2275   .text.vTaskStartScheduler:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2281   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2434   .text.vTaskStartScheduler:000000bc $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4710   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2446   .text.vTaskEndScheduler:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2452   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2508   .text.vTaskEndScheduler:00000030 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2513   .text.vTaskSuspendAll:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2554   .text.vTaskSuspendAll:00000018 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2559   .text.xTaskResumeAll:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3037   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2782   .text.xTaskResumeAll:00000118 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2795   .text.xTaskGetTickCount:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2801   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2841   .text.xTaskGetTickCount:0000001c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2846   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2852   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2893   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2898   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2904   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2935   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2940   .text.pcTaskGetName:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:2946   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3026   .text.pcTaskGetName:00000048 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3031   .text.xTaskIncrementTick:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3281   .text.xTaskIncrementTick:00000148 $d
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 228


C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3296   .text.vTaskSetApplicationTaskTag:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3302   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3356   .text.vTaskSetApplicationTaskTag:00000034 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3361   .text.xTaskGetApplicationTaskTag:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3367   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3422   .text.xTaskGetApplicationTaskTag:00000030 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3427   .text.xTaskGetApplicationTaskTagFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3433   .text.xTaskGetApplicationTaskTagFromISR:00000000 xTaskGetApplicationTaskTagFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3528   .text.xTaskGetApplicationTaskTagFromISR:00000058 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3533   .text.xTaskCallApplicationTaskHook:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3539   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3607   .text.xTaskCallApplicationTaskHook:00000040 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3612   .text.vTaskSwitchContext:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3813   .text.vTaskSwitchContext:000000fc $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3823   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3829   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3901   .text.vTaskPlaceOnEventList:00000048 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3906   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:3912   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4020   .text.vTaskPlaceOnUnorderedEventList:00000078 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4026   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4032   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4170   .text.xTaskRemoveFromEventList:000000b0 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4180   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4186   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4330   .text.vTaskRemoveFromUnorderedEventList:000000b8 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4339   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4345   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4418   .text.vTaskSetTimeOutState:00000048 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4424   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4430   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4475   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4481   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4487   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4656   .text.xTaskCheckForTimeOut:000000c4 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4662   .text.vTaskMissedYield:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4668   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4700   .text.vTaskMissedYield:00000014 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4705   .text.prvIdleTask:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4866   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4760   .text.prvIdleTask:0000002c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4766   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4849   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4861   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4939   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:4946   .text.prvDeleteTCB:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5047   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5114   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5120   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5126   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5166   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5171   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5177   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5239   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5245   .text.xTaskPriorityInherit:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5251   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5424   .text.xTaskPriorityInherit:000000f4 $d
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 229


C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5431   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5437   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5633   .text.xTaskPriorityDisinherit:00000108 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5640   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5646   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5868   .text.vTaskPriorityDisinheritAfterTimeout:00000130 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5875   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5881   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5931   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5936   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5942   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5987   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5992   .text.ulTaskNotifyTake:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:5998   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6112   .text.ulTaskNotifyTake:00000090 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6118   .text.xTaskNotifyWait:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6124   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6259   .text.xTaskNotifyWait:000000b8 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6265   .text.xTaskGenericNotify:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6271   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6356   .text.xTaskGenericNotify:00000068 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6361   .text.xTaskGenericNotify:0000007c $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6545   .text.xTaskGenericNotify:00000178 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6553   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6559   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6668   .text.xTaskGenericNotifyFromISR:0000008c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6673   .text.xTaskGenericNotifyFromISR:000000a0 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6886   .text.xTaskGenericNotifyFromISR:000001c0 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6896   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:6902   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7122   .text.vTaskNotifyGiveFromISR:0000011c $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7132   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7138   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7209   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7214   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s:7350   .text.prvAddCurrentTaskToDelayedList:000000b0 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
_impure_ptr
vPortEndScheduler
vApplicationStackOverflowHook
vListInsert
vApplicationIdleHook
vListInitialise
_reclaim_reent
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccCx6jGn.s 			page 230


