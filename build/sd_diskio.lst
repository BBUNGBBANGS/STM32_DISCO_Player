ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"sd_diskio.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.Stat,"aw"
  22              	Stat:
  23 0000 01       		.byte	1
  24              		.section	.bss.SDQueueID,"aw",%nobits
  25              		.align	2
  28              	SDQueueID:
  29 0000 00000000 		.space	4
  30              		.global	SD_Driver
  31              		.section	.rodata.SD_Driver,"a"
  32              		.align	2
  35              	SD_Driver:
  36 0000 00000000 		.word	SD_initialize
  37 0004 00000000 		.word	SD_status
  38 0008 00000000 		.word	SD_read
  39 000c 00000000 		.word	SD_write
  40 0010 00000000 		.word	SD_ioctl
  41              		.section	.text.SD_CheckStatusWithTimeout,"ax",%progbits
  42              		.align	1
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  47              	SD_CheckStatusWithTimeout:
  48              	.LFB149:
  49              		.file 1 "FATFS/Target/sd_diskio.c"
   1:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN Header */
   2:FATFS/Target/sd_diskio.c **** /**
   3:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   4:FATFS/Target/sd_diskio.c ****   * @file    sd_diskio.c
   5:FATFS/Target/sd_diskio.c ****   * @brief   SD Disk I/O driver
   6:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   7:FATFS/Target/sd_diskio.c ****   * @attention
   8:FATFS/Target/sd_diskio.c ****   *
   9:FATFS/Target/sd_diskio.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:FATFS/Target/sd_diskio.c ****   * All rights reserved.
  11:FATFS/Target/sd_diskio.c ****   *
  12:FATFS/Target/sd_diskio.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:FATFS/Target/sd_diskio.c ****   * in the root directory of this software component.
  14:FATFS/Target/sd_diskio.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:FATFS/Target/sd_diskio.c ****   *
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 2


  16:FATFS/Target/sd_diskio.c ****   ******************************************************************************
  17:FATFS/Target/sd_diskio.c ****   */
  18:FATFS/Target/sd_diskio.c **** /* USER CODE END Header */
  19:FATFS/Target/sd_diskio.c **** 
  20:FATFS/Target/sd_diskio.c **** /* Note: code generation based on sd_diskio_dma_rtos_template_bspv1.c v2.1.4
  21:FATFS/Target/sd_diskio.c ****    as FreeRTOS is enabled. */
  22:FATFS/Target/sd_diskio.c **** 
  23:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN firstSection */
  24:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  25:FATFS/Target/sd_diskio.c **** /* USER CODE END firstSection*/
  26:FATFS/Target/sd_diskio.c **** 
  27:FATFS/Target/sd_diskio.c **** /* Includes ------------------------------------------------------------------*/
  28:FATFS/Target/sd_diskio.c **** #include "ff_gen_drv.h"
  29:FATFS/Target/sd_diskio.c **** #include "sd_diskio.h"
  30:FATFS/Target/sd_diskio.c **** 
  31:FATFS/Target/sd_diskio.c **** #include <string.h>
  32:FATFS/Target/sd_diskio.c **** #include <stdio.h>
  33:FATFS/Target/sd_diskio.c **** 
  34:FATFS/Target/sd_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  35:FATFS/Target/sd_diskio.c **** /* Private define ------------------------------------------------------------*/
  36:FATFS/Target/sd_diskio.c **** 
  37:FATFS/Target/sd_diskio.c **** #define QUEUE_SIZE         (uint32_t) 10
  38:FATFS/Target/sd_diskio.c **** #define READ_CPLT_MSG      (uint32_t) 1
  39:FATFS/Target/sd_diskio.c **** #define WRITE_CPLT_MSG     (uint32_t) 2
  40:FATFS/Target/sd_diskio.c **** /*
  41:FATFS/Target/sd_diskio.c **** ==================================================================
  42:FATFS/Target/sd_diskio.c **** enable the defines below to send custom rtos messages
  43:FATFS/Target/sd_diskio.c **** when an error or an abort occurs.
  44:FATFS/Target/sd_diskio.c **** Notice: depending on the HAL/SD driver the HAL_SD_ErrorCallback()
  45:FATFS/Target/sd_diskio.c **** may not be available.
  46:FATFS/Target/sd_diskio.c **** See BSP_SD_ErrorCallback() and BSP_SD_AbortCallback() below
  47:FATFS/Target/sd_diskio.c **** ==================================================================
  48:FATFS/Target/sd_diskio.c **** 
  49:FATFS/Target/sd_diskio.c **** #define RW_ERROR_MSG       (uint32_t) 3
  50:FATFS/Target/sd_diskio.c **** #define RW_ABORT_MSG       (uint32_t) 4
  51:FATFS/Target/sd_diskio.c **** */
  52:FATFS/Target/sd_diskio.c **** /*
  53:FATFS/Target/sd_diskio.c ****  * the following Timeout is useful to give the control back to the applications
  54:FATFS/Target/sd_diskio.c ****  * in case of errors in either BSP_SD_ReadCpltCallback() or BSP_SD_WriteCpltCallback()
  55:FATFS/Target/sd_diskio.c ****  * the value by default is as defined in the BSP platform driver otherwise 30 secs
  56:FATFS/Target/sd_diskio.c ****  */
  57:FATFS/Target/sd_diskio.c **** #define SD_TIMEOUT 30 * 1000
  58:FATFS/Target/sd_diskio.c **** 
  59:FATFS/Target/sd_diskio.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  60:FATFS/Target/sd_diskio.c **** 
  61:FATFS/Target/sd_diskio.c **** /*
  62:FATFS/Target/sd_diskio.c ****  * Depending on the use case, the SD card initialization could be done at the
  63:FATFS/Target/sd_diskio.c ****  * application level: if it is the case define the flag below to disable
  64:FATFS/Target/sd_diskio.c ****  * the BSP_SD_Init() call in the SD_Initialize() and add a call to
  65:FATFS/Target/sd_diskio.c ****  * BSP_SD_Init() elsewhere in the application.
  66:FATFS/Target/sd_diskio.c ****  */
  67:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN disableSDInit */
  68:FATFS/Target/sd_diskio.c **** /* #define DISABLE_SD_INIT */
  69:FATFS/Target/sd_diskio.c **** /* USER CODE END disableSDInit */
  70:FATFS/Target/sd_diskio.c **** 
  71:FATFS/Target/sd_diskio.c **** /*
  72:FATFS/Target/sd_diskio.c ****  * when using cacheable memory region, it may be needed to maintain the cache
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 3


  73:FATFS/Target/sd_diskio.c ****  * validity. Enable the define below to activate a cache maintenance at each
  74:FATFS/Target/sd_diskio.c ****  * read and write operation.
  75:FATFS/Target/sd_diskio.c ****  * Notice: This is applicable only for cortex M7 based platform.
  76:FATFS/Target/sd_diskio.c ****  */
  77:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
  78:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 */
  79:FATFS/Target/sd_diskio.c **** /* USER CODE END enableSDDmaCacheMaintenance */
  80:FATFS/Target/sd_diskio.c **** 
  81:FATFS/Target/sd_diskio.c **** /*
  82:FATFS/Target/sd_diskio.c **** * Some DMA requires 4-Byte aligned address buffer to correctly read/write data,
  83:FATFS/Target/sd_diskio.c **** * in FatFs some accesses aren't thus we need a 4-byte aligned scratch buffer to correctly
  84:FATFS/Target/sd_diskio.c **** * transfer data
  85:FATFS/Target/sd_diskio.c **** */
  86:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableScratchBuffer */
  87:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SCRATCH_BUFFER */
  88:FATFS/Target/sd_diskio.c **** /* USER CODE END enableScratchBuffer */
  89:FATFS/Target/sd_diskio.c **** 
  90:FATFS/Target/sd_diskio.c **** /* Private variables ---------------------------------------------------------*/
  91:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
  92:FATFS/Target/sd_diskio.c **** #if defined (ENABLE_SD_DMA_CACHE_MAINTENANCE)
  93:FATFS/Target/sd_diskio.c **** ALIGN_32BYTES(static uint8_t scratch[BLOCKSIZE]); // 32-Byte aligned for cache maintenance
  94:FATFS/Target/sd_diskio.c **** #else
  95:FATFS/Target/sd_diskio.c **** __ALIGN_BEGIN static uint8_t scratch[BLOCKSIZE] __ALIGN_END;
  96:FATFS/Target/sd_diskio.c **** #endif
  97:FATFS/Target/sd_diskio.c **** #endif
  98:FATFS/Target/sd_diskio.c **** /* Disk status */
  99:FATFS/Target/sd_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
 100:FATFS/Target/sd_diskio.c **** 
 101:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 102:FATFS/Target/sd_diskio.c **** static osMessageQId SDQueueID = NULL;
 103:FATFS/Target/sd_diskio.c **** #else
 104:FATFS/Target/sd_diskio.c **** static osMessageQueueId_t SDQueueID = NULL;
 105:FATFS/Target/sd_diskio.c **** #endif
 106:FATFS/Target/sd_diskio.c **** /* Private function prototypes -----------------------------------------------*/
 107:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun);
 108:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize (BYTE);
 109:FATFS/Target/sd_diskio.c **** DSTATUS SD_status (BYTE);
 110:FATFS/Target/sd_diskio.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
 111:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 112:FATFS/Target/sd_diskio.c **** DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
 113:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 114:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 115:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl (BYTE, BYTE, void*);
 116:FATFS/Target/sd_diskio.c **** #endif  /* _USE_IOCTL == 1 */
 117:FATFS/Target/sd_diskio.c **** 
 118:FATFS/Target/sd_diskio.c **** const Diskio_drvTypeDef  SD_Driver =
 119:FATFS/Target/sd_diskio.c **** {
 120:FATFS/Target/sd_diskio.c ****   SD_initialize,
 121:FATFS/Target/sd_diskio.c ****   SD_status,
 122:FATFS/Target/sd_diskio.c ****   SD_read,
 123:FATFS/Target/sd_diskio.c **** #if  _USE_WRITE == 1
 124:FATFS/Target/sd_diskio.c ****   SD_write,
 125:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 126:FATFS/Target/sd_diskio.c **** 
 127:FATFS/Target/sd_diskio.c **** #if  _USE_IOCTL == 1
 128:FATFS/Target/sd_diskio.c ****   SD_ioctl,
 129:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 4


 130:FATFS/Target/sd_diskio.c **** };
 131:FATFS/Target/sd_diskio.c **** 
 132:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
 133:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new code */
 134:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeFunctionSection */
 135:FATFS/Target/sd_diskio.c **** 
 136:FATFS/Target/sd_diskio.c **** /* Private functions ---------------------------------------------------------*/
 137:FATFS/Target/sd_diskio.c **** 
 138:FATFS/Target/sd_diskio.c **** static int SD_CheckStatusWithTimeout(uint32_t timeout)
 139:FATFS/Target/sd_diskio.c **** {
  50              		.loc 1 139 1
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 16
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 84B0     		sub	sp, sp, #16
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 24
  62 0004 00AF     		add	r7, sp, #0
  63              	.LCFI2:
  64              		.cfi_def_cfa_register 7
  65 0006 7860     		str	r0, [r7, #4]
 140:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 141:FATFS/Target/sd_diskio.c ****   /* block until SDIO peripheral is ready again or a timeout occur */
 142:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 143:FATFS/Target/sd_diskio.c ****   timer = osKernelSysTick();
  66              		.loc 1 143 11
  67 0008 FFF7FEFF 		bl	osKernelSysTick
  68 000c F860     		str	r0, [r7, #12]
 144:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
  69              		.loc 1 144 8
  70 000e 06E0     		b	.L2
  71              	.L4:
 145:FATFS/Target/sd_diskio.c **** #else
 146:FATFS/Target/sd_diskio.c ****   timer = osKernelGetTickCount();
 147:FATFS/Target/sd_diskio.c ****   while( osKernelGetTickCount() - timer < timeout)
 148:FATFS/Target/sd_diskio.c **** #endif
 149:FATFS/Target/sd_diskio.c ****   {
 150:FATFS/Target/sd_diskio.c ****     if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
  72              		.loc 1 150 9
  73 0010 FFF7FEFF 		bl	BSP_SD_GetCardState
  74 0014 0346     		mov	r3, r0
  75              		.loc 1 150 8
  76 0016 002B     		cmp	r3, #0
  77 0018 01D1     		bne	.L2
 151:FATFS/Target/sd_diskio.c ****     {
 152:FATFS/Target/sd_diskio.c ****       return 0;
  78              		.loc 1 152 14
  79 001a 0023     		movs	r3, #0
  80 001c 09E0     		b	.L3
  81              	.L2:
 144:FATFS/Target/sd_diskio.c **** #else
  82              		.loc 1 144 10
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 5


  83 001e FFF7FEFF 		bl	osKernelSysTick
  84 0022 0246     		mov	r2, r0
 144:FATFS/Target/sd_diskio.c **** #else
  85              		.loc 1 144 28
  86 0024 FB68     		ldr	r3, [r7, #12]
  87 0026 D31A     		subs	r3, r2, r3
 144:FATFS/Target/sd_diskio.c **** #else
  88              		.loc 1 144 8
  89 0028 7A68     		ldr	r2, [r7, #4]
  90 002a 9A42     		cmp	r2, r3
  91 002c F0D8     		bhi	.L4
 153:FATFS/Target/sd_diskio.c ****     }
 154:FATFS/Target/sd_diskio.c ****   }
 155:FATFS/Target/sd_diskio.c **** 
 156:FATFS/Target/sd_diskio.c ****   return -1;
  92              		.loc 1 156 10
  93 002e 4FF0FF33 		mov	r3, #-1
  94              	.L3:
 157:FATFS/Target/sd_diskio.c **** }
  95              		.loc 1 157 1
  96 0032 1846     		mov	r0, r3
  97 0034 1037     		adds	r7, r7, #16
  98              	.LCFI3:
  99              		.cfi_def_cfa_offset 8
 100 0036 BD46     		mov	sp, r7
 101              	.LCFI4:
 102              		.cfi_def_cfa_register 13
 103              		@ sp needed
 104 0038 80BD     		pop	{r7, pc}
 105              		.cfi_endproc
 106              	.LFE149:
 108              		.section	.text.SD_CheckStatus,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 114              	SD_CheckStatus:
 115              	.LFB150:
 158:FATFS/Target/sd_diskio.c **** 
 159:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun)
 160:FATFS/Target/sd_diskio.c **** {
 116              		.loc 1 160 1
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 8
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120 0000 80B5     		push	{r7, lr}
 121              	.LCFI5:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 82B0     		sub	sp, sp, #8
 126              	.LCFI6:
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              	.LCFI7:
 130              		.cfi_def_cfa_register 7
 131 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 6


 132 0008 FB71     		strb	r3, [r7, #7]
 161:FATFS/Target/sd_diskio.c ****   Stat = STA_NOINIT;
 133              		.loc 1 161 8
 134 000a 0B4B     		ldr	r3, .L8
 135 000c 0122     		movs	r2, #1
 136 000e 1A70     		strb	r2, [r3]
 162:FATFS/Target/sd_diskio.c **** 
 163:FATFS/Target/sd_diskio.c ****   if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 137              		.loc 1 163 6
 138 0010 FFF7FEFF 		bl	BSP_SD_GetCardState
 139 0014 0346     		mov	r3, r0
 140              		.loc 1 163 5
 141 0016 002B     		cmp	r3, #0
 142 0018 07D1     		bne	.L6
 164:FATFS/Target/sd_diskio.c ****   {
 165:FATFS/Target/sd_diskio.c ****     Stat &= ~STA_NOINIT;
 143              		.loc 1 165 10
 144 001a 074B     		ldr	r3, .L8
 145 001c 1B78     		ldrb	r3, [r3]
 146 001e DBB2     		uxtb	r3, r3
 147 0020 23F00103 		bic	r3, r3, #1
 148 0024 DAB2     		uxtb	r2, r3
 149 0026 044B     		ldr	r3, .L8
 150 0028 1A70     		strb	r2, [r3]
 151              	.L6:
 166:FATFS/Target/sd_diskio.c ****   }
 167:FATFS/Target/sd_diskio.c **** 
 168:FATFS/Target/sd_diskio.c ****   return Stat;
 152              		.loc 1 168 10
 153 002a 034B     		ldr	r3, .L8
 154 002c 1B78     		ldrb	r3, [r3]
 155 002e DBB2     		uxtb	r3, r3
 169:FATFS/Target/sd_diskio.c **** }
 156              		.loc 1 169 1
 157 0030 1846     		mov	r0, r3
 158 0032 0837     		adds	r7, r7, #8
 159              	.LCFI8:
 160              		.cfi_def_cfa_offset 8
 161 0034 BD46     		mov	sp, r7
 162              	.LCFI9:
 163              		.cfi_def_cfa_register 13
 164              		@ sp needed
 165 0036 80BD     		pop	{r7, pc}
 166              	.L9:
 167              		.align	2
 168              	.L8:
 169 0038 00000000 		.word	Stat
 170              		.cfi_endproc
 171              	.LFE150:
 173              		.section	.rodata
 174              		.align	2
 175              	.LC0:
 176 0000 0A000000 		.word	10
 177 0004 02000000 		.word	2
 178 0008 00000000 		.word	0
 179 000c 00000000 		.word	0
 180              		.section	.text.SD_initialize,"ax",%progbits
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 7


 181              		.align	1
 182              		.global	SD_initialize
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	SD_initialize:
 188              	.LFB151:
 170:FATFS/Target/sd_diskio.c **** 
 171:FATFS/Target/sd_diskio.c **** /**
 172:FATFS/Target/sd_diskio.c ****   * @brief  Initializes a Drive
 173:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 174:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 175:FATFS/Target/sd_diskio.c ****   */
 176:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize(BYTE lun)
 177:FATFS/Target/sd_diskio.c **** {
 189              		.loc 1 177 1
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 24
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 90B5     		push	{r4, r7, lr}
 194              	.LCFI10:
 195              		.cfi_def_cfa_offset 12
 196              		.cfi_offset 4, -12
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 87B0     		sub	sp, sp, #28
 200              	.LCFI11:
 201              		.cfi_def_cfa_offset 40
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI12:
 204              		.cfi_def_cfa_register 7
 205 0006 0346     		mov	r3, r0
 206 0008 FB71     		strb	r3, [r7, #7]
 178:FATFS/Target/sd_diskio.c **** Stat = STA_NOINIT;
 207              		.loc 1 178 6
 208 000a 204B     		ldr	r3, .L15
 209 000c 0122     		movs	r2, #1
 210 000e 1A70     		strb	r2, [r3]
 179:FATFS/Target/sd_diskio.c **** 
 180:FATFS/Target/sd_diskio.c ****   /*
 181:FATFS/Target/sd_diskio.c ****    * check that the kernel has been started before continuing
 182:FATFS/Target/sd_diskio.c ****    * as the osMessage API will fail otherwise
 183:FATFS/Target/sd_diskio.c ****    */
 184:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 185:FATFS/Target/sd_diskio.c ****   if(osKernelRunning())
 211              		.loc 1 185 6
 212 0010 FFF7FEFF 		bl	osKernelRunning
 213 0014 0346     		mov	r3, r0
 214              		.loc 1 185 5
 215 0016 002B     		cmp	r3, #0
 216 0018 30D0     		beq	.L11
 186:FATFS/Target/sd_diskio.c **** #else
 187:FATFS/Target/sd_diskio.c ****   if(osKernelGetState() == osKernelRunning)
 188:FATFS/Target/sd_diskio.c **** #endif
 189:FATFS/Target/sd_diskio.c ****   {
 190:FATFS/Target/sd_diskio.c **** #if !defined(DISABLE_SD_INIT)
 191:FATFS/Target/sd_diskio.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 8


 192:FATFS/Target/sd_diskio.c ****     if(BSP_SD_Init() == MSD_OK)
 217              		.loc 1 192 8
 218 001a FFF7FEFF 		bl	BSP_SD_Init
 219 001e 0346     		mov	r3, r0
 220              		.loc 1 192 7
 221 0020 002B     		cmp	r3, #0
 222 0022 07D1     		bne	.L12
 193:FATFS/Target/sd_diskio.c ****     {
 194:FATFS/Target/sd_diskio.c ****       Stat = SD_CheckStatus(lun);
 223              		.loc 1 194 14
 224 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 225 0026 1846     		mov	r0, r3
 226 0028 FFF7FEFF 		bl	SD_CheckStatus
 227 002c 0346     		mov	r3, r0
 228 002e 1A46     		mov	r2, r3
 229              		.loc 1 194 12
 230 0030 164B     		ldr	r3, .L15
 231 0032 1A70     		strb	r2, [r3]
 232              	.L12:
 195:FATFS/Target/sd_diskio.c ****     }
 196:FATFS/Target/sd_diskio.c **** 
 197:FATFS/Target/sd_diskio.c **** #else
 198:FATFS/Target/sd_diskio.c ****     Stat = SD_CheckStatus(lun);
 199:FATFS/Target/sd_diskio.c **** #endif
 200:FATFS/Target/sd_diskio.c **** 
 201:FATFS/Target/sd_diskio.c ****     /*
 202:FATFS/Target/sd_diskio.c ****     * if the SD is correctly initialized, create the operation queue
 203:FATFS/Target/sd_diskio.c ****     * if not already created
 204:FATFS/Target/sd_diskio.c ****     */
 205:FATFS/Target/sd_diskio.c **** 
 206:FATFS/Target/sd_diskio.c ****     if (Stat != STA_NOINIT)
 233              		.loc 1 206 14
 234 0034 154B     		ldr	r3, .L15
 235 0036 1B78     		ldrb	r3, [r3]
 236 0038 DBB2     		uxtb	r3, r3
 237              		.loc 1 206 8
 238 003a 012B     		cmp	r3, #1
 239 003c 1ED0     		beq	.L11
 207:FATFS/Target/sd_diskio.c ****     {
 208:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 240              		.loc 1 208 21
 241 003e 144B     		ldr	r3, .L15+4
 242 0040 1B68     		ldr	r3, [r3]
 243              		.loc 1 208 10
 244 0042 002B     		cmp	r3, #0
 245 0044 0ED1     		bne	.L13
 246              	.LBB2:
 209:FATFS/Target/sd_diskio.c ****       {
 210:FATFS/Target/sd_diskio.c ****  #if (osCMSIS <= 0x20000U)
 211:FATFS/Target/sd_diskio.c ****       osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 247              		.loc 1 211 7
 248 0046 134B     		ldr	r3, .L15+8
 249 0048 07F10804 		add	r4, r7, #8
 250 004c 0FCB     		ldm	r3, {r0, r1, r2, r3}
 251 004e 84E80F00 		stm	r4, {r0, r1, r2, r3}
 212:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 252              		.loc 1 212 19
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 9


 253 0052 07F10803 		add	r3, r7, #8
 254 0056 0021     		movs	r1, #0
 255 0058 1846     		mov	r0, r3
 256 005a FFF7FEFF 		bl	osMessageCreate
 257 005e 0346     		mov	r3, r0
 258              		.loc 1 212 17
 259 0060 0B4A     		ldr	r2, .L15+4
 260 0062 1360     		str	r3, [r2]
 261              	.L13:
 262              	.LBE2:
 213:FATFS/Target/sd_diskio.c **** #else
 214:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 215:FATFS/Target/sd_diskio.c **** #endif
 216:FATFS/Target/sd_diskio.c ****       }
 217:FATFS/Target/sd_diskio.c **** 
 218:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 263              		.loc 1 218 21
 264 0064 0A4B     		ldr	r3, .L15+4
 265 0066 1B68     		ldr	r3, [r3]
 266              		.loc 1 218 10
 267 0068 002B     		cmp	r3, #0
 268 006a 07D1     		bne	.L11
 219:FATFS/Target/sd_diskio.c ****       {
 220:FATFS/Target/sd_diskio.c ****         Stat |= STA_NOINIT;
 269              		.loc 1 220 14
 270 006c 074B     		ldr	r3, .L15
 271 006e 1B78     		ldrb	r3, [r3]
 272 0070 DBB2     		uxtb	r3, r3
 273 0072 43F00103 		orr	r3, r3, #1
 274 0076 DAB2     		uxtb	r2, r3
 275 0078 044B     		ldr	r3, .L15
 276 007a 1A70     		strb	r2, [r3]
 277              	.L11:
 221:FATFS/Target/sd_diskio.c ****       }
 222:FATFS/Target/sd_diskio.c ****     }
 223:FATFS/Target/sd_diskio.c ****   }
 224:FATFS/Target/sd_diskio.c **** 
 225:FATFS/Target/sd_diskio.c ****   return Stat;
 278              		.loc 1 225 10
 279 007c 034B     		ldr	r3, .L15
 280 007e 1B78     		ldrb	r3, [r3]
 281 0080 DBB2     		uxtb	r3, r3
 226:FATFS/Target/sd_diskio.c **** }
 282              		.loc 1 226 1
 283 0082 1846     		mov	r0, r3
 284 0084 1C37     		adds	r7, r7, #28
 285              	.LCFI13:
 286              		.cfi_def_cfa_offset 12
 287 0086 BD46     		mov	sp, r7
 288              	.LCFI14:
 289              		.cfi_def_cfa_register 13
 290              		@ sp needed
 291 0088 90BD     		pop	{r4, r7, pc}
 292              	.L16:
 293 008a 00BF     		.align	2
 294              	.L15:
 295 008c 00000000 		.word	Stat
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 10


 296 0090 00000000 		.word	SDQueueID
 297 0094 00000000 		.word	.LC0
 298              		.cfi_endproc
 299              	.LFE151:
 301              		.section	.text.SD_status,"ax",%progbits
 302              		.align	1
 303              		.global	SD_status
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 308              	SD_status:
 309              	.LFB152:
 227:FATFS/Target/sd_diskio.c **** 
 228:FATFS/Target/sd_diskio.c **** /**
 229:FATFS/Target/sd_diskio.c ****   * @brief  Gets Disk Status
 230:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 231:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 232:FATFS/Target/sd_diskio.c ****   */
 233:FATFS/Target/sd_diskio.c **** DSTATUS SD_status(BYTE lun)
 234:FATFS/Target/sd_diskio.c **** {
 310              		.loc 1 234 1
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 8
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314 0000 80B5     		push	{r7, lr}
 315              	.LCFI15:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 7, -8
 318              		.cfi_offset 14, -4
 319 0002 82B0     		sub	sp, sp, #8
 320              	.LCFI16:
 321              		.cfi_def_cfa_offset 16
 322 0004 00AF     		add	r7, sp, #0
 323              	.LCFI17:
 324              		.cfi_def_cfa_register 7
 325 0006 0346     		mov	r3, r0
 326 0008 FB71     		strb	r3, [r7, #7]
 235:FATFS/Target/sd_diskio.c ****   return SD_CheckStatus(lun);
 327              		.loc 1 235 10
 328 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 329 000c 1846     		mov	r0, r3
 330 000e FFF7FEFF 		bl	SD_CheckStatus
 331 0012 0346     		mov	r3, r0
 236:FATFS/Target/sd_diskio.c **** }
 332              		.loc 1 236 1
 333 0014 1846     		mov	r0, r3
 334 0016 0837     		adds	r7, r7, #8
 335              	.LCFI18:
 336              		.cfi_def_cfa_offset 8
 337 0018 BD46     		mov	sp, r7
 338              	.LCFI19:
 339              		.cfi_def_cfa_register 13
 340              		@ sp needed
 341 001a 80BD     		pop	{r7, pc}
 342              		.cfi_endproc
 343              	.LFE152:
 345              		.section	.text.SD_read,"ax",%progbits
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 11


 346              		.align	1
 347              		.global	SD_read
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 352              	SD_read:
 353              	.LFB153:
 237:FATFS/Target/sd_diskio.c **** 
 238:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 239:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 240:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeReadSection */
 241:FATFS/Target/sd_diskio.c **** /**
 242:FATFS/Target/sd_diskio.c ****   * @brief  Reads Sector(s)
 243:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 244:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data buffer to store read data
 245:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 246:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 247:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 248:FATFS/Target/sd_diskio.c ****   */
 249:FATFS/Target/sd_diskio.c **** 
 250:FATFS/Target/sd_diskio.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 251:FATFS/Target/sd_diskio.c **** {
 354              		.loc 1 251 1
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 40
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 80B5     		push	{r7, lr}
 359              	.LCFI20:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 8AB0     		sub	sp, sp, #40
 364              	.LCFI21:
 365              		.cfi_def_cfa_offset 48
 366 0004 00AF     		add	r7, sp, #0
 367              	.LCFI22:
 368              		.cfi_def_cfa_register 7
 369 0006 B960     		str	r1, [r7, #8]
 370 0008 7A60     		str	r2, [r7, #4]
 371 000a 3B60     		str	r3, [r7]
 372 000c 0346     		mov	r3, r0
 373 000e FB73     		strb	r3, [r7, #15]
 252:FATFS/Target/sd_diskio.c ****   uint8_t ret;
 253:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 374              		.loc 1 253 11
 375 0010 0123     		movs	r3, #1
 376 0012 87F82730 		strb	r3, [r7, #39]
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 255:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 256:FATFS/Target/sd_diskio.c ****   osEvent event;
 257:FATFS/Target/sd_diskio.c **** #else
 258:FATFS/Target/sd_diskio.c ****   uint16_t event;
 259:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 260:FATFS/Target/sd_diskio.c **** #endif
 261:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 262:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 263:FATFS/Target/sd_diskio.c **** #endif
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 12


 264:FATFS/Target/sd_diskio.c ****   /*
 265:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 266:FATFS/Target/sd_diskio.c ****   */
 267:FATFS/Target/sd_diskio.c **** 
 268:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 377              		.loc 1 268 7
 378 0016 47F23050 		movw	r0, #30000
 379 001a FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 380 001e 0346     		mov	r3, r0
 381              		.loc 1 268 6
 382 0020 002B     		cmp	r3, #0
 383 0022 02DA     		bge	.L20
 269:FATFS/Target/sd_diskio.c ****   {
 270:FATFS/Target/sd_diskio.c ****     return res;
 384              		.loc 1 270 12
 385 0024 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 386 0028 32E0     		b	.L25
 387              	.L20:
 271:FATFS/Target/sd_diskio.c ****   }
 272:FATFS/Target/sd_diskio.c **** 
 273:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 274:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 275:FATFS/Target/sd_diskio.c ****   {
 276:FATFS/Target/sd_diskio.c **** #endif
 277:FATFS/Target/sd_diskio.c ****     /* Fast path cause destination buffer is correctly aligned */
 278:FATFS/Target/sd_diskio.c ****     ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 388              		.loc 1 278 11
 389 002a 3A68     		ldr	r2, [r7]
 390 002c 7968     		ldr	r1, [r7, #4]
 391 002e B868     		ldr	r0, [r7, #8]
 392 0030 FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMA
 393 0034 0346     		mov	r3, r0
 394 0036 87F82630 		strb	r3, [r7, #38]
 279:FATFS/Target/sd_diskio.c **** 
 280:FATFS/Target/sd_diskio.c ****     if (ret == MSD_OK) {
 395              		.loc 1 280 8
 396 003a 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 397 003e 002B     		cmp	r3, #0
 398 0040 24D1     		bne	.L22
 281:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 282:FATFS/Target/sd_diskio.c ****     /* wait for a message from the queue or a timeout */
 283:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 399              		.loc 1 283 13
 400 0042 154B     		ldr	r3, .L26
 401 0044 1968     		ldr	r1, [r3]
 402 0046 07F11403 		add	r3, r7, #20
 403 004a 47F23052 		movw	r2, #30000
 404 004e 1846     		mov	r0, r3
 405 0050 FFF7FEFF 		bl	osMessageGet
 284:FATFS/Target/sd_diskio.c **** 
 285:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 406              		.loc 1 285 14
 407 0054 7B69     		ldr	r3, [r7, #20]
 408              		.loc 1 285 8
 409 0056 102B     		cmp	r3, #16
 410 0058 18D1     		bne	.L22
 286:FATFS/Target/sd_diskio.c ****     {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 13


 287:FATFS/Target/sd_diskio.c ****       if (event.value.v == READ_CPLT_MSG)
 411              		.loc 1 287 22
 412 005a BB69     		ldr	r3, [r7, #24]
 413              		.loc 1 287 10
 414 005c 012B     		cmp	r3, #1
 415 005e 15D1     		bne	.L22
 288:FATFS/Target/sd_diskio.c ****       {
 289:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 416              		.loc 1 289 17
 417 0060 FFF7FEFF 		bl	osKernelSysTick
 418 0064 3862     		str	r0, [r7, #32]
 290:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 291:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer <SD_TIMEOUT)
 419              		.loc 1 291 14
 420 0066 08E0     		b	.L23
 421              	.L24:
 292:FATFS/Target/sd_diskio.c **** #else
 293:FATFS/Target/sd_diskio.c ****           status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 294:FATFS/Target/sd_diskio.c ****           if ((status == osOK) && (event == READ_CPLT_MSG))
 295:FATFS/Target/sd_diskio.c ****           {
 296:FATFS/Target/sd_diskio.c ****             timer = osKernelGetTickCount();
 297:FATFS/Target/sd_diskio.c ****             /* block until SDIO IP is ready or a timeout occur */
 298:FATFS/Target/sd_diskio.c ****             while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 299:FATFS/Target/sd_diskio.c **** #endif
 300:FATFS/Target/sd_diskio.c ****             {
 301:FATFS/Target/sd_diskio.c ****               if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 422              		.loc 1 301 19
 423 0068 FFF7FEFF 		bl	BSP_SD_GetCardState
 424 006c 0346     		mov	r3, r0
 425              		.loc 1 301 18
 426 006e 002B     		cmp	r3, #0
 427 0070 03D1     		bne	.L23
 302:FATFS/Target/sd_diskio.c ****               {
 303:FATFS/Target/sd_diskio.c ****                 res = RES_OK;
 428              		.loc 1 303 21
 429 0072 0023     		movs	r3, #0
 430 0074 87F82730 		strb	r3, [r7, #39]
 304:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 305:FATFS/Target/sd_diskio.c ****                 /*
 306:FATFS/Target/sd_diskio.c ****                 the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
 307:FATFS/Target/sd_diskio.c ****                 adjust the address and the D-Cache size to invalidate accordingly.
 308:FATFS/Target/sd_diskio.c ****                 */
 309:FATFS/Target/sd_diskio.c ****                 alignedAddr = (uint32_t)buff & ~0x1F;
 310:FATFS/Target/sd_diskio.c ****                 SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)b
 311:FATFS/Target/sd_diskio.c **** #endif
 312:FATFS/Target/sd_diskio.c ****                 break;
 431              		.loc 1 312 17
 432 0078 08E0     		b	.L22
 433              	.L23:
 291:FATFS/Target/sd_diskio.c **** #else
 434              		.loc 1 291 15
 435 007a FFF7FEFF 		bl	osKernelSysTick
 436 007e 0246     		mov	r2, r0
 291:FATFS/Target/sd_diskio.c **** #else
 437              		.loc 1 291 33
 438 0080 3B6A     		ldr	r3, [r7, #32]
 439 0082 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 14


 291:FATFS/Target/sd_diskio.c **** #else
 440              		.loc 1 291 14
 441 0084 47F22F52 		movw	r2, #29999
 442 0088 9342     		cmp	r3, r2
 443 008a EDD9     		bls	.L24
 444              	.L22:
 313:FATFS/Target/sd_diskio.c ****               }
 314:FATFS/Target/sd_diskio.c ****             }
 315:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 316:FATFS/Target/sd_diskio.c ****           }
 317:FATFS/Target/sd_diskio.c ****         }
 318:FATFS/Target/sd_diskio.c **** #else
 319:FATFS/Target/sd_diskio.c ****       }
 320:FATFS/Target/sd_diskio.c **** #endif
 321:FATFS/Target/sd_diskio.c ****     }
 322:FATFS/Target/sd_diskio.c **** 
 323:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 324:FATFS/Target/sd_diskio.c ****     }
 325:FATFS/Target/sd_diskio.c ****     else
 326:FATFS/Target/sd_diskio.c ****     {
 327:FATFS/Target/sd_diskio.c ****       /* Slow path, fetch each sector a part and memcpy to destination buffer */
 328:FATFS/Target/sd_diskio.c ****       int i;
 329:FATFS/Target/sd_diskio.c **** 
 330:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
 331:FATFS/Target/sd_diskio.c ****       {
 332:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 333:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 334:FATFS/Target/sd_diskio.c ****         {
 335:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 336:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 337:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 338:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 339:FATFS/Target/sd_diskio.c **** 
 340:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 341:FATFS/Target/sd_diskio.c ****           {
 342:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 343:FATFS/Target/sd_diskio.c ****             {
 344:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 345:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 346:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 347:FATFS/Target/sd_diskio.c **** #else
 348:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 349:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 350:FATFS/Target/sd_diskio.c ****               {
 351:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 352:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 353:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
 354:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 355:FATFS/Target/sd_diskio.c **** #endif
 356:FATFS/Target/sd_diskio.c ****                 {
 357:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 358:FATFS/Target/sd_diskio.c **** 
 359:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 360:FATFS/Target/sd_diskio.c ****                   {
 361:FATFS/Target/sd_diskio.c ****                     break;
 362:FATFS/Target/sd_diskio.c ****                   }
 363:FATFS/Target/sd_diskio.c ****                 }
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 15


 364:FATFS/Target/sd_diskio.c **** 
 365:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 366:FATFS/Target/sd_diskio.c ****                 {
 367:FATFS/Target/sd_diskio.c ****                   break;
 368:FATFS/Target/sd_diskio.c ****                 }
 369:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 370:FATFS/Target/sd_diskio.c ****               }
 371:FATFS/Target/sd_diskio.c ****             }
 372:FATFS/Target/sd_diskio.c **** #else
 373:FATFS/Target/sd_diskio.c ****           }
 374:FATFS/Target/sd_diskio.c **** #endif
 375:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 376:FATFS/Target/sd_diskio.c ****           /*
 377:FATFS/Target/sd_diskio.c ****           *
 378:FATFS/Target/sd_diskio.c ****           * invalidate the scratch buffer before the next read to get the actual data instead of th
 379:FATFS/Target/sd_diskio.c ****           */
 380:FATFS/Target/sd_diskio.c ****           SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 381:FATFS/Target/sd_diskio.c **** #endif
 382:FATFS/Target/sd_diskio.c ****           memcpy(buff, scratch, BLOCKSIZE);
 383:FATFS/Target/sd_diskio.c ****           buff += BLOCKSIZE;
 384:FATFS/Target/sd_diskio.c ****         }
 385:FATFS/Target/sd_diskio.c ****         else
 386:FATFS/Target/sd_diskio.c ****         {
 387:FATFS/Target/sd_diskio.c ****           break;
 388:FATFS/Target/sd_diskio.c ****         }
 389:FATFS/Target/sd_diskio.c ****       }
 390:FATFS/Target/sd_diskio.c **** 
 391:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 392:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 393:FATFS/Target/sd_diskio.c ****     }
 394:FATFS/Target/sd_diskio.c **** #endif
 395:FATFS/Target/sd_diskio.c ****   return res;
 445              		.loc 1 395 10
 446 008c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 447              	.L25:
 396:FATFS/Target/sd_diskio.c **** }
 448              		.loc 1 396 1 discriminator 1
 449 0090 1846     		mov	r0, r3
 450 0092 2837     		adds	r7, r7, #40
 451              	.LCFI23:
 452              		.cfi_def_cfa_offset 8
 453 0094 BD46     		mov	sp, r7
 454              	.LCFI24:
 455              		.cfi_def_cfa_register 13
 456              		@ sp needed
 457 0096 80BD     		pop	{r7, pc}
 458              	.L27:
 459              		.align	2
 460              	.L26:
 461 0098 00000000 		.word	SDQueueID
 462              		.cfi_endproc
 463              	.LFE153:
 465              		.section	.text.SD_write,"ax",%progbits
 466              		.align	1
 467              		.global	SD_write
 468              		.syntax unified
 469              		.thumb
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 16


 470              		.thumb_func
 472              	SD_write:
 473              	.LFB154:
 397:FATFS/Target/sd_diskio.c **** 
 398:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 399:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 400:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeWriteSection */
 401:FATFS/Target/sd_diskio.c **** /**
 402:FATFS/Target/sd_diskio.c ****   * @brief  Writes Sector(s)
 403:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 404:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data to be written
 405:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 406:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 407:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 408:FATFS/Target/sd_diskio.c ****   */
 409:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 410:FATFS/Target/sd_diskio.c **** 
 411:FATFS/Target/sd_diskio.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 412:FATFS/Target/sd_diskio.c **** {
 474              		.loc 1 412 1
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 40
 477              		@ frame_needed = 1, uses_anonymous_args = 0
 478 0000 80B5     		push	{r7, lr}
 479              	.LCFI25:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 8AB0     		sub	sp, sp, #40
 484              	.LCFI26:
 485              		.cfi_def_cfa_offset 48
 486 0004 00AF     		add	r7, sp, #0
 487              	.LCFI27:
 488              		.cfi_def_cfa_register 7
 489 0006 B960     		str	r1, [r7, #8]
 490 0008 7A60     		str	r2, [r7, #4]
 491 000a 3B60     		str	r3, [r7]
 492 000c 0346     		mov	r3, r0
 493 000e FB73     		strb	r3, [r7, #15]
 413:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 494              		.loc 1 413 11
 495 0010 0123     		movs	r3, #1
 496 0012 87F82730 		strb	r3, [r7, #39]
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 415:FATFS/Target/sd_diskio.c **** 
 416:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 417:FATFS/Target/sd_diskio.c ****   osEvent event;
 418:FATFS/Target/sd_diskio.c **** #else
 419:FATFS/Target/sd_diskio.c ****   uint16_t event;
 420:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 421:FATFS/Target/sd_diskio.c **** #endif
 422:FATFS/Target/sd_diskio.c **** 
 423:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 424:FATFS/Target/sd_diskio.c ****   int32_t ret;
 425:FATFS/Target/sd_diskio.c **** #endif
 426:FATFS/Target/sd_diskio.c **** 
 427:FATFS/Target/sd_diskio.c ****   /*
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 17


 428:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 429:FATFS/Target/sd_diskio.c ****   */
 430:FATFS/Target/sd_diskio.c **** 
 431:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 497              		.loc 1 431 7
 498 0016 47F23050 		movw	r0, #30000
 499 001a FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 500 001e 0346     		mov	r3, r0
 501              		.loc 1 431 6
 502 0020 002B     		cmp	r3, #0
 503 0022 02DA     		bge	.L29
 432:FATFS/Target/sd_diskio.c ****   {
 433:FATFS/Target/sd_diskio.c ****     return res;
 504              		.loc 1 433 12
 505 0024 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 506 0028 2EE0     		b	.L34
 507              	.L29:
 434:FATFS/Target/sd_diskio.c ****   }
 435:FATFS/Target/sd_diskio.c **** 
 436:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 437:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 438:FATFS/Target/sd_diskio.c ****   {
 439:FATFS/Target/sd_diskio.c **** #endif
 440:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 441:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 442:FATFS/Target/sd_diskio.c ****   /*
 443:FATFS/Target/sd_diskio.c ****     the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
 444:FATFS/Target/sd_diskio.c ****     adjust the address and the D-Cache size to clean accordingly.
 445:FATFS/Target/sd_diskio.c ****   */
 446:FATFS/Target/sd_diskio.c ****   alignedAddr = (uint32_t)buff & ~0x1F;
 447:FATFS/Target/sd_diskio.c ****   SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr))
 448:FATFS/Target/sd_diskio.c **** #endif
 449:FATFS/Target/sd_diskio.c **** 
 450:FATFS/Target/sd_diskio.c ****   if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 508              		.loc 1 450 6
 509 002a 3A68     		ldr	r2, [r7]
 510 002c 7968     		ldr	r1, [r7, #4]
 511 002e B868     		ldr	r0, [r7, #8]
 512 0030 FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMA
 513 0034 0346     		mov	r3, r0
 514              		.loc 1 450 5
 515 0036 002B     		cmp	r3, #0
 516 0038 24D1     		bne	.L31
 451:FATFS/Target/sd_diskio.c ****                            (uint32_t) (sector),
 452:FATFS/Target/sd_diskio.c ****                            count) == MSD_OK)
 453:FATFS/Target/sd_diskio.c ****   {
 454:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 455:FATFS/Target/sd_diskio.c ****     /* Get the message from the queue */
 456:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 517              		.loc 1 456 13
 518 003a 154B     		ldr	r3, .L35
 519 003c 1968     		ldr	r1, [r3]
 520 003e 07F11403 		add	r3, r7, #20
 521 0042 47F23052 		movw	r2, #30000
 522 0046 1846     		mov	r0, r3
 523 0048 FFF7FEFF 		bl	osMessageGet
 457:FATFS/Target/sd_diskio.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 18


 458:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 524              		.loc 1 458 14
 525 004c 7B69     		ldr	r3, [r7, #20]
 526              		.loc 1 458 8
 527 004e 102B     		cmp	r3, #16
 528 0050 18D1     		bne	.L31
 459:FATFS/Target/sd_diskio.c ****     {
 460:FATFS/Target/sd_diskio.c ****       if (event.value.v == WRITE_CPLT_MSG)
 529              		.loc 1 460 22
 530 0052 BB69     		ldr	r3, [r7, #24]
 531              		.loc 1 460 10
 532 0054 022B     		cmp	r3, #2
 533 0056 15D1     		bne	.L31
 461:FATFS/Target/sd_diskio.c ****       {
 462:FATFS/Target/sd_diskio.c **** #else
 463:FATFS/Target/sd_diskio.c ****     status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 464:FATFS/Target/sd_diskio.c ****     if ((status == osOK) && (event == WRITE_CPLT_MSG))
 465:FATFS/Target/sd_diskio.c ****     {
 466:FATFS/Target/sd_diskio.c **** #endif
 467:FATFS/Target/sd_diskio.c ****  #if (osCMSIS < 0x20000U)
 468:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 534              		.loc 1 468 17
 535 0058 FFF7FEFF 		bl	osKernelSysTick
 536 005c 3862     		str	r0, [r7, #32]
 469:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 470:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer  < SD_TIMEOUT)
 537              		.loc 1 470 14
 538 005e 08E0     		b	.L32
 539              	.L33:
 471:FATFS/Target/sd_diskio.c **** #else
 472:FATFS/Target/sd_diskio.c ****         timer = osKernelGetTickCount();
 473:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 474:FATFS/Target/sd_diskio.c ****         while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 475:FATFS/Target/sd_diskio.c **** #endif
 476:FATFS/Target/sd_diskio.c ****         {
 477:FATFS/Target/sd_diskio.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 540              		.loc 1 477 15
 541 0060 FFF7FEFF 		bl	BSP_SD_GetCardState
 542 0064 0346     		mov	r3, r0
 543              		.loc 1 477 14
 544 0066 002B     		cmp	r3, #0
 545 0068 03D1     		bne	.L32
 478:FATFS/Target/sd_diskio.c ****           {
 479:FATFS/Target/sd_diskio.c ****             res = RES_OK;
 546              		.loc 1 479 17
 547 006a 0023     		movs	r3, #0
 548 006c 87F82730 		strb	r3, [r7, #39]
 480:FATFS/Target/sd_diskio.c ****             break;
 549              		.loc 1 480 13
 550 0070 08E0     		b	.L31
 551              	.L32:
 470:FATFS/Target/sd_diskio.c **** #else
 552              		.loc 1 470 15
 553 0072 FFF7FEFF 		bl	osKernelSysTick
 554 0076 0246     		mov	r2, r0
 470:FATFS/Target/sd_diskio.c **** #else
 555              		.loc 1 470 33
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 19


 556 0078 3B6A     		ldr	r3, [r7, #32]
 557 007a D31A     		subs	r3, r2, r3
 470:FATFS/Target/sd_diskio.c **** #else
 558              		.loc 1 470 14
 559 007c 47F22F52 		movw	r2, #29999
 560 0080 9342     		cmp	r3, r2
 561 0082 EDD9     		bls	.L33
 562              	.L31:
 481:FATFS/Target/sd_diskio.c ****           }
 482:FATFS/Target/sd_diskio.c ****         }
 483:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 484:FATFS/Target/sd_diskio.c ****       }
 485:FATFS/Target/sd_diskio.c ****     }
 486:FATFS/Target/sd_diskio.c **** #else
 487:FATFS/Target/sd_diskio.c ****     }
 488:FATFS/Target/sd_diskio.c **** #endif
 489:FATFS/Target/sd_diskio.c ****   }
 490:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 491:FATFS/Target/sd_diskio.c ****   else {
 492:FATFS/Target/sd_diskio.c ****     /* Slow path, fetch each sector a part and memcpy to destination buffer */
 493:FATFS/Target/sd_diskio.c ****     int i;
 494:FATFS/Target/sd_diskio.c **** 
 495:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 496:FATFS/Target/sd_diskio.c ****     /*
 497:FATFS/Target/sd_diskio.c ****      * invalidate the scratch buffer before the next write to get the actual data instead of the ca
 498:FATFS/Target/sd_diskio.c ****      */
 499:FATFS/Target/sd_diskio.c ****      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 500:FATFS/Target/sd_diskio.c **** #endif
 501:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
 502:FATFS/Target/sd_diskio.c ****       {
 503:FATFS/Target/sd_diskio.c ****         memcpy((void *)scratch, buff, BLOCKSIZE);
 504:FATFS/Target/sd_diskio.c ****         buff += BLOCKSIZE;
 505:FATFS/Target/sd_diskio.c **** 
 506:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 507:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 508:FATFS/Target/sd_diskio.c ****         {
 509:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 510:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 511:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 512:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 513:FATFS/Target/sd_diskio.c **** 
 514:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 515:FATFS/Target/sd_diskio.c ****           {
 516:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 517:FATFS/Target/sd_diskio.c ****             {
 518:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 519:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 520:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 521:FATFS/Target/sd_diskio.c **** #else
 522:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 523:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 524:FATFS/Target/sd_diskio.c ****               {
 525:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 526:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 527:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
 528:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 529:FATFS/Target/sd_diskio.c **** #endif
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 20


 530:FATFS/Target/sd_diskio.c ****                 {
 531:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 532:FATFS/Target/sd_diskio.c **** 
 533:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 534:FATFS/Target/sd_diskio.c ****                   {
 535:FATFS/Target/sd_diskio.c ****                     break;
 536:FATFS/Target/sd_diskio.c ****                   }
 537:FATFS/Target/sd_diskio.c ****                 }
 538:FATFS/Target/sd_diskio.c **** 
 539:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 540:FATFS/Target/sd_diskio.c ****                 {
 541:FATFS/Target/sd_diskio.c ****                   break;
 542:FATFS/Target/sd_diskio.c ****                 }
 543:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 544:FATFS/Target/sd_diskio.c ****               }
 545:FATFS/Target/sd_diskio.c ****             }
 546:FATFS/Target/sd_diskio.c **** #else
 547:FATFS/Target/sd_diskio.c ****           }
 548:FATFS/Target/sd_diskio.c **** #endif
 549:FATFS/Target/sd_diskio.c ****         }
 550:FATFS/Target/sd_diskio.c ****         else
 551:FATFS/Target/sd_diskio.c ****         {
 552:FATFS/Target/sd_diskio.c ****           break;
 553:FATFS/Target/sd_diskio.c ****         }
 554:FATFS/Target/sd_diskio.c ****       }
 555:FATFS/Target/sd_diskio.c **** 
 556:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 557:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 558:FATFS/Target/sd_diskio.c ****     }
 559:FATFS/Target/sd_diskio.c **** 
 560:FATFS/Target/sd_diskio.c ****   }
 561:FATFS/Target/sd_diskio.c **** #endif
 562:FATFS/Target/sd_diskio.c **** 
 563:FATFS/Target/sd_diskio.c ****   return res;
 563              		.loc 1 563 10
 564 0084 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 565              	.L34:
 564:FATFS/Target/sd_diskio.c **** }
 566              		.loc 1 564 1 discriminator 1
 567 0088 1846     		mov	r0, r3
 568 008a 2837     		adds	r7, r7, #40
 569              	.LCFI28:
 570              		.cfi_def_cfa_offset 8
 571 008c BD46     		mov	sp, r7
 572              	.LCFI29:
 573              		.cfi_def_cfa_register 13
 574              		@ sp needed
 575 008e 80BD     		pop	{r7, pc}
 576              	.L36:
 577              		.align	2
 578              	.L35:
 579 0090 00000000 		.word	SDQueueID
 580              		.cfi_endproc
 581              	.LFE154:
 583              		.section	.text.SD_ioctl,"ax",%progbits
 584              		.align	1
 585              		.global	SD_ioctl
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 21


 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 590              	SD_ioctl:
 591              	.LFB155:
 565:FATFS/Target/sd_diskio.c ****  #endif /* _USE_WRITE == 1 */
 566:FATFS/Target/sd_diskio.c **** 
 567:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 568:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 569:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeIoctlSection */
 570:FATFS/Target/sd_diskio.c **** /**
 571:FATFS/Target/sd_diskio.c ****   * @brief  I/O control operation
 572:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 573:FATFS/Target/sd_diskio.c ****   * @param  cmd: Control code
 574:FATFS/Target/sd_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 575:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 576:FATFS/Target/sd_diskio.c ****   */
 577:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 578:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 579:FATFS/Target/sd_diskio.c **** {
 592              		.loc 1 579 1
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 48
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596 0000 80B5     		push	{r7, lr}
 597              	.LCFI30:
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 8CB0     		sub	sp, sp, #48
 602              	.LCFI31:
 603              		.cfi_def_cfa_offset 56
 604 0004 00AF     		add	r7, sp, #0
 605              	.LCFI32:
 606              		.cfi_def_cfa_register 7
 607 0006 0346     		mov	r3, r0
 608 0008 3A60     		str	r2, [r7]
 609 000a FB71     		strb	r3, [r7, #7]
 610 000c 0B46     		mov	r3, r1
 611 000e BB71     		strb	r3, [r7, #6]
 580:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 612              		.loc 1 580 11
 613 0010 0123     		movs	r3, #1
 614 0012 87F82F30 		strb	r3, [r7, #47]
 581:FATFS/Target/sd_diskio.c ****   BSP_SD_CardInfo CardInfo;
 582:FATFS/Target/sd_diskio.c **** 
 583:FATFS/Target/sd_diskio.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 615              		.loc 1 583 12
 616 0016 254B     		ldr	r3, .L48
 617 0018 1B78     		ldrb	r3, [r3]
 618 001a DBB2     		uxtb	r3, r3
 619 001c 03F00103 		and	r3, r3, #1
 620              		.loc 1 583 6
 621 0020 002B     		cmp	r3, #0
 622 0022 01D0     		beq	.L38
 623              		.loc 1 583 33 discriminator 1
 624 0024 0323     		movs	r3, #3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 22


 625 0026 3CE0     		b	.L47
 626              	.L38:
 584:FATFS/Target/sd_diskio.c **** 
 585:FATFS/Target/sd_diskio.c ****   switch (cmd)
 627              		.loc 1 585 3
 628 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 629 002a 032B     		cmp	r3, #3
 630 002c 34D8     		bhi	.L40
 631 002e 01A2     		adr	r2, .L42
 632 0030 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 633              		.p2align 2
 634              	.L42:
 635 0034 45000000 		.word	.L45+1
 636 0038 4D000000 		.word	.L44+1
 637 003c 65000000 		.word	.L43+1
 638 0040 7F000000 		.word	.L41+1
 639              		.p2align 1
 640              	.L45:
 586:FATFS/Target/sd_diskio.c ****   {
 587:FATFS/Target/sd_diskio.c ****   /* Make sure that no pending write process */
 588:FATFS/Target/sd_diskio.c ****   case CTRL_SYNC :
 589:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 641              		.loc 1 589 9
 642 0044 0023     		movs	r3, #0
 643 0046 87F82F30 		strb	r3, [r7, #47]
 590:FATFS/Target/sd_diskio.c ****     break;
 644              		.loc 1 590 5
 645 004a 28E0     		b	.L46
 646              	.L44:
 591:FATFS/Target/sd_diskio.c **** 
 592:FATFS/Target/sd_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 593:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_COUNT :
 594:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 647              		.loc 1 594 5
 648 004c 07F10C03 		add	r3, r7, #12
 649 0050 1846     		mov	r0, r3
 650 0052 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 595:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 651              		.loc 1 595 29
 652 0056 7A6A     		ldr	r2, [r7, #36]
 653              		.loc 1 595 19
 654 0058 3B68     		ldr	r3, [r7]
 655 005a 1A60     		str	r2, [r3]
 596:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 656              		.loc 1 596 9
 657 005c 0023     		movs	r3, #0
 658 005e 87F82F30 		strb	r3, [r7, #47]
 597:FATFS/Target/sd_diskio.c ****     break;
 659              		.loc 1 597 5
 660 0062 1CE0     		b	.L46
 661              	.L43:
 598:FATFS/Target/sd_diskio.c **** 
 599:FATFS/Target/sd_diskio.c ****   /* Get R/W sector size (WORD) */
 600:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_SIZE :
 601:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 662              		.loc 1 601 5
 663 0064 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 23


 664 0068 1846     		mov	r0, r3
 665 006a FFF7FEFF 		bl	BSP_SD_GetCardInfo
 602:FATFS/Target/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 666              		.loc 1 602 28
 667 006e BB6A     		ldr	r3, [r7, #40]
 668              		.loc 1 602 18
 669 0070 9AB2     		uxth	r2, r3
 670 0072 3B68     		ldr	r3, [r7]
 671 0074 1A80     		strh	r2, [r3]	@ movhi
 603:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 672              		.loc 1 603 9
 673 0076 0023     		movs	r3, #0
 674 0078 87F82F30 		strb	r3, [r7, #47]
 604:FATFS/Target/sd_diskio.c ****     break;
 675              		.loc 1 604 5
 676 007c 0FE0     		b	.L46
 677              	.L41:
 605:FATFS/Target/sd_diskio.c **** 
 606:FATFS/Target/sd_diskio.c ****   /* Get erase block size in unit of sector (DWORD) */
 607:FATFS/Target/sd_diskio.c ****   case GET_BLOCK_SIZE :
 608:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 678              		.loc 1 608 5
 679 007e 07F10C03 		add	r3, r7, #12
 680 0082 1846     		mov	r0, r3
 681 0084 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 609:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 682              		.loc 1 609 29
 683 0088 BB6A     		ldr	r3, [r7, #40]
 684              		.loc 1 609 43
 685 008a 5A0A     		lsrs	r2, r3, #9
 686              		.loc 1 609 19
 687 008c 3B68     		ldr	r3, [r7]
 688 008e 1A60     		str	r2, [r3]
 610:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 689              		.loc 1 610 9
 690 0090 0023     		movs	r3, #0
 691 0092 87F82F30 		strb	r3, [r7, #47]
 611:FATFS/Target/sd_diskio.c ****     break;
 692              		.loc 1 611 5
 693 0096 02E0     		b	.L46
 694              	.L40:
 612:FATFS/Target/sd_diskio.c **** 
 613:FATFS/Target/sd_diskio.c ****   default:
 614:FATFS/Target/sd_diskio.c ****     res = RES_PARERR;
 695              		.loc 1 614 9
 696 0098 0423     		movs	r3, #4
 697 009a 87F82F30 		strb	r3, [r7, #47]
 698              	.L46:
 615:FATFS/Target/sd_diskio.c ****   }
 616:FATFS/Target/sd_diskio.c **** 
 617:FATFS/Target/sd_diskio.c ****   return res;
 699              		.loc 1 617 10
 700 009e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 701              	.L47:
 618:FATFS/Target/sd_diskio.c **** }
 702              		.loc 1 618 1 discriminator 1
 703 00a2 1846     		mov	r0, r3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 24


 704 00a4 3037     		adds	r7, r7, #48
 705              	.LCFI33:
 706              		.cfi_def_cfa_offset 8
 707 00a6 BD46     		mov	sp, r7
 708              	.LCFI34:
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 00a8 80BD     		pop	{r7, pc}
 712              	.L49:
 713 00aa 00BF     		.align	2
 714              	.L48:
 715 00ac 00000000 		.word	Stat
 716              		.cfi_endproc
 717              	.LFE155:
 719              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 720              		.align	1
 721              		.global	BSP_SD_WriteCpltCallback
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 726              	BSP_SD_WriteCpltCallback:
 727              	.LFB156:
 619:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 620:FATFS/Target/sd_diskio.c **** 
 621:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN afterIoctlSection */
 622:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 623:FATFS/Target/sd_diskio.c **** /* USER CODE END afterIoctlSection */
 624:FATFS/Target/sd_diskio.c **** 
 625:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN callbackSection */
 626:FATFS/Target/sd_diskio.c **** /* can be used to modify / following code or add new code */
 627:FATFS/Target/sd_diskio.c **** /* USER CODE END callbackSection */
 628:FATFS/Target/sd_diskio.c **** /**
 629:FATFS/Target/sd_diskio.c ****   * @brief Tx Transfer completed callbacks
 630:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 631:FATFS/Target/sd_diskio.c ****   * @retval None
 632:FATFS/Target/sd_diskio.c ****   */
 633:FATFS/Target/sd_diskio.c **** void BSP_SD_WriteCpltCallback(void)
 634:FATFS/Target/sd_diskio.c **** {
 728              		.loc 1 634 1
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732 0000 80B5     		push	{r7, lr}
 733              	.LCFI35:
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 7, -8
 736              		.cfi_offset 14, -4
 737 0002 00AF     		add	r7, sp, #0
 738              	.LCFI36:
 739              		.cfi_def_cfa_register 7
 635:FATFS/Target/sd_diskio.c **** 
 636:FATFS/Target/sd_diskio.c ****   /*
 637:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 638:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 639:FATFS/Target/sd_diskio.c ****    */
 640:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 641:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 25


 740              		.loc 1 641 4
 741 0004 044B     		ldr	r3, .L51
 742 0006 1B68     		ldr	r3, [r3]
 743 0008 0022     		movs	r2, #0
 744 000a 0221     		movs	r1, #2
 745 000c 1846     		mov	r0, r3
 746 000e FFF7FEFF 		bl	osMessagePut
 642:FATFS/Target/sd_diskio.c **** #else
 643:FATFS/Target/sd_diskio.c ****    const uint16_t msg = WRITE_CPLT_MSG;
 644:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 645:FATFS/Target/sd_diskio.c **** #endif
 646:FATFS/Target/sd_diskio.c **** }
 747              		.loc 1 646 1
 748 0012 00BF     		nop
 749 0014 80BD     		pop	{r7, pc}
 750              	.L52:
 751 0016 00BF     		.align	2
 752              	.L51:
 753 0018 00000000 		.word	SDQueueID
 754              		.cfi_endproc
 755              	.LFE156:
 757              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 758              		.align	1
 759              		.global	BSP_SD_ReadCpltCallback
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 764              	BSP_SD_ReadCpltCallback:
 765              	.LFB157:
 647:FATFS/Target/sd_diskio.c **** 
 648:FATFS/Target/sd_diskio.c **** /**
 649:FATFS/Target/sd_diskio.c ****   * @brief Rx Transfer completed callbacks
 650:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 651:FATFS/Target/sd_diskio.c ****   * @retval None
 652:FATFS/Target/sd_diskio.c ****   */
 653:FATFS/Target/sd_diskio.c **** void BSP_SD_ReadCpltCallback(void)
 654:FATFS/Target/sd_diskio.c **** {
 766              		.loc 1 654 1
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770 0000 80B5     		push	{r7, lr}
 771              	.LCFI37:
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 7, -8
 774              		.cfi_offset 14, -4
 775 0002 00AF     		add	r7, sp, #0
 776              	.LCFI38:
 777              		.cfi_def_cfa_register 7
 655:FATFS/Target/sd_diskio.c ****   /*
 656:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 657:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 658:FATFS/Target/sd_diskio.c ****    */
 659:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 660:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 778              		.loc 1 660 4
 779 0004 044B     		ldr	r3, .L54
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 26


 780 0006 1B68     		ldr	r3, [r3]
 781 0008 0022     		movs	r2, #0
 782 000a 0121     		movs	r1, #1
 783 000c 1846     		mov	r0, r3
 784 000e FFF7FEFF 		bl	osMessagePut
 661:FATFS/Target/sd_diskio.c **** #else
 662:FATFS/Target/sd_diskio.c ****    const uint16_t msg = READ_CPLT_MSG;
 663:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 664:FATFS/Target/sd_diskio.c **** #endif
 665:FATFS/Target/sd_diskio.c **** }
 785              		.loc 1 665 1
 786 0012 00BF     		nop
 787 0014 80BD     		pop	{r7, pc}
 788              	.L55:
 789 0016 00BF     		.align	2
 790              	.L54:
 791 0018 00000000 		.word	SDQueueID
 792              		.cfi_endproc
 793              	.LFE157:
 795              		.text
 796              	.Letext0:
 797              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 798              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 799              		.file 4 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 800              		.file 5 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 801              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 802              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 803              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 804              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 805              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 806              		.file 11 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 807              		.file 12 "FATFS/Target/sd_diskio.h"
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 sd_diskio.c
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:22     .data.Stat:00000000 Stat
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:25     .bss.SDQueueID:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:28     .bss.SDQueueID:00000000 SDQueueID
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:35     .rodata.SD_Driver:00000000 SD_Driver
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:32     .rodata.SD_Driver:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:187    .text.SD_initialize:00000000 SD_initialize
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:308    .text.SD_status:00000000 SD_status
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:352    .text.SD_read:00000000 SD_read
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:472    .text.SD_write:00000000 SD_write
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:590    .text.SD_ioctl:00000000 SD_ioctl
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:42     .text.SD_CheckStatusWithTimeout:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:47     .text.SD_CheckStatusWithTimeout:00000000 SD_CheckStatusWithTimeout
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:109    .text.SD_CheckStatus:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:114    .text.SD_CheckStatus:00000000 SD_CheckStatus
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:169    .text.SD_CheckStatus:00000038 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:174    .rodata:00000000 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:181    .text.SD_initialize:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:295    .text.SD_initialize:0000008c $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:302    .text.SD_status:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:346    .text.SD_read:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:461    .text.SD_read:00000098 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:466    .text.SD_write:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:579    .text.SD_write:00000090 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:584    .text.SD_ioctl:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:635    .text.SD_ioctl:00000034 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:639    .text.SD_ioctl:00000044 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:715    .text.SD_ioctl:000000ac $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:720    .text.BSP_SD_WriteCpltCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:726    .text.BSP_SD_WriteCpltCallback:00000000 BSP_SD_WriteCpltCallback
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:753    .text.BSP_SD_WriteCpltCallback:00000018 $d
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:758    .text.BSP_SD_ReadCpltCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:764    .text.BSP_SD_ReadCpltCallback:00000000 BSP_SD_ReadCpltCallback
C:\Users\jisu8\AppData\Local\Temp\ccz7rONY.s:791    .text.BSP_SD_ReadCpltCallback:00000018 $d

UNDEFINED SYMBOLS
osKernelSysTick
BSP_SD_GetCardState
osKernelRunning
BSP_SD_Init
osMessageCreate
BSP_SD_ReadBlocks_DMA
osMessageGet
BSP_SD_WriteBlocks_DMA
BSP_SD_GetCardInfo
osMessagePut
