
F746G_DISCO_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ac8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08011c98  08011c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011dd4  08011dd4  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08011dd4  08011dd4  00021dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ddc  08011ddc  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ddc  08011ddc  00021ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011de0  08011de0  00021de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08011de4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000933c  2000019c  08011f80  0003019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200094d8  08011f80  000394d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003708e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007564  00000000  00000000  0006725a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ba0  00000000  00000000  0006e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002860  00000000  00000000  00071360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033ada  00000000  00000000  00073bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a617  00000000  00000000  000a769a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001128f0  00000000  00000000  000e1cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f45a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba4c  00000000  00000000  001f45f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011c80 	.word	0x08011c80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08011c80 	.word	0x08011c80

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <vApplicationGetIdleTaskMemory+0x2c>)
 8000558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <vApplicationGetIdleTaskMemory+0x30>)
 800055e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200001b8 	.word	0x200001b8
 8000578:	20000270 	.word	0x20000270

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f001 fc68 	bl	8001e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f835 	bl	80005f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058a:	f000 f8a3 	bl	80006d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb55 	bl	8000c3c <MX_GPIO_Init>
  MX_CRC_Init();
 8000592:	f000 f8cf 	bl	8000734 <MX_CRC_Init>
  MX_FMC_Init();
 8000596:	f000 fb01 	bl	8000b9c <MX_FMC_Init>
  MX_I2C1_Init();
 800059a:	f000 f8ed 	bl	8000778 <MX_I2C1_Init>
  MX_I2C3_Init();
 800059e:	f000 f92b 	bl	80007f8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005a2:	f000 f969 	bl	8000878 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005a6:	f000 f9e9 	bl	800097c <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 80005aa:	f000 fa13 	bl	80009d4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80005ae:	f000 fa31 	bl	8000a14 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 fa6d 	bl	8000a90 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005b6:	f000 fa9b 	bl	8000af0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005ba:	f00a faf7 	bl	800abac <MX_FATFS_Init>
  MX_DMA_Init();
 80005be:	f000 fac7 	bl	8000b50 <MX_DMA_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x70>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00e f8bf 	bl	800e75c <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <main+0x74>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f00e f897 	bl	800e716 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x6c>
 80005ea:	bf00      	nop
 80005ec:	08011ca4 	.word	0x08011ca4
 80005f0:	2000091c 	.word	0x2000091c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f011 f9ce 	bl	80119a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f004 fb36 	bl	8004c88 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0xd8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xd8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xdc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <SystemClock_Config+0xdc>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000664:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fc28 	bl	8004ecc <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000682:	f000 fdaf 	bl	80011e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000686:	f004 fb0f 	bl	8004ca8 <HAL_PWREx_EnableOverDrive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000690:	f000 fda8 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2106      	movs	r1, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 feae 	bl	8005414 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006be:	f000 fd91 	bl	80011e4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a2      	sub	sp, #136	; 0x88
 80006d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2284      	movs	r2, #132	; 0x84
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f011 f95f 	bl	80119a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC1
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <PeriphCommonClock_Config+0x5c>)
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006f8:	2303      	movs	r3, #3
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f894 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000722:	f000 fd5f 	bl	80011e4 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3788      	adds	r7, #136	; 0x88
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	00a00008 	.word	0x00a00008

08000734 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_CRC_Init+0x3c>)
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <MX_CRC_Init+0x40>)
 800073c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_CRC_Init+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_CRC_Init+0x3c>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CRC_Init+0x3c>)
 8000758:	2201      	movs	r2, #1
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_CRC_Init+0x3c>)
 800075e:	f001 fcad 	bl	80020bc <HAL_CRC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000768:	f000 fd3c 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000470 	.word	0x20000470
 8000774:	40023000 	.word	0x40023000

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	f002 faf0 	bl	8002d98 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 fd11 	bl	80011e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C1_Init+0x74>)
 80007c6:	f002 fb77 	bl	8002eb8 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 fd08 	bl	80011e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C1_Init+0x74>)
 80007d8:	f002 fbb9 	bl	8002f4e <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fcff 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000494 	.word	0x20000494
 80007f0:	40005400 	.word	0x40005400
 80007f4:	00c0eaff 	.word	0x00c0eaff

080007f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_I2C3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_I2C3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_I2C3_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <MX_I2C3_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_I2C3_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <MX_I2C3_Init+0x74>)
 8000834:	f002 fab0 	bl	8002d98 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fcd1 	bl	80011e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_I2C3_Init+0x74>)
 8000846:	f002 fb37 	bl	8002eb8 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fcc8 	bl	80011e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_I2C3_Init+0x74>)
 8000858:	f002 fb79 	bl	8002f4e <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fcbf 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004e8 	.word	0x200004e8
 8000870:	40005c00 	.word	0x40005c00
 8000874:	00c0eaff 	.word	0x00c0eaff

08000878 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2234      	movs	r2, #52	; 0x34
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f011 f88d 	bl	80119a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_LTDC_Init+0xfc>)
 800088c:	4a3a      	ldr	r2, [pc, #232]	; (8000978 <MX_LTDC_Init+0x100>)
 800088e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000890:	4b38      	ldr	r3, [pc, #224]	; (8000974 <MX_LTDC_Init+0xfc>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_LTDC_Init+0xfc>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <MX_LTDC_Init+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80008a8:	4b32      	ldr	r3, [pc, #200]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008b0:	2209      	movs	r2, #9
 80008b2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008b6:	2235      	movs	r2, #53	; 0x35
 80008b8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008bc:	220b      	movs	r2, #11
 80008be:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008c2:	f240 2215 	movw	r2, #533	; 0x215
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008ca:	f240 121b 	movw	r2, #283	; 0x11b
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008d2:	f240 2235 	movw	r2, #565	; 0x235
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008da:	f240 121d 	movw	r2, #285	; 0x11d
 80008de:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f8:	481e      	ldr	r0, [pc, #120]	; (8000974 <MX_LTDC_Init+0xfc>)
 80008fa:	f002 fb75 	bl	8002fe8 <HAL_LTDC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000904:	f000 fc6e 	bl	80011e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800090c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000910:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000916:	f44f 7388 	mov.w	r3, #272	; 0x110
 800091a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000920:	23ff      	movs	r3, #255	; 0xff
 8000922:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000928:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000932:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000938:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800093e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_LTDC_Init+0xfc>)
 800095e:	f002 fcd5 	bl	800330c <HAL_LTDC_ConfigLayer>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000968:	f000 fc3c 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	; 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000053c 	.word	0x2000053c
 8000978:	40016800 	.word	0x40016800

0800097c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_QUADSPI_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_QUADSPI_Init+0x50>)
 800098e:	2204      	movs	r2, #4
 8000990:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000994:	2210      	movs	r2, #16
 8000996:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_QUADSPI_Init+0x50>)
 800099a:	2218      	movs	r2, #24
 800099c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009a0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80009a4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009ba:	f004 f9c5 	bl	8004d48 <HAL_QSPI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80009c4:	f000 fc0e 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200005e4 	.word	0x200005e4
 80009d0:	a0001000 	.word	0xa0001000

080009d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <MX_SDMMC1_SD_Init+0x3c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <MX_SDMMC1_SD_Init+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000630 	.word	0x20000630
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_SPI2_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a62:	2207      	movs	r2, #7
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_SPI2_Init+0x74>)
 8000a74:	f006 fe35 	bl	80076e2 <HAL_SPI_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 fbb1 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000774 	.word	0x20000774
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <MX_USART1_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART1_UART_Init+0x58>)
 8000ad4:	f007 f990 	bl	8007df8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 fb81 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200007d8 	.word	0x200007d8
 8000aec:	40011000 	.word	0x40011000

08000af0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <MX_USART6_UART_Init+0x5c>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART6_UART_Init+0x58>)
 8000b34:	f007 f960 	bl	8007df8 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 fb51 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000860 	.word	0x20000860
 8000b4c:	40011400 	.word	0x40011400

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2105      	movs	r1, #5
 8000b72:	203b      	movs	r0, #59	; 0x3b
 8000b74:	f001 fa78 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b78:	203b      	movs	r0, #59	; 0x3b
 8000b7a:	f001 fa91 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2105      	movs	r1, #5
 8000b82:	2045      	movs	r0, #69	; 0x45
 8000b84:	f001 fa70 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b88:	2045      	movs	r0, #69	; 0x45
 8000b8a:	f001 fa89 	bl	80020a0 <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <MX_FMC_Init+0x9c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bce:	2210      	movs	r2, #16
 8000bd0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bd4:	2240      	movs	r2, #64	; 0x40
 8000bd6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bda:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000bde:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_FMC_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_FMC_Init+0x98>)
 8000be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_FMC_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c00:	2307      	movs	r3, #7
 8000c02:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_FMC_Init+0x98>)
 8000c1e:	f006 fd2c 	bl	800767a <HAL_SDRAM_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c28:	f000 fadc 	bl	80011e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200008e8 	.word	0x200008e8
 8000c38:	a0000140 	.word	0xa0000140

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	4baf      	ldr	r3, [pc, #700]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4aae      	ldr	r2, [pc, #696]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4bac      	ldr	r3, [pc, #688]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6a:	4ba9      	ldr	r3, [pc, #676]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4aa8      	ldr	r2, [pc, #672]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4ba6      	ldr	r3, [pc, #664]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4ba3      	ldr	r3, [pc, #652]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4aa2      	ldr	r2, [pc, #648]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4ba0      	ldr	r3, [pc, #640]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b9d      	ldr	r3, [pc, #628]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a9c      	ldr	r2, [pc, #624]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b9a      	ldr	r3, [pc, #616]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b97      	ldr	r3, [pc, #604]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a96      	ldr	r2, [pc, #600]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b94      	ldr	r3, [pc, #592]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a90      	ldr	r2, [pc, #576]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b8e      	ldr	r3, [pc, #568]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ce2:	4b8b      	ldr	r3, [pc, #556]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a8a      	ldr	r2, [pc, #552]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cfa:	4b85      	ldr	r3, [pc, #532]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a84      	ldr	r2, [pc, #528]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b82      	ldr	r3, [pc, #520]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d12:	4b7f      	ldr	r3, [pc, #508]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a7e      	ldr	r2, [pc, #504]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b7c      	ldr	r3, [pc, #496]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a78      	ldr	r2, [pc, #480]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	4b73      	ldr	r3, [pc, #460]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a72      	ldr	r2, [pc, #456]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b70      	ldr	r3, [pc, #448]	; (8000f10 <MX_GPIO_Init+0x2d4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	486d      	ldr	r0, [pc, #436]	; (8000f14 <MX_GPIO_Init+0x2d8>)
 8000d60:	f002 f800 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210c      	movs	r1, #12
 8000d68:	486b      	ldr	r0, [pc, #428]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d6a:	f001 fffb 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	486a      	ldr	r0, [pc, #424]	; (8000f1c <MX_GPIO_Init+0x2e0>)
 8000d74:	f001 fff6 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4866      	ldr	r0, [pc, #408]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d80:	f001 fff0 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4865      	ldr	r0, [pc, #404]	; (8000f20 <MX_GPIO_Init+0x2e4>)
 8000d8c:	f001 ffea 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	21c8      	movs	r1, #200	; 0xc8
 8000d94:	4863      	ldr	r0, [pc, #396]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000d96:	f001 ffe5 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	485e      	ldr	r0, [pc, #376]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000dae:	f001 fe15 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000db2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4855      	ldr	r0, [pc, #340]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000dd0:	f001 fe04 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000de4:	2302      	movs	r3, #2
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	484f      	ldr	r0, [pc, #316]	; (8000f2c <MX_GPIO_Init+0x2f0>)
 8000df0:	f001 fdf4 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e04:	2308      	movs	r3, #8
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4841      	ldr	r0, [pc, #260]	; (8000f14 <MX_GPIO_Init+0x2d8>)
 8000e10:	f001 fde4 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e26:	2301      	movs	r3, #1
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	483f      	ldr	r0, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000e32:	f001 fdd3 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e46:	230d      	movs	r3, #13
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000e52:	f001 fdc3 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4832      	ldr	r0, [pc, #200]	; (8000f34 <MX_GPIO_Init+0x2f8>)
 8000e6c:	f001 fdb6 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_GPIO_Init+0x2d8>)
 8000e86:	f001 fda9 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000e8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4822      	ldr	r0, [pc, #136]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000ea8:	f001 fd98 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000eac:	23f0      	movs	r3, #240	; 0xf0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000ec8:	f001 fd88 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000eea:	f001 fd77 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_GPIO_Init+0x2d8>)
 8000f06:	f001 fd69 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e014      	b.n	8000f38 <MX_GPIO_Init+0x2fc>
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	40022800 	.word	0x40022800
 8000f20:	40021c00 	.word	0x40021c00
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40022400 	.word	0x40022400
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f46:	230d      	movs	r3, #13
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	488e      	ldr	r0, [pc, #568]	; (800118c <MX_GPIO_Init+0x550>)
 8000f52:	f001 fd43 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f56:	f241 030c 	movw	r3, #4108	; 0x100c
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4888      	ldr	r0, [pc, #544]	; (8001190 <MX_GPIO_Init+0x554>)
 8000f70:	f001 fd34 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f86:	4619      	mov	r1, r3
 8000f88:	4882      	ldr	r0, [pc, #520]	; (8001194 <MX_GPIO_Init+0x558>)
 8000f8a:	f001 fd27 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	487c      	ldr	r0, [pc, #496]	; (8001198 <MX_GPIO_Init+0x55c>)
 8000fa6:	f001 fd19 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fbc:	230d      	movs	r3, #13
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4875      	ldr	r0, [pc, #468]	; (800119c <MX_GPIO_Init+0x560>)
 8000fc8:	f001 fd08 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	486b      	ldr	r0, [pc, #428]	; (800118c <MX_GPIO_Init+0x550>)
 8000fe0:	f001 fcfc 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4869      	ldr	r0, [pc, #420]	; (80011a0 <MX_GPIO_Init+0x564>)
 8000ffa:	f001 fcef 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4862      	ldr	r0, [pc, #392]	; (80011a0 <MX_GPIO_Init+0x564>)
 8001018:	f001 fce0 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800101c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800102e:	230d      	movs	r3, #13
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	4859      	ldr	r0, [pc, #356]	; (80011a0 <MX_GPIO_Init+0x564>)
 800103a:	f001 fccf 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800103e:	2301      	movs	r3, #1
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800104e:	2302      	movs	r3, #2
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	484d      	ldr	r0, [pc, #308]	; (8001190 <MX_GPIO_Init+0x554>)
 800105a:	f001 fcbf 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001070:	2301      	movs	r3, #1
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001078:	4619      	mov	r1, r3
 800107a:	484a      	ldr	r0, [pc, #296]	; (80011a4 <MX_GPIO_Init+0x568>)
 800107c:	f001 fcae 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001086:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	483e      	ldr	r0, [pc, #248]	; (8001190 <MX_GPIO_Init+0x554>)
 8001098:	f001 fca0 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800109c:	23c8      	movs	r3, #200	; 0xc8
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <MX_GPIO_Init+0x560>)
 80010b4:	f001 fc92 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80010b8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010be:	2303      	movs	r3, #3
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ca:	4619      	mov	r1, r3
 80010cc:	4836      	ldr	r0, [pc, #216]	; (80011a8 <MX_GPIO_Init+0x56c>)
 80010ce:	f001 fc85 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010d2:	2332      	movs	r3, #50	; 0x32
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4829      	ldr	r0, [pc, #164]	; (8001194 <MX_GPIO_Init+0x558>)
 80010ee:	f001 fc75 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001102:	4619      	mov	r1, r3
 8001104:	4825      	ldr	r0, [pc, #148]	; (800119c <MX_GPIO_Init+0x560>)
 8001106:	f001 fc69 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800110a:	2386      	movs	r3, #134	; 0x86
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111a:	230b      	movs	r3, #11
 800111c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <MX_GPIO_Init+0x568>)
 8001126:	f001 fc59 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800112a:	2301      	movs	r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <MX_GPIO_Init+0x568>)
 800113e:	f001 fc4d 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001142:	2350      	movs	r3, #80	; 0x50
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001152:	230d      	movs	r3, #13
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_GPIO_Init+0x568>)
 800115e:	f001 fc3d 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001172:	2309      	movs	r3, #9
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	4619      	mov	r1, r3
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <MX_GPIO_Init+0x564>)
 800117e:	f001 fc2d 	bl	80029dc <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	; 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40020800 	.word	0x40020800
 8001198:	40022800 	.word	0x40022800
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40021400 	.word	0x40021400

080011ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  //MX_USB_HOST_Init();
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011b4:	f00f fdc8 	bl	8010d48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f00d fb1b 	bl	800e7f4 <osDelay>
 80011be:	e7fb      	b.n	80011b8 <StartDefaultTask+0xc>

080011c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d2:	f000 fe4d 	bl	8001e70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40001000 	.word	0x40001000

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	f06f 0001 	mvn.w	r0, #1
 800122e:	f000 ff1b 	bl	8002068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_CRC_MspInit+0x38>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10b      	bne.n	800126a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_CRC_MspInit+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_CRC_MspInit+0x3c>)
 8001258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_CRC_MspInit+0x3c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023000 	.word	0x40023000
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ac      	sub	sp, #176	; 0xb0
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	2284      	movs	r2, #132	; 0x84
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f010 fb7f 	bl	80119a4 <memset>
  if(hi2c->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HAL_I2C_MspInit+0x13c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d13d      	bne.n	800132c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fac0 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012ca:	f7ff ff8b 	bl	80011e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130a:	4619      	mov	r1, r3
 800130c:	482d      	ldr	r0, [pc, #180]	; (80013c4 <HAL_I2C_MspInit+0x144>)
 800130e:	f001 fb65 	bl	80029dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a2a      	ldr	r2, [pc, #168]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800132a:	e042      	b.n	80013b2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_I2C_MspInit+0x148>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d13d      	bne.n	80013b2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fa7c 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001352:	f7ff ff47 	bl	80011e4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800136e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001376:	2312      	movs	r3, #18
 8001378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001388:	2304      	movs	r3, #4
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800138e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001392:	4619      	mov	r1, r3
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <HAL_I2C_MspInit+0x14c>)
 8001396:	f001 fb21 	bl	80029dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 80013a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_I2C_MspInit+0x140>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
}
 80013b2:	bf00      	nop
 80013b4:	37b0      	adds	r7, #176	; 0xb0
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40005c00 	.word	0x40005c00
 80013cc:	40021c00 	.word	0x40021c00

080013d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_LTDC_MspInit+0x174>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	f040 80a3 	bne.w	800153a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013f4:	4b54      	ldr	r3, [pc, #336]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 80013fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001400:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a47      	ldr	r2, [pc, #284]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a41      	ldr	r2, [pc, #260]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_LTDC_MspInit+0x178>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001484:	2310      	movs	r3, #16
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001494:	230e      	movs	r3, #14
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	482b      	ldr	r0, [pc, #172]	; (800154c <HAL_LTDC_MspInit+0x17c>)
 80014a0:	f001 fa9c 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80014a4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b6:	230e      	movs	r3, #14
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4823      	ldr	r0, [pc, #140]	; (8001550 <HAL_LTDC_MspInit+0x180>)
 80014c2:	f001 fa8b 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80014c6:	23f7      	movs	r3, #247	; 0xf7
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d6:	230e      	movs	r3, #14
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	481c      	ldr	r0, [pc, #112]	; (8001554 <HAL_LTDC_MspInit+0x184>)
 80014e2:	f001 fa7b 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014f8:	2309      	movs	r3, #9
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <HAL_LTDC_MspInit+0x188>)
 8001504:	f001 fa6a 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001508:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800151a:	230e      	movs	r3, #14
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_LTDC_MspInit+0x18c>)
 8001526:	f001 fa59 	bl	80029dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2058      	movs	r0, #88	; 0x58
 8001530:	f000 fd9a 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001534:	2058      	movs	r0, #88	; 0x58
 8001536:	f000 fdb3 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40016800 	.word	0x40016800
 8001548:	40023800 	.word	0x40023800
 800154c:	40021000 	.word	0x40021000
 8001550:	40022400 	.word	0x40022400
 8001554:	40022800 	.word	0x40022800
 8001558:	40021800 	.word	0x40021800
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a3b      	ldr	r2, [pc, #236]	; (800166c <HAL_QSPI_MspInit+0x10c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d170      	bne.n	8001664 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	4a3a      	ldr	r2, [pc, #232]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6393      	str	r3, [r2, #56]	; 0x38
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_QSPI_MspInit+0x110>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80015e2:	2304      	movs	r3, #4
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015f2:	2309      	movs	r3, #9
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481d      	ldr	r0, [pc, #116]	; (8001674 <HAL_QSPI_MspInit+0x114>)
 80015fe:	f001 f9ed 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001612:	230a      	movs	r3, #10
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <HAL_QSPI_MspInit+0x118>)
 800161e:	f001 f9dd 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001622:	2304      	movs	r3, #4
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001632:	2309      	movs	r3, #9
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	480e      	ldr	r0, [pc, #56]	; (8001678 <HAL_QSPI_MspInit+0x118>)
 800163e:	f001 f9cd 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001642:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001654:	2309      	movs	r3, #9
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <HAL_QSPI_MspInit+0x11c>)
 8001660:	f001 f9bc 	bl	80029dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3730      	adds	r7, #48	; 0x30
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	a0001000 	.word	0xa0001000
 8001670:	40023800 	.word	0x40023800
 8001674:	40021000 	.word	0x40021000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020c00 	.word	0x40020c00

08001680 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_SD_MspInit+0x1b4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	f040 80c3 	bne.w	800182a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	4a63      	ldr	r2, [pc, #396]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ae:	6453      	str	r3, [r2, #68]	; 0x44
 80016b0:	4b61      	ldr	r3, [pc, #388]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a5d      	ldr	r2, [pc, #372]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HAL_SD_MspInit+0x1b8>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80016ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016fe:	230c      	movs	r3, #12
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	484c      	ldr	r0, [pc, #304]	; (800183c <HAL_SD_MspInit+0x1bc>)
 800170a:	f001 f967 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800170e:	2304      	movs	r3, #4
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800171e:	230c      	movs	r3, #12
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4845      	ldr	r0, [pc, #276]	; (8001840 <HAL_SD_MspInit+0x1c0>)
 800172a:	f001 f957 	bl	80029dc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001730:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_SD_MspInit+0x1c8>)
 8001732:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001756:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001762:	2220      	movs	r2, #32
 8001764:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800176e:	2204      	movs	r2, #4
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001774:	2203      	movs	r2, #3
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800177a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 8001782:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001788:	482e      	ldr	r0, [pc, #184]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800178a:	f000 fd81 	bl	8002290 <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001794:	f7ff fd26 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
 800179e:	4a29      	ldr	r2, [pc, #164]	; (8001844 <HAL_SD_MspInit+0x1c4>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_SD_MspInit+0x1d0>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017b4:	2240      	movs	r2, #64	; 0x40
 80017b6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017cc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017d8:	2220      	movs	r2, #32
 80017da:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017e4:	2204      	movs	r2, #4
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_SD_MspInit+0x1cc>)
 80017f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <HAL_SD_MspInit+0x1cc>)
 8001800:	f000 fd46 	bl	8002290 <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800180a:	f7ff fceb 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_SD_MspInit+0x1cc>)
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_SD_MspInit+0x1cc>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2031      	movs	r0, #49	; 0x31
 8001820:	f000 fc22 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001824:	2031      	movs	r0, #49	; 0x31
 8001826:	f000 fc3b 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	200006b4 	.word	0x200006b4
 8001848:	40026458 	.word	0x40026458
 800184c:	20000714 	.word	0x20000714
 8001850:	400264a0 	.word	0x400264a0

08001854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_SPI_MspInit+0xb4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d144      	bne.n	8001900 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_SPI_MspInit+0xb8>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_SPI_MspInit+0xb8>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_SPI_MspInit+0xb8>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_SPI_MspInit+0xb8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_SPI_MspInit+0xb8>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_SPI_MspInit+0xb8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_SPI_MspInit+0xb8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_SPI_MspInit+0xb8>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_SPI_MspInit+0xb8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ce:	2305      	movs	r3, #5
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <HAL_SPI_MspInit+0xbc>)
 80018da:	f001 f87f 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80018de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f0:	2305      	movs	r3, #5
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <HAL_SPI_MspInit+0xc0>)
 80018fc:	f001 f86e 	bl	80029dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40003800 	.word	0x40003800
 800190c:	40023800 	.word	0x40023800
 8001910:	40022000 	.word	0x40022000
 8001914:	40020400 	.word	0x40020400

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ae      	sub	sp, #184	; 0xb8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	2284      	movs	r2, #132	; 0x84
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f010 f833 	bl	80119a4 <memset>
  if(huart->Instance==USART1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a53      	ldr	r2, [pc, #332]	; (8001a90 <HAL_UART_MspInit+0x178>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d15d      	bne.n	8001a04 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800194c:	2300      	movs	r3, #0
 800194e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f003 ff75 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001960:	f7ff fc40 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c4:	2307      	movs	r3, #7
 80019c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4831      	ldr	r0, [pc, #196]	; (8001a98 <HAL_UART_MspInit+0x180>)
 80019d2:	f001 f803 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f0:	2307      	movs	r3, #7
 80019f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4827      	ldr	r0, [pc, #156]	; (8001a9c <HAL_UART_MspInit+0x184>)
 80019fe:	f000 ffed 	bl	80029dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a02:	e040      	b.n	8001a86 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <HAL_UART_MspInit+0x188>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d13b      	bne.n	8001a86 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a14:	2300      	movs	r3, #0
 8001a16:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 ff11 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8001a28:	f7ff fbdc 	bl	80011e4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a32:	f043 0320 	orr.w	r3, r3, #32
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_UART_MspInit+0x17c>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a74:	2308      	movs	r3, #8
 8001a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_UART_MspInit+0x18c>)
 8001a82:	f000 ffab 	bl	80029dc <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	37b8      	adds	r7, #184	; 0xb8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_FMC_MspInit+0x100>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d16d      	bne.n	8001ba0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001ac4:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_FMC_MspInit+0x100>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_FMC_MspInit+0x104>)
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	4a37      	ldr	r2, [pc, #220]	; (8001bac <HAL_FMC_MspInit+0x104>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_FMC_MspInit+0x104>)
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001ae2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ae6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af4:	230c      	movs	r3, #12
 8001af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	482c      	ldr	r0, [pc, #176]	; (8001bb0 <HAL_FMC_MspInit+0x108>)
 8001afe:	f000 ff6d 	bl	80029dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001b02:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b14:	230c      	movs	r3, #12
 8001b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <HAL_FMC_MspInit+0x10c>)
 8001b1e:	f000 ff5d 	bl	80029dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001b22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b34:	230c      	movs	r3, #12
 8001b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	481e      	ldr	r0, [pc, #120]	; (8001bb8 <HAL_FMC_MspInit+0x110>)
 8001b3e:	f000 ff4d 	bl	80029dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001b42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b54:	230c      	movs	r3, #12
 8001b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <HAL_FMC_MspInit+0x114>)
 8001b5e:	f000 ff3d 	bl	80029dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b62:	2328      	movs	r3, #40	; 0x28
 8001b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b72:	230c      	movs	r3, #12
 8001b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <HAL_FMC_MspInit+0x118>)
 8001b7c:	f000 ff2e 	bl	80029dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001b80:	2308      	movs	r3, #8
 8001b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b90:	230c      	movs	r3, #12
 8001b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <HAL_FMC_MspInit+0x11c>)
 8001b9a:	f000 ff1f 	bl	80029dc <HAL_GPIO_Init>
 8001b9e:	e000      	b.n	8001ba2 <HAL_FMC_MspInit+0xfa>
    return;
 8001ba0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000920 	.word	0x20000920
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021c00 	.word	0x40021c00
 8001bc4:	40020800 	.word	0x40020800

08001bc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001bd0:	f7ff ff6a 	bl	8001aa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_InitTick+0xe0>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <HAL_InitTick+0xe0>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_InitTick+0xe0>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c04:	f107 0210 	add.w	r2, r7, #16
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fde6 	bl	80057e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c1e:	f003 fdb7 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8001c22:	6378      	str	r0, [r7, #52]	; 0x34
 8001c24:	e004      	b.n	8001c30 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c26:	f003 fdb3 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_InitTick+0xe4>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_InitTick+0xec>)
 8001c42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c66:	f005 fde7 	bl	8007838 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11b      	bne.n	8001cb0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <HAL_InitTick+0xe8>)
 8001c7a:	f005 fe3f 	bl	80078fc <HAL_TIM_Base_Start_IT>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c8c:	2036      	movs	r0, #54	; 0x36
 8001c8e:	f000 fa07 	bl	80020a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d808      	bhi.n	8001caa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	2036      	movs	r0, #54	; 0x36
 8001c9e:	f000 f9e3 	bl	8002068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0xf0>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e002      	b.n	8001cb0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3738      	adds	r7, #56	; 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	20000924 	.word	0x20000924
 8001cc8:	40001000 	.word	0x40001000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <SDMMC1_IRQHandler+0x10>)
 8001d02:	f004 fc0f 	bl	8006524 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000630 	.word	0x20000630

08001d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM6_DAC_IRQHandler+0x10>)
 8001d16:	f005 fe69 	bl	80079ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000924 	.word	0x20000924

08001d24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA2_Stream3_IRQHandler+0x10>)
 8001d2a:	f000 fbe1 	bl	80024f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200006b4 	.word	0x200006b4

08001d38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA2_Stream6_IRQHandler+0x10>)
 8001d3e:	f000 fbd7 	bl	80024f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000714 	.word	0x20000714

08001d4c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <OTG_HS_IRQHandler+0x10>)
 8001d52:	f001 fdf9 	bl	8003948 <HAL_PCD_IRQHandler>
  //HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20008fc0 	.word	0x20008fc0

08001d60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <LTDC_IRQHandler+0x10>)
 8001d66:	f001 fa0f 	bl	8003188 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000053c 	.word	0x2000053c

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f00f fdb4 	bl	8011910 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20050000 	.word	0x20050000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	20000970 	.word	0x20000970
 8001ddc:	200094d8 	.word	0x200094d8

08001de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e20:	4c0b      	ldr	r4, [pc, #44]	; (8001e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ffd7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f00f fd73 	bl	801191c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7fe fba1 	bl	800057c <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001e48:	08011de4 	.word	0x08011de4
  ldr r2, =_sbss
 8001e4c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001e50:	200094d8 	.word	0x200094d8

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>

08001e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f000 f8f9 	bl	8002052 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff febb 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e66:	f7ff f9c3 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000974 	.word	0x20000974

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000974 	.word	0x20000974

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	05fa0000 	.word	0x05fa0000

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff4c 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207a:	f7ff ff61 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 800207e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff ffb1 	bl	8001fec <NVIC_EncodePriority>
 800208a:	4602      	mov	r2, r0
 800208c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff80 	bl	8001f98 <__NVIC_SetPriority>
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff54 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e054      	b.n	8002178 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7f5b      	ldrb	r3, [r3, #29]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff f8ae 	bl	8001240 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_CRC_Init+0xc4>)
 80020f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0218 	bic.w	r2, r2, #24
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	e00c      	b.n	8002126 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f834 	bl	8002184 <HAL_CRCEx_Polynomial_Set>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e028      	b.n	8002178 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	795b      	ldrb	r3, [r3, #5]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	e004      	b.n	8002144 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6912      	ldr	r2, [r2, #16]
 8002142:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	04c11db7 	.word	0x04c11db7

08002184 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002194:	231f      	movs	r3, #31
 8002196:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002198:	bf00      	nop
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	613a      	str	r2, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b18      	cmp	r3, #24
 80021bc:	d846      	bhi.n	800224c <HAL_CRCEx_Polynomial_Set+0xc8>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	08002253 	.word	0x08002253
 80021c8:	0800224d 	.word	0x0800224d
 80021cc:	0800224d 	.word	0x0800224d
 80021d0:	0800224d 	.word	0x0800224d
 80021d4:	0800224d 	.word	0x0800224d
 80021d8:	0800224d 	.word	0x0800224d
 80021dc:	0800224d 	.word	0x0800224d
 80021e0:	0800224d 	.word	0x0800224d
 80021e4:	08002241 	.word	0x08002241
 80021e8:	0800224d 	.word	0x0800224d
 80021ec:	0800224d 	.word	0x0800224d
 80021f0:	0800224d 	.word	0x0800224d
 80021f4:	0800224d 	.word	0x0800224d
 80021f8:	0800224d 	.word	0x0800224d
 80021fc:	0800224d 	.word	0x0800224d
 8002200:	0800224d 	.word	0x0800224d
 8002204:	08002235 	.word	0x08002235
 8002208:	0800224d 	.word	0x0800224d
 800220c:	0800224d 	.word	0x0800224d
 8002210:	0800224d 	.word	0x0800224d
 8002214:	0800224d 	.word	0x0800224d
 8002218:	0800224d 	.word	0x0800224d
 800221c:	0800224d 	.word	0x0800224d
 8002220:	0800224d 	.word	0x0800224d
 8002224:	08002229 	.word	0x08002229
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b06      	cmp	r3, #6
 800222c:	d913      	bls.n	8002256 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002232:	e010      	b.n	8002256 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d90f      	bls.n	800225a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800223e:	e00c      	b.n	800225a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	d90b      	bls.n	800225e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800224a:	e008      	b.n	800225e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
      break;
 8002250:	e006      	b.n	8002260 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002252:	bf00      	nop
 8002254:	e004      	b.n	8002260 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800225e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 0118 	bic.w	r1, r3, #24
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fdfc 	bl	8001e98 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e099      	b.n	80023e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	e00f      	b.n	80022ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ce:	f7ff fde3 	bl	8001e98 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d908      	bls.n	80022ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e078      	b.n	80023e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e8      	bne.n	80022ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_DMA_Init+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4313      	orrs	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b04      	cmp	r3, #4
 8002380:	d117      	bne.n	80023b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 faa5 	bl	80028e4 <DMA_CheckFifoParam>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ae:	2301      	movs	r3, #1
 80023b0:	e016      	b.n	80023e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa5c 	bl	8002878 <DMA_CalcBaseAndBitshift>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	223f      	movs	r2, #63	; 0x3f
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	f010803f 	.word	0xf010803f

080023ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Start_IT+0x26>
 800240e:	2302      	movs	r3, #2
 8002410:	e048      	b.n	80024a4 <HAL_DMA_Start_IT+0xb8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d137      	bne.n	8002496 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f9ee 	bl	800281c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	223f      	movs	r2, #63	; 0x3f
 8002446:	409a      	lsls	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0216 	orr.w	r2, r2, #22
 800245a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0208 	orr.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e005      	b.n	80024a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d004      	beq.n	80024ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00c      	b.n	80024e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2205      	movs	r2, #5
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024fc:	4b8e      	ldr	r3, [pc, #568]	; (8002738 <HAL_DMA_IRQHandler+0x248>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a8e      	ldr	r2, [pc, #568]	; (800273c <HAL_DMA_IRQHandler+0x24c>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0a9b      	lsrs	r3, r3, #10
 8002508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2208      	movs	r2, #8
 800251c:	409a      	lsls	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01a      	beq.n	800255c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0204 	bic.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2208      	movs	r2, #8
 800254a:	409a      	lsls	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2204      	movs	r2, #4
 8002598:	409a      	lsls	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	2204      	movs	r2, #4
 80025b6:	409a      	lsls	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0204 	orr.w	r2, r3, #4
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2210      	movs	r2, #16
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d043      	beq.n	8002660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d03c      	beq.n	8002660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2210      	movs	r2, #16
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d018      	beq.n	8002632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d108      	bne.n	8002620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d024      	beq.n	8002660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
 800261e:	e01f      	b.n	8002660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
 8002630:	e016      	b.n	8002660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0208 	bic.w	r2, r2, #8
 800264e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2220      	movs	r2, #32
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 808f 	beq.w	8002790 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8087 	beq.w	8002790 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2220      	movs	r2, #32
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b05      	cmp	r3, #5
 8002698:	d136      	bne.n	8002708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0216 	bic.w	r2, r2, #22
 80026a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_DMA_IRQHandler+0x1da>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	223f      	movs	r2, #63	; 0x3f
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07e      	beq.n	80027fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
        }
        return;
 8002706:	e079      	b.n	80027fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01d      	beq.n	8002752 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	2b00      	cmp	r3, #0
 800272a:	d031      	beq.n	8002790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e02c      	b.n	8002790 <HAL_DMA_IRQHandler+0x2a0>
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000
 800273c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d023      	beq.n	8002790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
 8002750:	e01e      	b.n	8002790 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10f      	bne.n	8002780 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0210 	bic.w	r2, r2, #16
 800276e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	2b00      	cmp	r3, #0
 8002796:	d032      	beq.n	80027fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d022      	beq.n	80027ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2205      	movs	r2, #5
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	3301      	adds	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d307      	bcc.n	80027d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f2      	bne.n	80027bc <HAL_DMA_IRQHandler+0x2cc>
 80027d6:	e000      	b.n	80027da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e000      	b.n	80027fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80027fc:	bf00      	nop
    }
  }
}
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002838:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d108      	bne.n	800285c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800285a:	e007      	b.n	800286c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3b10      	subs	r3, #16
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <DMA_CalcBaseAndBitshift+0x60>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <DMA_CalcBaseAndBitshift+0x64>)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d908      	bls.n	80028b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <DMA_CalcBaseAndBitshift+0x68>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	; 0x58
 80028b6:	e006      	b.n	80028c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <DMA_CalcBaseAndBitshift+0x68>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	aaaaaaab 	.word	0xaaaaaaab
 80028dc:	08011d34 	.word	0x08011d34
 80028e0:	fffffc00 	.word	0xfffffc00

080028e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11f      	bne.n	800293e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d856      	bhi.n	80029b2 <DMA_CheckFifoParam+0xce>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <DMA_CheckFifoParam+0x28>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	0800292f 	.word	0x0800292f
 8002914:	0800291d 	.word	0x0800291d
 8002918:	080029b3 	.word	0x080029b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d046      	beq.n	80029b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e043      	b.n	80029b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002936:	d140      	bne.n	80029ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e03d      	b.n	80029ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d121      	bne.n	800298c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d837      	bhi.n	80029be <DMA_CheckFifoParam+0xda>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <DMA_CheckFifoParam+0x70>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002965 	.word	0x08002965
 8002958:	0800296b 	.word	0x0800296b
 800295c:	08002965 	.word	0x08002965
 8002960:	0800297d 	.word	0x0800297d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e030      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d025      	beq.n	80029c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297a:	e022      	b.n	80029c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002984:	d11f      	bne.n	80029c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800298a:	e01c      	b.n	80029c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d903      	bls.n	800299a <DMA_CheckFifoParam+0xb6>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d003      	beq.n	80029a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002998:	e018      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      break;
 800299e:	e015      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e00b      	b.n	80029ca <DMA_CheckFifoParam+0xe6>
      break;
 80029b2:	bf00      	nop
 80029b4:	e00a      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e008      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e006      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;
 80029be:	bf00      	nop
 80029c0:	e004      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;   
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <DMA_CheckFifoParam+0xe8>
      break;
 80029ca:	bf00      	nop
    }
  } 
  
  return status; 
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e175      	b.n	8002ce8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f040 8164 	bne.w	8002ce2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d005      	beq.n	8002a32 <HAL_GPIO_Init+0x56>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d130      	bne.n	8002a94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 0201 	and.w	r2, r3, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d017      	beq.n	8002ad0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d123      	bne.n	8002b24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80be 	beq.w	8002ce2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_GPIO_Init+0x324>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_GPIO_Init+0x324>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_GPIO_Init+0x324>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b7e:	4a61      	ldr	r2, [pc, #388]	; (8002d04 <HAL_GPIO_Init+0x328>)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_GPIO_Init+0x32c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d037      	beq.n	8002c1a <HAL_GPIO_Init+0x23e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a57      	ldr	r2, [pc, #348]	; (8002d0c <HAL_GPIO_Init+0x330>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d031      	beq.n	8002c16 <HAL_GPIO_Init+0x23a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_GPIO_Init+0x334>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_Init+0x236>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_GPIO_Init+0x338>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x232>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_GPIO_Init+0x33c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x22e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a53      	ldr	r2, [pc, #332]	; (8002d1c <HAL_GPIO_Init+0x340>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x22a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_GPIO_Init+0x344>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x226>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_GPIO_Init+0x348>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x222>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a50      	ldr	r2, [pc, #320]	; (8002d28 <HAL_GPIO_Init+0x34c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x21e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4f      	ldr	r2, [pc, #316]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x21a>
 8002bf2:	2309      	movs	r3, #9
 8002bf4:	e012      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	e010      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e00e      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e00c      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00a      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c06:	2305      	movs	r3, #5
 8002c08:	e008      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c2c:	4935      	ldr	r1, [pc, #212]	; (8002d04 <HAL_GPIO_Init+0x328>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c64:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c88:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_GPIO_Init+0x354>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f ae86 	bls.w	80029fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40020400 	.word	0x40020400
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40021400 	.word	0x40021400
 8002d20:	40021800 	.word	0x40021800
 8002d24:	40021c00 	.word	0x40021c00
 8002d28:	40022000 	.word	0x40022000
 8002d2c:	40022400 	.word	0x40022400
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e001      	b.n	8002d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fa5e 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	e006      	b.n	8002e20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d104      	bne.n	8002e32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_I2C_Init+0x11c>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69d9      	ldr	r1, [r3, #28]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	02008000 	.word	0x02008000

08002eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d138      	bne.n	8002f40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e032      	b.n	8002f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d139      	bne.n	8002fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e033      	b.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2224      	movs	r2, #36	; 0x24
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0bf      	b.n	800317a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe f9de 	bl	80013d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800302a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6999      	ldr	r1, [r3, #24]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003040:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_LTDC_Init+0x19c>)
 800305c:	400b      	ands	r3, r1
 800305e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_LTDC_Init+0x19c>)
 800308a:	400b      	ands	r3, r1
 800308c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6919      	ldr	r1, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_LTDC_Init+0x19c>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6919      	ldr	r1, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6959      	ldr	r1, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_LTDC_Init+0x19c>)
 80030e6:	400b      	ands	r3, r1
 80030e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6959      	ldr	r1, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0206 	orr.w	r2, r2, #6
 8003156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	f000f800 	.word	0xf000f800

08003188 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_LTDC_IRQHandler+0x6a>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01e      	beq.n	80031f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2204      	movs	r2, #4
 80031e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f86f 	bl	80032d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <HAL_LTDC_IRQHandler+0xbc>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01e      	beq.n	8003244 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0202 	bic.w	r2, r2, #2
 8003214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2202      	movs	r2, #2
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003224:	f043 0202 	orr.w	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f846 	bl	80032d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01b      	beq.n	8003286 <HAL_LTDC_IRQHandler+0xfe>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d016      	beq.n	8003286 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2201      	movs	r2, #1
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f82f 	bl	80032e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_LTDC_IRQHandler+0x140>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0208 	bic.w	r2, r2, #8
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2208      	movs	r2, #8
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f818 	bl	80032f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_LTDC_ConfigLayer+0x1a>
 8003322:	2302      	movs	r3, #2
 8003324:	e02c      	b.n	8003380 <HAL_LTDC_ConfigLayer+0x74>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2134      	movs	r1, #52	; 0x34
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f811 	bl	8003388 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bdb0      	pop	{r4, r5, r7, pc}

08003388 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	4413      	add	r3, r2
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	01db      	lsls	r3, r3, #7
 80033b4:	4413      	add	r3, r2
 80033b6:	3384      	adds	r3, #132	; 0x84
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	4611      	mov	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	01d2      	lsls	r2, r2, #7
 80033c4:	440a      	add	r2, r1
 80033c6:	3284      	adds	r2, #132	; 0x84
 80033c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80033cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80033de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	01db      	lsls	r3, r3, #7
 80033ec:	440b      	add	r3, r1
 80033ee:	3384      	adds	r3, #132	; 0x84
 80033f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80033f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003406:	4413      	add	r3, r2
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	01db      	lsls	r3, r3, #7
 8003416:	4413      	add	r3, r2
 8003418:	3384      	adds	r3, #132	; 0x84
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	4611      	mov	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	01d2      	lsls	r2, r2, #7
 8003426:	440a      	add	r2, r1
 8003428:	3284      	adds	r2, #132	; 0x84
 800342a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800342e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343e:	4413      	add	r3, r2
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	01db      	lsls	r3, r3, #7
 800344c:	440b      	add	r3, r1
 800344e:	3384      	adds	r3, #132	; 0x84
 8003450:	4619      	mov	r1, r3
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	01db      	lsls	r3, r3, #7
 8003462:	4413      	add	r3, r2
 8003464:	3384      	adds	r3, #132	; 0x84
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	4611      	mov	r1, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	01d2      	lsls	r2, r2, #7
 8003472:	440a      	add	r2, r1
 8003474:	3284      	adds	r2, #132	; 0x84
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	4413      	add	r3, r2
 8003488:	3384      	adds	r3, #132	; 0x84
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	4413      	add	r3, r2
 80034ba:	3384      	adds	r3, #132	; 0x84
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	4413      	add	r3, r2
 80034ca:	3384      	adds	r3, #132	; 0x84
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d8:	461a      	mov	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	431a      	orrs	r2, r3
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	01db      	lsls	r3, r3, #7
 80034ec:	440b      	add	r3, r1
 80034ee:	3384      	adds	r3, #132	; 0x84
 80034f0:	4619      	mov	r1, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4413      	add	r3, r2
 8003504:	3384      	adds	r3, #132	; 0x84
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4611      	mov	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	01d2      	lsls	r2, r2, #7
 8003512:	440a      	add	r2, r1
 8003514:	3284      	adds	r2, #132	; 0x84
 8003516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	01db      	lsls	r3, r3, #7
 8003526:	4413      	add	r3, r2
 8003528:	3384      	adds	r3, #132	; 0x84
 800352a:	461a      	mov	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	01db      	lsls	r3, r3, #7
 800353c:	4413      	add	r3, r2
 800353e:	3384      	adds	r3, #132	; 0x84
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	01db      	lsls	r3, r3, #7
 800354c:	440b      	add	r3, r1
 800354e:	3384      	adds	r3, #132	; 0x84
 8003550:	4619      	mov	r1, r3
 8003552:	4b58      	ldr	r3, [pc, #352]	; (80036b4 <LTDC_SetConfig+0x32c>)
 8003554:	4013      	ands	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	6809      	ldr	r1, [r1, #0]
 8003564:	4608      	mov	r0, r1
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	01c9      	lsls	r1, r1, #7
 800356a:	4401      	add	r1, r0
 800356c:	3184      	adds	r1, #132	; 0x84
 800356e:	4313      	orrs	r3, r2
 8003570:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4413      	add	r3, r2
 800357e:	3384      	adds	r3, #132	; 0x84
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	01db      	lsls	r3, r3, #7
 800358c:	4413      	add	r3, r2
 800358e:	3384      	adds	r3, #132	; 0x84
 8003590:	461a      	mov	r2, r3
 8003592:	2300      	movs	r3, #0
 8003594:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	01db      	lsls	r3, r3, #7
 80035a0:	4413      	add	r3, r2
 80035a2:	3384      	adds	r3, #132	; 0x84
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80035b4:	2304      	movs	r3, #4
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e01b      	b.n	80035f2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80035c2:	2303      	movs	r3, #3
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e014      	b.n	80035f2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00b      	beq.n	80035e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d007      	beq.n	80035e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d003      	beq.n	80035e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d102      	bne.n	80035ee <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80035e8:	2302      	movs	r3, #2
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e001      	b.n	80035f2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4413      	add	r3, r2
 80035fe:	3384      	adds	r3, #132	; 0x84
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	01d2      	lsls	r2, r2, #7
 800360c:	440a      	add	r2, r1
 800360e:	3284      	adds	r2, #132	; 0x84
 8003610:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1acb      	subs	r3, r1, r3
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	4608      	mov	r0, r1
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	01c9      	lsls	r1, r1, #7
 800363e:	4401      	add	r1, r0
 8003640:	3184      	adds	r1, #132	; 0x84
 8003642:	4313      	orrs	r3, r2
 8003644:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	01db      	lsls	r3, r3, #7
 8003650:	4413      	add	r3, r2
 8003652:	3384      	adds	r3, #132	; 0x84
 8003654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	01db      	lsls	r3, r3, #7
 8003660:	440b      	add	r3, r1
 8003662:	3384      	adds	r3, #132	; 0x84
 8003664:	4619      	mov	r1, r3
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <LTDC_SetConfig+0x330>)
 8003668:	4013      	ands	r3, r2
 800366a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	01db      	lsls	r3, r3, #7
 8003676:	4413      	add	r3, r2
 8003678:	3384      	adds	r3, #132	; 0x84
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	01db      	lsls	r3, r3, #7
 800368c:	4413      	add	r3, r2
 800368e:	3384      	adds	r3, #132	; 0x84
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4611      	mov	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	01d2      	lsls	r2, r2, #7
 800369c:	440a      	add	r2, r1
 800369e:	3284      	adds	r2, #132	; 0x84
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]
}
 80036a6:	bf00      	nop
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	fffff8f8 	.word	0xfffff8f8
 80036b8:	fffff800 	.word	0xfffff800

080036bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	b08f      	sub	sp, #60	; 0x3c
 80036c0:	af0a      	add	r7, sp, #40	; 0x28
 80036c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e116      	b.n	80038fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f00d fd3b 	bl	8011164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2203      	movs	r2, #3
 80036f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f005 ff0c 	bl	800952a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	687e      	ldr	r6, [r7, #4]
 800371a:	466d      	mov	r5, sp
 800371c:	f106 0410 	add.w	r4, r6, #16
 8003720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800372c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003730:	1d33      	adds	r3, r6, #4
 8003732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	f005 fded 	bl	8009314 <USB_CoreInit>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d7      	b.n	80038fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f005 fefa 	bl	800954c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e04a      	b.n	80037f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	333d      	adds	r3, #61	; 0x3d
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	333c      	adds	r3, #60	; 0x3c
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	b298      	uxth	r0, r3
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3344      	adds	r3, #68	; 0x44
 800379a:	4602      	mov	r2, r0
 800379c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3340      	adds	r3, #64	; 0x40
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3348      	adds	r3, #72	; 0x48
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	334c      	adds	r3, #76	; 0x4c
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3354      	adds	r3, #84	; 0x54
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	3301      	adds	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3af      	bcc.n	800375e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e044      	b.n	800388e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3301      	adds	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d3b5      	bcc.n	8003804 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	687e      	ldr	r6, [r7, #4]
 80038a0:	466d      	mov	r5, sp
 80038a2:	f106 0410 	add.w	r4, r6, #16
 80038a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b6:	1d33      	adds	r3, r6, #4
 80038b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f005 fe92 	bl	80095e4 <USB_DevInit>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e014      	b.n	80038fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d102      	bne.n	80038f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f001 f9a8 	bl	8004c40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 ffe0 	bl	800a8ba <USB_DevDisconnect>

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003904 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_PCD_Start+0x16>
 8003916:	2302      	movs	r3, #2
 8003918:	e012      	b.n	8003940 <HAL_PCD_Start+0x3c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f005 fdee 	bl	8009508 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f006 ffa1 	bl	800a878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b08d      	sub	sp, #52	; 0x34
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f007 f85f 	bl	800aa22 <USB_GetMode>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 84b7 	bne.w	80042da <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f006 ffc3 	bl	800a8fc <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 84ad 	beq.w	80042d8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f006 ffb0 	bl	800a8fc <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d107      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 0202 	and.w	r2, r2, #2
 80039b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f006 ff9e 	bl	800a8fc <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d161      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0210 	bic.w	r2, r2, #16
 80039d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	0c5b      	lsrs	r3, r3, #17
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d124      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d035      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6a38      	ldr	r0, [r7, #32]
 8003a26:	f006 fdd5 	bl	800a5d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a36:	441a      	add	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a48:	441a      	add	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
 8003a4e:	e016      	b.n	8003a7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	0c5b      	lsrs	r3, r3, #17
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d110      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a62:	2208      	movs	r2, #8
 8003a64:	4619      	mov	r1, r3
 8003a66:	6a38      	ldr	r0, [r7, #32]
 8003a68:	f006 fdb4 	bl	800a5d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a78:	441a      	add	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0210 	orr.w	r2, r2, #16
 8003a8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f006 ff32 	bl	800a8fc <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aa2:	f040 80a7 	bne.w	8003bf4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f006 ff37 	bl	800a922 <USB_ReadDevAllOutEpInterrupt>
 8003ab4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ab6:	e099      	b.n	8003bec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808e 	beq.w	8003be0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f006 ff5b 	bl	800a98a <USB_ReadDevOutEPInterrupt>
 8003ad4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	2301      	movs	r3, #1
 8003af0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 ff1d 	bl	8004934 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	2308      	movs	r3, #8
 8003b14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fff3 	bl	8004b04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2310      	movs	r3, #16
 8003b38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d030      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d109      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	78db      	ldrb	r3, [r3, #3]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f00d fc4e 	bl	8011430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	3301      	adds	r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f47f af62 	bne.w	8003ab8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f006 fe7f 	bl	800a8fc <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c08:	f040 80db 	bne.w	8003dc2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f006 fea0 	bl	800a956 <USB_ReadDevAllInEpInterrupt>
 8003c16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c1c:	e0cd      	b.n	8003dba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80c2 	beq.w	8003dae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f006 fec6 	bl	800a9c6 <USB_ReadDevInEPInterrupt>
 8003c3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d057      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69f9      	ldr	r1, [r7, #28]
 8003c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c66:	4013      	ands	r3, r2
 8003c68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d132      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	334c      	adds	r3, #76	; 0x4c
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4403      	add	r3, r0
 8003ca4:	3348      	adds	r3, #72	; 0x48
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4419      	add	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4403      	add	r3, r0
 8003cb8:	334c      	adds	r3, #76	; 0x4c
 8003cba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3354      	adds	r3, #84	; 0x54
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	f006 fecf 	bl	800aa88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f00d fb18 	bl	8011326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2308      	movs	r3, #8
 8003d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2340      	movs	r3, #64	; 0x40
 8003d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d56:	6a38      	ldr	r0, [r7, #32]
 8003d58:	f005 fda2 	bl	80098a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3338      	adds	r3, #56	; 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	78db      	ldrb	r3, [r3, #3]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d108      	bne.n	8003d8a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00d fb65 	bl	8011454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	461a      	mov	r2, r3
 8003d98:	2302      	movs	r3, #2
 8003d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fd35 	bl	8004818 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	3301      	adds	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f af2e 	bne.w	8003c1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f006 fd98 	bl	800a8fc <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd6:	d122      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00d fd05 	bl	8011810 <HAL_PCDEx_LPM_Callback>
 8003e06:	e002      	b.n	8003e0e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f00d fb03 	bl	8011414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fd6a 	bl	800a8fc <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d112      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f00d fabf 	bl	80113c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f006 fd4c 	bl	800a8fc <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6e:	d121      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e7e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d111      	bne.n	8003eae <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f00d fcb2 	bl	8011810 <HAL_PCDEx_LPM_Callback>
 8003eac:	e002      	b.n	8003eb4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f00d fa8a 	bl	80113c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f006 fd1f 	bl	800a8fc <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	f040 80b7 	bne.w	800403a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f005 fcda 	bl	80098a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef0:	e046      	b.n	8003f80 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	461a      	mov	r2, r3
 8003f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3b3      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb6:	f043 030b 	orr.w	r3, r3, #11
 8003fba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fcc:	f043 030b 	orr.w	r3, r3, #11
 8003fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd2:	e015      	b.n	8004000 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f242 032b 	movw	r3, #8235	; 0x202b
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f043 030b 	orr.w	r3, r3, #11
 8003ffe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004012:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004024:	461a      	mov	r2, r3
 8004026:	f006 fd2f 	bl	800aa88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f006 fc5c 	bl	800a8fc <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	d124      	bne.n	800409a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f006 fcf3 	bl	800aa40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f005 fc9b 	bl	800999a <USB_GetDevSpeed>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681c      	ldr	r4, [r3, #0]
 8004070:	f001 fb82 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8004074:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	4620      	mov	r0, r4
 8004080:	f005 f9a0 	bl	80093c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f00d f976 	bl	8011376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004098:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f006 fc2c 	bl	800a8fc <USB_ReadInterrupts>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d10a      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f00d f953 	bl	801135a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 0208 	and.w	r2, r2, #8
 80040c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f006 fc17 	bl	800a8fc <USB_ReadInterrupts>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d122      	bne.n	800411e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
 80040e8:	e014      	b.n	8004114 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	b2db      	uxtb	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb27 	bl	800475c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411a:	429a      	cmp	r2, r3
 800411c:	d3e5      	bcc.n	80040ea <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fbea 	bl	800a8fc <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004132:	d13b      	bne.n	80041ac <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004134:	2301      	movs	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
 8004138:	e02b      	b.n	8004192 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3340      	adds	r3, #64	; 0x40
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d115      	bne.n	800418c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004160:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	da12      	bge.n	800418c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fae8 	bl	800475c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	3301      	adds	r3, #1
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	429a      	cmp	r2, r3
 800419a:	d3ce      	bcc.n	800413a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 fba3 	bl	800a8fc <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c0:	d155      	bne.n	800426e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c2:	2301      	movs	r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e045      	b.n	8004254 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d12e      	bne.n	800424e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da2b      	bge.n	800424e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004202:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004206:	429a      	cmp	r2, r3
 8004208:	d121      	bne.n	800424e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424a:	6053      	str	r3, [r2, #4]
            break;
 800424c:	e007      	b.n	800425e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	3301      	adds	r3, #1
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	429a      	cmp	r2, r3
 800425c:	d3b4      	bcc.n	80041c8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800426c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f006 fb42 	bl	800a8fc <USB_ReadInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d10a      	bne.n	800429a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f00d f8f7 	bl	8011478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f006 fb2c 	bl	800a8fc <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d115      	bne.n	80042da <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f00d f8e7 	bl	8011494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	e000      	b.n	80042da <HAL_PCD_IRQHandler+0x992>
      return;
 80042d8:	bf00      	nop
    }
  }
}
 80042da:	3734      	adds	r7, #52	; 0x34
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}

080042e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_PCD_SetAddress+0x1a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e013      	b.n	8004322 <HAL_PCD_SetAddress+0x42>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f006 fa8a 	bl	800a82c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	4608      	mov	r0, r1
 8004334:	4611      	mov	r1, r2
 8004336:	461a      	mov	r2, r3
 8004338:	4603      	mov	r3, r0
 800433a:	70fb      	strb	r3, [r7, #3]
 800433c:	460b      	mov	r3, r1
 800433e:	803b      	strh	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da0f      	bge.n	8004370 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	3338      	adds	r3, #56	; 0x38
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	705a      	strb	r2, [r3, #1]
 800436e:	e00f      	b.n	8004390 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800439c:	883a      	ldrh	r2, [r7, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	78ba      	ldrb	r2, [r7, #2]
 80043a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043ba:	78bb      	ldrb	r3, [r7, #2]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d102      	bne.n	80043c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_PCD_EP_Open+0xaa>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e00e      	b.n	80043f2 <HAL_PCD_EP_Open+0xc8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f005 fafe 	bl	80099e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80043f0:	7afb      	ldrb	r3, [r7, #11]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da0f      	bge.n	800442e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3338      	adds	r3, #56	; 0x38
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	705a      	strb	r2, [r3, #1]
 800442c:	e00f      	b.n	800444e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_PCD_EP_Close+0x6e>
 8004464:	2302      	movs	r3, #2
 8004466:	e00e      	b.n	8004486 <HAL_PCD_EP_Close+0x8c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 fb3c 	bl	8009af4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	460b      	mov	r3, r1
 800449c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449e:	7afb      	ldrb	r3, [r7, #11]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2200      	movs	r2, #0
 80044c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d0:	7afb      	ldrb	r3, [r7, #11]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	f005 fe23 	bl	800a14c <USB_EP0StartXfer>
 8004506:	e008      	b.n	800451a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	f005 fbc9 	bl	8009cac <USB_EPStartXfer>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	460b      	mov	r3, r1
 8004562:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004564:	7afb      	ldrb	r3, [r7, #11]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	3338      	adds	r3, #56	; 0x38
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	3304      	adds	r3, #4
 800457a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2201      	movs	r2, #1
 8004592:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	b2da      	uxtb	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d102      	bne.n	80045ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	f005 fdc1 	bl	800a14c <USB_EP0StartXfer>
 80045ca:	e008      	b.n	80045de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	f005 fb67 	bl	8009cac <USB_EPStartXfer>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d901      	bls.n	8004606 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e050      	b.n	80046a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da0f      	bge.n	800462e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	3338      	adds	r3, #56	; 0x38
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	3304      	adds	r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	705a      	strb	r2, [r3, #1]
 800462c:	e00d      	b.n	800464a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_PCD_EP_SetStall+0x82>
 8004666:	2302      	movs	r3, #2
 8004668:	e01e      	b.n	80046a8 <HAL_PCD_EP_SetStall+0xc0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	4618      	mov	r0, r3
 800467a:	f006 f803 	bl	800a684 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	b2d9      	uxtb	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004698:	461a      	mov	r2, r3
 800469a:	f006 f9f5 	bl	800aa88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d901      	bls.n	80046ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e042      	b.n	8004754 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da0f      	bge.n	80046f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	3338      	adds	r3, #56	; 0x38
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	3304      	adds	r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	705a      	strb	r2, [r3, #1]
 80046f4:	e00f      	b.n	8004716 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_PCD_EP_ClrStall+0x86>
 8004732:	2302      	movs	r3, #2
 8004734:	e00e      	b.n	8004754 <HAL_PCD_EP_ClrStall+0xa4>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	4618      	mov	r0, r3
 8004746:	f006 f80b 	bl	800a760 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da0c      	bge.n	800478a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	3338      	adds	r3, #56	; 0x38
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e00c      	b.n	80047a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f005 fe2a 	bl	800a404 <USB_EPStopXfer>
 80047b0:	4603      	mov	r3, r0
 80047b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047b4:	7afb      	ldrb	r3, [r7, #11]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_PCD_EP_Flush+0x1a>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e01b      	b.n	8004810 <HAL_PCD_EP_Flush+0x52>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80047e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da09      	bge.n	80047fc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f005 f853 	bl	80098a0 <USB_FlushTxFifo>
 80047fa:	e004      	b.n	8004806 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f005 f881 	bl	8009908 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	3338      	adds	r3, #56	; 0x38
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	3304      	adds	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	d901      	bls.n	8004850 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e06c      	b.n	800492a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	429a      	cmp	r2, r3
 8004864:	d902      	bls.n	800486c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	3303      	adds	r3, #3
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004874:	e02b      	b.n	80048ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	429a      	cmp	r2, r3
 800488a:	d902      	bls.n	8004892 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3303      	adds	r3, #3
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6919      	ldr	r1, [r3, #16]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4603      	mov	r3, r0
 80048b0:	6978      	ldr	r0, [r7, #20]
 80048b2:	f005 fe51 	bl	800a558 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d809      	bhi.n	80048f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d203      	bcs.n	80048f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1be      	bne.n	8004876 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	429a      	cmp	r2, r3
 8004902:	d811      	bhi.n	8004928 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	2201      	movs	r2, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	43db      	mvns	r3, r3
 800491e:	6939      	ldr	r1, [r7, #16]
 8004920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004924:	4013      	ands	r3, r2
 8004926:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	333c      	adds	r3, #60	; 0x3c
 800494c:	3304      	adds	r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d17b      	bne.n	8004a62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	4a61      	ldr	r2, [pc, #388]	; (8004afc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f240 80b9 	bls.w	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80b3 	beq.w	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499c:	6093      	str	r3, [r2, #8]
 800499e:	e0a7      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	461a      	mov	r2, r3
 80049b8:	2320      	movs	r3, #32
 80049ba:	6093      	str	r3, [r2, #8]
 80049bc:	e098      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8093 	bne.w	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4a4b      	ldr	r2, [pc, #300]	; (8004afc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d90f      	bls.n	80049f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	6093      	str	r3, [r2, #8]
 80049f0:	e07e      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	0159      	lsls	r1, r3, #5
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	440b      	add	r3, r1
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d114      	bne.n	8004a54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2101      	movs	r1, #1
 8004a40:	f006 f822 	bl	800aa88 <USB_EP0_OutStart>
 8004a44:	e006      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f00c fc48 	bl	80112f0 <HAL_PCD_DataOutStageCallback>
 8004a60:	e046      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d124      	bne.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	6093      	str	r3, [r2, #8]
 8004a88:	e032      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f00c fc1f 	bl	80112f0 <HAL_PCD_DataOutStageCallback>
 8004ab2:	e01d      	b.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d114      	bne.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004adc:	461a      	mov	r2, r3
 8004ade:	2100      	movs	r1, #0
 8004ae0:	f005 ffd2 	bl	800aa88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f00c fc00 	bl	80112f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	4f54300a 	.word	0x4f54300a
 8004b00:	4f54310a 	.word	0x4f54310a

08004b04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	333c      	adds	r3, #60	; 0x3c
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <PCD_EP_OutSetupPacket_int+0x88>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d90e      	bls.n	8004b58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	461a      	mov	r2, r3
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f00c fbb7 	bl	80112cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <PCD_EP_OutSetupPacket_int+0x88>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d90c      	bls.n	8004b80 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	f005 ff84 	bl	800aa88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	4f54300a 	.word	0x4f54300a

08004b90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bae:	883b      	ldrh	r3, [r7, #0]
 8004bb0:	0419      	lsls	r1, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
 8004bbc:	e028      	b.n	8004c10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	e00d      	b.n	8004bee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	3340      	adds	r3, #64	; 0x40
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	3301      	adds	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3ec      	bcc.n	8004bd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bf8:	883b      	ldrh	r3, [r7, #0]
 8004bfa:	0418      	lsls	r0, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4302      	orrs	r2, r0
 8004c08:	3340      	adds	r3, #64	; 0x40
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	10000003 	.word	0x10000003

08004c88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40007000 	.word	0x40007000

08004ca8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd6:	f7fd f8df 	bl	8001e98 <HAL_GetTick>
 8004cda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cdc:	e009      	b.n	8004cf2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cde:	f7fd f8db 	bl	8001e98 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cec:	d901      	bls.n	8004cf2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e022      	b.n	8004d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d1ee      	bne.n	8004cde <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d00:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d0c:	f7fd f8c4 	bl	8001e98 <HAL_GetTick>
 8004d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d12:	e009      	b.n	8004d28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d14:	f7fd f8c0 	bl	8001e98 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d22:	d901      	bls.n	8004d28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e007      	b.n	8004d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d34:	d1ee      	bne.n	8004d14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40007000 	.word	0x40007000

08004d48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7fd f8a2 	bl	8001e98 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e067      	b.n	8004e30 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fc fbf3 	bl	8001560 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004d7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f85e 	bl	8004e40 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	021a      	lsls	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2120      	movs	r1, #32
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f856 	bl	8004e5c <QSPI_WaitFlagStateUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d135      	bne.n	8004e26 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_QSPI_Init+0xf0>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6852      	ldr	r2, [r2, #4]
 8004dc8:	0611      	lsls	r1, r2, #24
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	69d2      	ldr	r2, [r2, #28]
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6a12      	ldr	r2, [r2, #32]
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_QSPI_Init+0xf4>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	0411      	lsls	r1, r2, #16
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6952      	ldr	r2, [r2, #20]
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6992      	ldr	r2, [r2, #24]
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	00ffff2f 	.word	0x00ffff2f
 8004e3c:	ffe0f8fe 	.word	0xffe0f8fe

08004e40 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e6c:	e01a      	b.n	8004ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d016      	beq.n	8004ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fd f80f 	bl	8001e98 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e00e      	b.n	8004ec2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bf14      	ite	ne
 8004eb2:	2301      	movne	r3, #1
 8004eb4:	2300      	moveq	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1d6      	bne.n	8004e6e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e291      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8087 	beq.w	8004ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef0:	4b96      	ldr	r3, [pc, #600]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d00c      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efc:	4b93      	ldr	r3, [pc, #588]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d112      	bne.n	8004f2e <HAL_RCC_OscConfig+0x62>
 8004f08:	4b90      	ldr	r3, [pc, #576]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f14:	d10b      	bne.n	8004f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f16:	4b8d      	ldr	r3, [pc, #564]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d06c      	beq.n	8004ffc <HAL_RCC_OscConfig+0x130>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d168      	bne.n	8004ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e26b      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x7a>
 8004f38:	4b84      	ldr	r3, [pc, #528]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a83      	ldr	r2, [pc, #524]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e02e      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x9c>
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a7e      	ldr	r2, [pc, #504]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b7c      	ldr	r3, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7b      	ldr	r2, [pc, #492]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0xc0>
 8004f72:	4b76      	ldr	r3, [pc, #472]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a75      	ldr	r2, [pc, #468]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b73      	ldr	r3, [pc, #460]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a72      	ldr	r2, [pc, #456]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6b      	ldr	r2, [pc, #428]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fc ff74 	bl	8001e98 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fc ff70 	bl	8001e98 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e21f      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b61      	ldr	r3, [pc, #388]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xe8>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc ff60 	bl	8001e98 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fc ff5c 	bl	8001e98 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e20b      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x110>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d069      	beq.n	80050de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800500a:	4b50      	ldr	r3, [pc, #320]	; (800514c <HAL_RCC_OscConfig+0x280>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005016:	4b4d      	ldr	r3, [pc, #308]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b08      	cmp	r3, #8
 8005020:	d11c      	bne.n	800505c <HAL_RCC_OscConfig+0x190>
 8005022:	4b4a      	ldr	r3, [pc, #296]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d116      	bne.n	800505c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x17a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e1df      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005046:	4b41      	ldr	r3, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	493d      	ldr	r1, [pc, #244]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005056:	4313      	orrs	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505a:	e040      	b.n	80050de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005064:	4b39      	ldr	r3, [pc, #228]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a38      	ldr	r2, [pc, #224]	; (800514c <HAL_RCC_OscConfig+0x280>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fc ff12 	bl	8001e98 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005078:	f7fc ff0e 	bl	8001e98 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e1bd      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b30      	ldr	r3, [pc, #192]	; (800514c <HAL_RCC_OscConfig+0x280>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4929      	ldr	r1, [pc, #164]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
 80050aa:	e018      	b.n	80050de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc feee 	bl	8001e98 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c0:	f7fc feea 	bl	8001e98 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e199      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	4b1e      	ldr	r3, [pc, #120]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d038      	beq.n	800515c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d019      	beq.n	8005126 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_RCC_OscConfig+0x280>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fc fecb 	bl	8001e98 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005106:	f7fc fec7 	bl	8001e98 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e176      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <HAL_RCC_OscConfig+0x280>)
 800511a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x23a>
 8005124:	e01a      	b.n	800515c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_RCC_OscConfig+0x280>)
 8005128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <HAL_RCC_OscConfig+0x280>)
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fc feb1 	bl	8001e98 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513a:	f7fc fead 	bl	8001e98 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d903      	bls.n	8005150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e15c      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
 800514c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005150:	4b91      	ldr	r3, [pc, #580]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ee      	bne.n	800513a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80a4 	beq.w	80052b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516a:	4b8b      	ldr	r3, [pc, #556]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10d      	bne.n	8005192 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	4a87      	ldr	r2, [pc, #540]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005180:	6413      	str	r3, [r2, #64]	; 0x40
 8005182:	4b85      	ldr	r3, [pc, #532]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005192:	4b82      	ldr	r3, [pc, #520]	; (800539c <HAL_RCC_OscConfig+0x4d0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d118      	bne.n	80051d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800519e:	4b7f      	ldr	r3, [pc, #508]	; (800539c <HAL_RCC_OscConfig+0x4d0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7e      	ldr	r2, [pc, #504]	; (800539c <HAL_RCC_OscConfig+0x4d0>)
 80051a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051aa:	f7fc fe75 	bl	8001e98 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b2:	f7fc fe71 	bl	8001e98 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b64      	cmp	r3, #100	; 0x64
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e120      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c4:	4b75      	ldr	r3, [pc, #468]	; (800539c <HAL_RCC_OscConfig+0x4d0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d106      	bne.n	80051e6 <HAL_RCC_OscConfig+0x31a>
 80051d8:	4b6f      	ldr	r3, [pc, #444]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	4a6e      	ldr	r2, [pc, #440]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6713      	str	r3, [r2, #112]	; 0x70
 80051e4:	e02d      	b.n	8005242 <HAL_RCC_OscConfig+0x376>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x33c>
 80051ee:	4b6a      	ldr	r3, [pc, #424]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	4a69      	ldr	r2, [pc, #420]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4a66      	ldr	r2, [pc, #408]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	6713      	str	r3, [r2, #112]	; 0x70
 8005206:	e01c      	b.n	8005242 <HAL_RCC_OscConfig+0x376>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b05      	cmp	r3, #5
 800520e:	d10c      	bne.n	800522a <HAL_RCC_OscConfig+0x35e>
 8005210:	4b61      	ldr	r3, [pc, #388]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a60      	ldr	r2, [pc, #384]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	f043 0304 	orr.w	r3, r3, #4
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a5d      	ldr	r2, [pc, #372]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	e00b      	b.n	8005242 <HAL_RCC_OscConfig+0x376>
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a5a      	ldr	r2, [pc, #360]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	6713      	str	r3, [r2, #112]	; 0x70
 8005236:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d015      	beq.n	8005276 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524a:	f7fc fe25 	bl	8001e98 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fc fe21 	bl	8001e98 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e0ce      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ee      	beq.n	8005252 <HAL_RCC_OscConfig+0x386>
 8005274:	e014      	b.n	80052a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fc fe0f 	bl	8001e98 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc fe0b 	bl	8001e98 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005294:	4b40      	ldr	r3, [pc, #256]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ee      	bne.n	800527e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a6:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	4a3b      	ldr	r2, [pc, #236]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80a4 	beq.w	8005404 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052bc:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d06b      	beq.n	80053a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d149      	bne.n	8005364 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d0:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a30      	ldr	r2, [pc, #192]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fc fddc 	bl	8001e98 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e4:	f7fc fdd8 	bl	8001e98 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e087      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	4b28      	ldr	r3, [pc, #160]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	3b01      	subs	r3, #1
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	061b      	lsls	r3, r3, #24
 8005326:	4313      	orrs	r3, r2
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800532a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800532e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fdac 	bl	8001e98 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fc fda8 	bl	8001e98 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e057      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x478>
 8005362:	e04f      	b.n	8005404 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800536a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fc fd92 	bl	8001e98 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fc fd8e 	bl	8001e98 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e03d      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_OscConfig+0x4cc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x4ac>
 8005396:	e035      	b.n	8005404 <HAL_RCC_OscConfig+0x538>
 8005398:	40023800 	.word	0x40023800
 800539c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCC_OscConfig+0x544>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d028      	beq.n	8005400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d121      	bne.n	8005400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d11a      	bne.n	8005400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d8:	4293      	cmp	r3, r2
 80053da:	d111      	bne.n	8005400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	3b01      	subs	r3, #1
 80053ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800

08005414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0d0      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d910      	bls.n	800545c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b67      	ldr	r3, [pc, #412]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 020f 	bic.w	r2, r3, #15
 8005442:	4965      	ldr	r1, [pc, #404]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b63      	ldr	r3, [pc, #396]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0b8      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d020      	beq.n	80054aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4a58      	ldr	r2, [pc, #352]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 800547a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800547e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800548c:	4b53      	ldr	r3, [pc, #332]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4a52      	ldr	r2, [pc, #328]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005498:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	494d      	ldr	r1, [pc, #308]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d040      	beq.n	8005538 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d115      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e07f      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e073      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b3d      	ldr	r3, [pc, #244]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06b      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0203 	bic.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4936      	ldr	r1, [pc, #216]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005508:	f7fc fcc6 	bl	8001e98 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fc fcc2 	bl	8001e98 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e053      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 020c 	and.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d1eb      	bne.n	8005510 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d210      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 020f 	bic.w	r2, r3, #15
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d001      	beq.n	8005568 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e032      	b.n	80055ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005574:	4b19      	ldr	r3, [pc, #100]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4916      	ldr	r1, [pc, #88]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005592:	4b12      	ldr	r3, [pc, #72]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	490e      	ldr	r1, [pc, #56]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055a6:	f000 f821 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 80055aa:	4602      	mov	r2, r0
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	490a      	ldr	r1, [pc, #40]	; (80055e0 <HAL_RCC_ClockConfig+0x1cc>)
 80055b8:	5ccb      	ldrb	r3, [r1, r3]
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <HAL_RCC_ClockConfig+0x1d0>)
 80055c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_ClockConfig+0x1d4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fc fb08 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023c00 	.word	0x40023c00
 80055dc:	40023800 	.word	0x40023800
 80055e0:	08011d1c 	.word	0x08011d1c
 80055e4:	20000000 	.word	0x20000000
 80055e8:	20000004 	.word	0x20000004

080055ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f0:	b090      	sub	sp, #64	; 0x40
 80055f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
 80055f8:	2300      	movs	r3, #0
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	2300      	movs	r3, #0
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005604:	4b59      	ldr	r3, [pc, #356]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b08      	cmp	r3, #8
 800560e:	d00d      	beq.n	800562c <HAL_RCC_GetSysClockFreq+0x40>
 8005610:	2b08      	cmp	r3, #8
 8005612:	f200 80a1 	bhi.w	8005758 <HAL_RCC_GetSysClockFreq+0x16c>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0x34>
 800561a:	2b04      	cmp	r3, #4
 800561c:	d003      	beq.n	8005626 <HAL_RCC_GetSysClockFreq+0x3a>
 800561e:	e09b      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_GetSysClockFreq+0x184>)
 8005622:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005624:	e09b      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005626:	4b53      	ldr	r3, [pc, #332]	; (8005774 <HAL_RCC_GetSysClockFreq+0x188>)
 8005628:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800562a:	e098      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800562c:	4b4f      	ldr	r3, [pc, #316]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005636:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d028      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005642:	4b4a      	ldr	r3, [pc, #296]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	099b      	lsrs	r3, r3, #6
 8005648:	2200      	movs	r2, #0
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	627a      	str	r2, [r7, #36]	; 0x24
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005654:	2100      	movs	r1, #0
 8005656:	4b47      	ldr	r3, [pc, #284]	; (8005774 <HAL_RCC_GetSysClockFreq+0x188>)
 8005658:	fb03 f201 	mul.w	r2, r3, r1
 800565c:	2300      	movs	r3, #0
 800565e:	fb00 f303 	mul.w	r3, r0, r3
 8005662:	4413      	add	r3, r2
 8005664:	4a43      	ldr	r2, [pc, #268]	; (8005774 <HAL_RCC_GetSysClockFreq+0x188>)
 8005666:	fba0 1202 	umull	r1, r2, r0, r2
 800566a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566c:	460a      	mov	r2, r1
 800566e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005672:	4413      	add	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	2200      	movs	r2, #0
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005686:	f7fa fdc3 	bl	8000210 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4613      	mov	r3, r2
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005692:	e053      	b.n	800573c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005694:	4b35      	ldr	r3, [pc, #212]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	2200      	movs	r2, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	617a      	str	r2, [r7, #20]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	4652      	mov	r2, sl
 80056ac:	465b      	mov	r3, fp
 80056ae:	f04f 0000 	mov.w	r0, #0
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	0159      	lsls	r1, r3, #5
 80056b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056bc:	0150      	lsls	r0, r2, #5
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	ebb2 080a 	subs.w	r8, r2, sl
 80056c6:	eb63 090b 	sbc.w	r9, r3, fp
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056de:	ebb2 0408 	subs.w	r4, r2, r8
 80056e2:	eb63 0509 	sbc.w	r5, r3, r9
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	00eb      	lsls	r3, r5, #3
 80056f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056f4:	00e2      	lsls	r2, r4, #3
 80056f6:	4614      	mov	r4, r2
 80056f8:	461d      	mov	r5, r3
 80056fa:	eb14 030a 	adds.w	r3, r4, sl
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	eb45 030b 	adc.w	r3, r5, fp
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005712:	4629      	mov	r1, r5
 8005714:	028b      	lsls	r3, r1, #10
 8005716:	4621      	mov	r1, r4
 8005718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800571c:	4621      	mov	r1, r4
 800571e:	028a      	lsls	r2, r1, #10
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	2200      	movs	r2, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	60fa      	str	r2, [r7, #12]
 800572c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005730:	f7fa fd6e 	bl	8000210 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4613      	mov	r3, r2
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_GetSysClockFreq+0x180>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	3301      	adds	r3, #1
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800574c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005756:	e002      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetSysClockFreq+0x184>)
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800575c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005760:	4618      	mov	r0, r3
 8005762:	3740      	adds	r7, #64	; 0x40
 8005764:	46bd      	mov	sp, r7
 8005766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800
 8005770:	00f42400 	.word	0x00f42400
 8005774:	017d7840 	.word	0x017d7840

08005778 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCC_GetHCLKFreq+0x14>)
 800577e:	681b      	ldr	r3, [r3, #0]
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000000 	.word	0x20000000

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005794:	f7ff fff0 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0a9b      	lsrs	r3, r3, #10
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4903      	ldr	r1, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	08011d2c 	.word	0x08011d2c

080057b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057bc:	f7ff ffdc 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0b5b      	lsrs	r3, r3, #13
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4903      	ldr	r1, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	08011d2c 	.word	0x08011d2c

080057e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	220f      	movs	r2, #15
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057f0:	4b12      	ldr	r3, [pc, #72]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCC_GetClockConfig+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800
 8005840:	40023c00 	.word	0x40023c00

08005844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800586c:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a68      	ldr	r2, [pc, #416]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005872:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005876:	6093      	str	r3, [r2, #8]
 8005878:	4b66      	ldr	r3, [pc, #408]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	4964      	ldr	r1, [pc, #400]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800589e:	4b5d      	ldr	r3, [pc, #372]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	4959      	ldr	r1, [pc, #356]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058bc:	d101      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058ca:	2301      	movs	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058da:	4b4e      	ldr	r3, [pc, #312]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	494a      	ldr	r1, [pc, #296]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f8:	d101      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005906:	2301      	movs	r3, #1
 8005908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005916:	2301      	movs	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 808b 	beq.w	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005928:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	4a39      	ldr	r2, [pc, #228]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005932:	6413      	str	r3, [r2, #64]	; 0x40
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005940:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a34      	ldr	r2, [pc, #208]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fc faa4 	bl	8001e98 <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fc faa0 	bl	8001e98 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e357      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005972:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d035      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d02e      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005990:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005998:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d114      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fa68 	bl	8001e98 <HAL_GetTick>
 80059c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	e00a      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f7fc fa64 	bl	8001e98 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e319      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ee      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fa:	d111      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	4901      	ldr	r1, [pc, #4]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	0ffffcff 	.word	0x0ffffcff
 8005a20:	4baa      	ldr	r3, [pc, #680]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4aa9      	ldr	r2, [pc, #676]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a2a:	6093      	str	r3, [r2, #8]
 8005a2c:	4ba7      	ldr	r3, [pc, #668]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	49a4      	ldr	r1, [pc, #656]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a4a:	4ba0      	ldr	r3, [pc, #640]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a50:	4a9e      	ldr	r2, [pc, #632]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a5a:	4b9c      	ldr	r3, [pc, #624]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	4999      	ldr	r1, [pc, #612]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a78:	4b94      	ldr	r3, [pc, #592]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	4991      	ldr	r1, [pc, #580]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a9a:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa8:	4988      	ldr	r1, [pc, #544]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005abc:	4b83      	ldr	r3, [pc, #524]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aca:	4980      	ldr	r1, [pc, #512]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ade:	4b7b      	ldr	r3, [pc, #492]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aec:	4977      	ldr	r1, [pc, #476]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b00:	4b72      	ldr	r3, [pc, #456]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f023 0203 	bic.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	496f      	ldr	r1, [pc, #444]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b22:	4b6a      	ldr	r3, [pc, #424]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f023 020c 	bic.w	r2, r3, #12
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b30:	4966      	ldr	r1, [pc, #408]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b44:	4b61      	ldr	r3, [pc, #388]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b52:	495e      	ldr	r1, [pc, #376]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b66:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b74:	4955      	ldr	r1, [pc, #340]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b88:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	494d      	ldr	r1, [pc, #308]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005baa:	4b48      	ldr	r3, [pc, #288]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	4944      	ldr	r1, [pc, #272]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	493c      	ldr	r1, [pc, #240]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bee:	4b37      	ldr	r3, [pc, #220]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfc:	4933      	ldr	r1, [pc, #204]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c10:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1e:	492b      	ldr	r1, [pc, #172]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c32:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c40:	4922      	ldr	r1, [pc, #136]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c50:	d101      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c72:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c80:	4912      	ldr	r1, [pc, #72]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca4:	4909      	ldr	r1, [pc, #36]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d006      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80d9 	beq.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc0:	4b02      	ldr	r3, [pc, #8]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a01      	ldr	r2, [pc, #4]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cca:	e001      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fc f8e1 	bl	8001e98 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fc f8dd 	bl	8001e98 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b64      	cmp	r3, #100	; 0x64
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e194      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cec:	4b6c      	ldr	r3, [pc, #432]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d021      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d0c:	4b64      	ldr	r3, [pc, #400]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d1a:	4b61      	ldr	r3, [pc, #388]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	019a      	lsls	r2, r3, #6
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	071b      	lsls	r3, r3, #28
 8005d40:	4957      	ldr	r1, [pc, #348]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02e      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d72:	d129      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d74:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d88:	0f1b      	lsrs	r3, r3, #28
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	019a      	lsls	r2, r3, #6
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	071b      	lsls	r3, r3, #28
 8005da8:	493d      	ldr	r1, [pc, #244]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005db0:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005db6:	f023 021f 	bic.w	r2, r3, #31
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4937      	ldr	r1, [pc, #220]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01d      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dd4:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dda:	0e1b      	lsrs	r3, r3, #24
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005de2:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de8:	0f1b      	lsrs	r3, r3, #28
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	019a      	lsls	r2, r3, #6
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	061b      	lsls	r3, r3, #24
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	071b      	lsls	r3, r3, #28
 8005e08:	4925      	ldr	r1, [pc, #148]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	019a      	lsls	r2, r3, #6
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	071b      	lsls	r3, r3, #28
 8005e38:	4919      	ldr	r1, [pc, #100]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fc f824 	bl	8001e98 <HAL_GetTick>
 8005e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e54:	f7fc f820 	bl	8001e98 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e0d7      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	f040 80cd 	bne.w	8006014 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e86:	f7fc f807 	bl	8001e98 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e8e:	f7fc f803 	bl	8001e98 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b64      	cmp	r3, #100	; 0x64
 8005e9a:	d903      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e0ba      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ea0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea4:	4b5e      	ldr	r3, [pc, #376]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb0:	d0ed      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02e      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d12a      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eda:	4b51      	ldr	r3, [pc, #324]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ee8:	4b4d      	ldr	r3, [pc, #308]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	0f1b      	lsrs	r3, r3, #28
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	019a      	lsls	r2, r3, #6
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	041b      	lsls	r3, r3, #16
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	061b      	lsls	r3, r3, #24
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	071b      	lsls	r3, r3, #28
 8005f0e:	4944      	ldr	r1, [pc, #272]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f16:	4b42      	ldr	r3, [pc, #264]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	493d      	ldr	r1, [pc, #244]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d022      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f44:	d11d      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f46:	4b36      	ldr	r3, [pc, #216]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4c:	0e1b      	lsrs	r3, r3, #24
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	0f1b      	lsrs	r3, r3, #28
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	019a      	lsls	r2, r3, #6
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	071b      	lsls	r3, r3, #28
 8005f7a:	4929      	ldr	r1, [pc, #164]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d028      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f9c:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	019a      	lsls	r2, r3, #6
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	4917      	ldr	r1, [pc, #92]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4911      	ldr	r1, [pc, #68]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fb ff54 	bl	8001e98 <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ff4:	f7fb ff50 	bl	8001e98 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	; 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e007      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800600e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006012:	d1ef      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40023800 	.word	0x40023800

08006024 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e022      	b.n	800607c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fb fb19 	bl	8001680 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f814 	bl	8006084 <HAL_SD_InitCard>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e00a      	b.n	800607c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006084:	b5b0      	push	{r4, r5, r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af04      	add	r7, sp, #16
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800608c:	2300      	movs	r3, #0
 800608e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80060a0:	2376      	movs	r3, #118	; 0x76
 80060a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681d      	ldr	r5, [r3, #0]
 80060a8:	466c      	mov	r4, sp
 80060aa:	f107 0314 	add.w	r3, r7, #20
 80060ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060bc:	4628      	mov	r0, r5
 80060be:	f002 fbb3 	bl	8008828 <SDMMC_Init>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80060c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e059      	b.n	8006188 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060e2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fbe7 	bl	80088bc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80060fe:	2002      	movs	r0, #2
 8006100:	f7fb fed6 	bl	8001eb0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fff3 	bl	80070f0 <SD_PowerON>
 800610a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02e      	b.n	8006188 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 ff12 	bl	8006f54 <SD_InitCard>
 8006130:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e01b      	b.n	8006188 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006158:	4618      	mov	r0, r3
 800615a:	f002 fc41 	bl	80089e0 <SDMMC_CmdBlockLength>
 800615e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a09      	ldr	r2, [pc, #36]	; (8006190 <HAL_SD_InitCard+0x10c>)
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bdb0      	pop	{r4, r5, r7, pc}
 8006190:	004005ff 	.word	0x004005ff

08006194 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0c3      	b.n	8006344 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f040 80bc 	bne.w	8006342 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d907      	bls.n	80061ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0aa      	b.n	8006344 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2203      	movs	r2, #3
 80061f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a4e      	ldr	r2, [pc, #312]	; (800634c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	4a4d      	ldr	r2, [pc, #308]	; (8006350 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800621c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	2200      	movs	r2, #0
 8006224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3380      	adds	r3, #128	; 0x80
 8006254:	4619      	mov	r1, r3
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	025b      	lsls	r3, r3, #9
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	f7fc f8c5 	bl	80023ec <HAL_DMA_Start_IT>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006276:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a35      	ldr	r2, [pc, #212]	; (8006354 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e055      	b.n	8006344 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0208 	orr.w	r2, r2, #8
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d002      	beq.n	80062b6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	025b      	lsls	r3, r3, #9
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	025b      	lsls	r3, r3, #9
 80062c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062c2:	2390      	movs	r3, #144	; 0x90
 80062c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062c6:	2302      	movs	r3, #2
 80062c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f107 0210 	add.w	r2, r7, #16
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f002 fb53 	bl	8008988 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d90a      	bls.n	80062fe <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2282      	movs	r2, #130	; 0x82
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 fbb7 	bl	8008a68 <SDMMC_CmdReadMultiBlock>
 80062fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062fc:	e009      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2281      	movs	r2, #129	; 0x81
 8006302:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630a:	4618      	mov	r0, r3
 800630c:	f002 fb8a 	bl	8008a24 <SDMMC_CmdReadSingleBlock>
 8006310:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	431a      	orrs	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e002      	b.n	8006344 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08006d63 	.word	0x08006d63
 8006350:	08006dd5 	.word	0x08006dd5
 8006354:	004005ff 	.word	0x004005ff

08006358 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	; 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e0c6      	b.n	800650e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	f040 80bf 	bne.w	800650c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639e:	429a      	cmp	r2, r3
 80063a0:	d907      	bls.n	80063b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0ad      	b.n	800650e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 021a 	orr.w	r2, r2, #26
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	4a50      	ldr	r2, [pc, #320]	; (8006518 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80063d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	4a4f      	ldr	r2, [pc, #316]	; (800651c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80063e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	2200      	movs	r2, #0
 80063e8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d002      	beq.n	80063f8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	025b      	lsls	r3, r3, #9
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d90a      	bls.n	8006414 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	22a0      	movs	r2, #160	; 0xa0
 8006402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800640a:	4618      	mov	r0, r3
 800640c:	f002 fb70 	bl	8008af0 <SDMMC_CmdWriteMultiBlock>
 8006410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006412:	e009      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2290      	movs	r2, #144	; 0x90
 8006418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006420:	4618      	mov	r0, r3
 8006422:	f002 fb43 	bl	8008aac <SDMMC_CmdWriteSingleBlock>
 8006426:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d012      	beq.n	8006454 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a3b      	ldr	r2, [pc, #236]	; (8006520 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e05c      	b.n	800650e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0208 	orr.w	r2, r2, #8
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	2240      	movs	r2, #64	; 0x40
 800646a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3380      	adds	r3, #128	; 0x80
 8006494:	461a      	mov	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	025b      	lsls	r3, r3, #9
 800649a:	089b      	lsrs	r3, r3, #2
 800649c:	f7fb ffa6 	bl	80023ec <HAL_DMA_Start_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01a      	beq.n	80064dc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 021a 	bic.w	r2, r2, #26
 80064b4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a19      	ldr	r2, [pc, #100]	; (8006520 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e018      	b.n	800650e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	025b      	lsls	r3, r3, #9
 80064e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064e8:	2390      	movs	r3, #144	; 0x90
 80064ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f107 0210 	add.w	r2, r7, #16
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f002 fa40 	bl	8008988 <SDMMC_ConfigData>

      return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3730      	adds	r7, #48	; 0x30
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	08006d39 	.word	0x08006d39
 800651c:	08006dd5 	.word	0x08006dd5
 8006520:	004005ff 	.word	0x004005ff

08006524 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_SD_IRQHandler+0x2e>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 ffef 	bl	800752e <SD_Read_IT>
 8006550:	e15a      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 808d 	beq.w	800667c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b9a      	ldr	r3, [pc, #616]	; (80067e0 <HAL_SD_IRQHandler+0x2bc>)
 8006578:	400b      	ands	r3, r1
 800657a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d039      	beq.n	800660a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_SD_IRQHandler+0x86>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d011      	beq.n	80065ce <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f002 fac0 	bl	8008b34 <SDMMC_CmdStopTransfer>
 80065b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f921 	bl	8006810 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_SD_IRQHandler+0xd6>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f004 fb74 	bl	800ace8 <HAL_SD_RxCpltCallback>
 8006600:	e102      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f004 fb66 	bl	800acd4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006608:	e0fe      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80f9 	beq.w	8006808 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fa85 	bl	8008b34 <SDMMC_CmdStopTransfer>
 800662a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8e6 	bl	8006810 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 80dc 	bne.w	8006808 <HAL_SD_IRQHandler+0x2e4>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80d6 	bne.w	8006808 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0208 	bic.w	r2, r2, #8
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f004 fb2d 	bl	800acd4 <HAL_SD_TxCpltCallback>
}
 800667a:	e0c5      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <HAL_SD_IRQHandler+0x178>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 ff9b 	bl	80075d0 <SD_Write_IT>
 800669a:	e0b5      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80ae 	beq.w	8006808 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f043 0202 	orr.w	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f043 0208 	orr.w	r2, r3, #8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	f043 0210 	orr.w	r2, r3, #16
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f240 523a 	movw	r2, #1338	; 0x53a
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800672c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f002 f9fe 	bl	8008b34 <SDMMC_CmdStopTransfer>
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f857 	bl	8006810 <HAL_SD_ErrorCallback>
}
 8006762:	e051      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04c      	beq.n	8006808 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_SD_IRQHandler+0x25e>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <HAL_SD_IRQHandler+0x2c0>)
 8006788:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	4618      	mov	r0, r3
 8006790:	f7fb fe8c 	bl	80024ac <HAL_DMA_Abort_IT>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d036      	beq.n	8006808 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fb6a 	bl	8006e78 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067a4:	e030      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <HAL_SD_IRQHandler+0x296>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d018      	beq.n	80067ec <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <HAL_SD_IRQHandler+0x2c4>)
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fb fe70 	bl	80024ac <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01a      	beq.n	8006808 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fb85 	bl	8006ee6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80067dc:	e014      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
 80067de:	bf00      	nop
 80067e0:	ffff3ec5 	.word	0xffff3ec5
 80067e4:	08006e79 	.word	0x08006e79
 80067e8:	08006ee7 	.word	0x08006ee7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f004 fa5d 	bl	800acc0 <HAL_SD_AbortCallback>
}
 8006806:	e7ff      	b.n	8006808 <HAL_SD_IRQHandler+0x2e4>
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006832:	0f9b      	lsrs	r3, r3, #30
 8006834:	b2da      	uxtb	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683e:	0e9b      	lsrs	r3, r3, #26
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	b2da      	uxtb	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006850:	0e1b      	lsrs	r3, r3, #24
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	b2da      	uxtb	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006862:	0c1b      	lsrs	r3, r3, #16
 8006864:	b2da      	uxtb	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	b2da      	uxtb	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687a:	b2da      	uxtb	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	b29a      	uxth	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	b2da      	uxtb	r2, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a2:	0bdb      	lsrs	r3, r3, #15
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b4:	0b9b      	lsrs	r3, r3, #14
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c6:	0b5b      	lsrs	r3, r3, #13
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d8:	0b1b      	lsrs	r3, r3, #12
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d163      	bne.n	80069bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f8:	009a      	lsls	r2, r3, #2
 80068fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068fe:	4013      	ands	r3, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006904:	0f92      	lsrs	r2, r2, #30
 8006906:	431a      	orrs	r2, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	0edb      	lsrs	r3, r3, #27
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	b2da      	uxtb	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006922:	0e1b      	lsrs	r3, r3, #24
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006934:	0d5b      	lsrs	r3, r3, #21
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	b2da      	uxtb	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	0c9b      	lsrs	r3, r3, #18
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	b2da      	uxtb	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006958:	0bdb      	lsrs	r3, r3, #15
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	b2da      	uxtb	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	7e1b      	ldrb	r3, [r3, #24]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	3302      	adds	r3, #2
 800697c:	2201      	movs	r2, #1
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006986:	fb03 f202 	mul.w	r2, r3, r2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	7a1b      	ldrb	r3, [r3, #8]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	2201      	movs	r2, #1
 800699a:	409a      	lsls	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069a8:	0a52      	lsrs	r2, r2, #9
 80069aa:	fb03 f202 	mul.w	r2, r3, r2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b8:	661a      	str	r2, [r3, #96]	; 0x60
 80069ba:	e031      	b.n	8006a20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d11d      	bne.n	8006a00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	431a      	orrs	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	3301      	adds	r3, #1
 80069e0:	029a      	lsls	r2, r3, #10
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	661a      	str	r2, [r3, #96]	; 0x60
 80069fe:	e00f      	b.n	8006a20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a58      	ldr	r2, [pc, #352]	; (8006b68 <HAL_SD_GetCardCSD+0x344>)
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e09d      	b.n	8006b5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	0b9b      	lsrs	r3, r3, #14
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	0fdb      	lsrs	r3, r3, #31
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	0f5b      	lsrs	r3, r3, #29
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	0e9b      	lsrs	r3, r3, #26
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	0d9b      	lsrs	r3, r3, #22
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	0d5b      	lsrs	r3, r3, #21
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	0c1b      	lsrs	r3, r3, #16
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	0bdb      	lsrs	r3, r3, #15
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	0b9b      	lsrs	r3, r3, #14
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	0b5b      	lsrs	r3, r3, #13
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b06:	0b1b      	lsrs	r3, r3, #12
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	0a9b      	lsrs	r3, r3, #10
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	004005ff 	.word	0x004005ff

08006b6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d02e      	beq.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d106      	bne.n	8006bfa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8006bf8:	e029      	b.n	8006c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c00:	d10a      	bne.n	8006c18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fb2a 	bl	800725c <SD_WideBus_Enable>
 8006c08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
 8006c16:	e01a      	b.n	8006c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fb67 	bl	80072f2 <SD_WideBus_Disable>
 8006c24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
 8006c32:	e00c      	b.n	8006c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c40:	e005      	b.n	8006c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c6c:	e01f      	b.n	8006cae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681d      	ldr	r5, [r3, #0]
 8006c94:	466c      	mov	r4, sp
 8006c96:	f107 0314 	add.w	r3, r7, #20
 8006c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ca2:	f107 0308 	add.w	r3, r7, #8
 8006ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f001 fdbd 	bl	8008828 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fe92 	bl	80089e0 <SDMMC_CmdBlockLength>
 8006cbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00c      	beq.n	8006cde <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a0a      	ldr	r2, [pc, #40]	; (8006cf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3728      	adds	r7, #40	; 0x28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	004005ff 	.word	0x004005ff

08006cf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa7e 	bl	800720c <SD_SendStatus>
 8006d10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0a5b      	lsrs	r3, r3, #9
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006d2e:	693b      	ldr	r3, [r7, #16]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	2b82      	cmp	r3, #130	; 0x82
 8006d76:	d111      	bne.n	8006d9c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 fed9 	bl	8008b34 <SDMMC_CmdStopTransfer>
 8006d82:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fd3a 	bl	8006810 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0208 	bic.w	r2, r2, #8
 8006daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f240 523a 	movw	r2, #1338	; 0x53a
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f003 ff8f 	bl	800ace8 <HAL_SD_RxCpltCallback>
#endif
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb fd0e 	bl	8002804 <HAL_DMA_GetError>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d03e      	beq.n	8006e6c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d002      	beq.n	8006e0a <SD_DMAError+0x36>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d12d      	bne.n	8006e66 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <SD_DMAError+0xa0>)
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f7ff ff62 	bl	8006cf8 <HAL_SD_GetCardState>
 8006e34:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d002      	beq.n	8006e42 <SD_DMAError+0x6e>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d10a      	bne.n	8006e58 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fe74 	bl	8008b34 <SDMMC_CmdStopTransfer>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	431a      	orrs	r2, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2200      	movs	r2, #0
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f7ff fcd2 	bl	8006810 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	004005ff 	.word	0x004005ff

08006e78 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff ff31 	bl	8006cf8 <HAL_SD_GetCardState>
 8006e96:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b06      	cmp	r3, #6
 8006eaa:	d002      	beq.n	8006eb2 <SD_DMATxAbort+0x3a>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b05      	cmp	r3, #5
 8006eb0:	d10a      	bne.n	8006ec8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fe3c 	bl	8008b34 <SDMMC_CmdStopTransfer>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f003 fef5 	bl	800acc0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006ed6:	e002      	b.n	8006ede <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fc99 	bl	8006810 <HAL_SD_ErrorCallback>
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff fefa 	bl	8006cf8 <HAL_SD_GetCardState>
 8006f04:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d002      	beq.n	8006f20 <SD_DMARxAbort+0x3a>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b05      	cmp	r3, #5
 8006f1e:	d10a      	bne.n	8006f36 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 fe05 	bl	8008b34 <SDMMC_CmdStopTransfer>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	431a      	orrs	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f003 febe 	bl	800acc0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f44:	e002      	b.n	8006f4c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff fc62 	bl	8006810 <HAL_SD_ErrorCallback>
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f54:	b5b0      	push	{r4, r5, r7, lr}
 8006f56:	b094      	sub	sp, #80	; 0x50
 8006f58:	af04      	add	r7, sp, #16
 8006f5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fcb7 	bl	80088d8 <SDMMC_GetPowerState>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f74:	e0b8      	b.n	80070e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d02f      	beq.n	8006fde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fee1 	bl	8008d4a <SDMMC_CmdSendCID>
 8006f88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <SD_InitCard+0x40>
    {
      return errorstate;
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	e0a9      	b.n	80070e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fce1 	bl	8008962 <SDMMC_GetResponse>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2104      	movs	r1, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fcd8 	bl	8008962 <SDMMC_GetResponse>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2108      	movs	r1, #8
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fccf 	bl	8008962 <SDMMC_GetResponse>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	210c      	movs	r1, #12
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fcc6 	bl	8008962 <SDMMC_GetResponse>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d00d      	beq.n	8007002 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f107 020e 	add.w	r2, r7, #14
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fee7 	bl	8008dc4 <SDMMC_CmdSetRelAdd>
 8006ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <SD_InitCard+0xae>
    {
      return errorstate;
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007000:	e072      	b.n	80070e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	2b03      	cmp	r3, #3
 8007008:	d036      	beq.n	8007078 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f001 feb1 	bl	8008d86 <SDMMC_CmdSendCSD>
 8007024:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <SD_InitCard+0xdc>
    {
      return errorstate;
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702e:	e05b      	b.n	80070e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f001 fc93 	bl	8008962 <SDMMC_GetResponse>
 800703c:	4602      	mov	r2, r0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2104      	movs	r1, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f001 fc8a 	bl	8008962 <SDMMC_GetResponse>
 800704e:	4602      	mov	r2, r0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2108      	movs	r1, #8
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fc81 	bl	8008962 <SDMMC_GetResponse>
 8007060:	4602      	mov	r2, r0
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	210c      	movs	r1, #12
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fc78 	bl	8008962 <SDMMC_GetResponse>
 8007072:	4602      	mov	r2, r0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2104      	movs	r1, #4
 800707e:	4618      	mov	r0, r3
 8007080:	f001 fc6f 	bl	8008962 <SDMMC_GetResponse>
 8007084:	4603      	mov	r3, r0
 8007086:	0d1a      	lsrs	r2, r3, #20
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800708c:	f107 0310 	add.w	r3, r7, #16
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fbc6 	bl	8006824 <HAL_SD_GetCardCSD>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800709e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070a2:	e021      	b.n	80070e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	2200      	movs	r2, #0
 80070b0:	461c      	mov	r4, r3
 80070b2:	4615      	mov	r5, r2
 80070b4:	4622      	mov	r2, r4
 80070b6:	462b      	mov	r3, r5
 80070b8:	4608      	mov	r0, r1
 80070ba:	f001 fd5d 	bl	8008b78 <SDMMC_CmdSelDesel>
 80070be:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <SD_InitCard+0x176>
  {
    return errorstate;
 80070c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c8:	e00e      	b.n	80070e8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681d      	ldr	r5, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	466c      	mov	r4, sp
 80070d2:	f103 0210 	add.w	r2, r3, #16
 80070d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070dc:	3304      	adds	r3, #4
 80070de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070e0:	4628      	mov	r0, r5
 80070e2:	f001 fba1 	bl	8008828 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3740      	adds	r7, #64	; 0x40
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bdb0      	pop	{r4, r5, r7, pc}

080070f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f001 fd58 	bl	8008bbe <SDMMC_CmdGoIdleState>
 800710e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	e072      	b.n	8007200 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f001 fd6b 	bl	8008bfa <SDMMC_CmdOperCond>
 8007124:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f001 fd41 	bl	8008bbe <SDMMC_CmdGoIdleState>
 800713c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	e05b      	b.n	8007200 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	2b01      	cmp	r3, #1
 8007154:	d137      	bne.n	80071c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fd6b 	bl	8008c38 <SDMMC_CmdAppCommand>
 8007162:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d02d      	beq.n	80071c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800716a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800716e:	e047      	b.n	8007200 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fd5e 	bl	8008c38 <SDMMC_CmdAppCommand>
 800717c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <SD_PowerON+0x98>
    {
      return errorstate;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e03b      	b.n	8007200 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	491e      	ldr	r1, [pc, #120]	; (8007208 <SD_PowerON+0x118>)
 800718e:	4618      	mov	r0, r3
 8007190:	f001 fd74 	bl	8008c7c <SDMMC_CmdAppOperCommand>
 8007194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800719c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071a0:	e02e      	b.n	8007200 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2100      	movs	r1, #0
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fbda 	bl	8008962 <SDMMC_GetResponse>
 80071ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	0fdb      	lsrs	r3, r3, #31
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <SD_PowerON+0xcc>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <SD_PowerON+0xce>
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]

    count++;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d802      	bhi.n	80071d6 <SD_PowerON+0xe6>
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0cc      	beq.n	8007170 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071dc:	4293      	cmp	r3, r2
 80071de:	d902      	bls.n	80071e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071e4:	e00c      	b.n	8007200 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44
 80071f6:	e002      	b.n	80071fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	c1100000 	.word	0xc1100000

0800720c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800721c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007220:	e018      	b.n	8007254 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f001 fde9 	bl	8008e06 <SDMMC_CmdSendStatus>
 8007234:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <SD_SendStatus+0x34>
  {
    return errorstate;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	e009      	b.n	8007254 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2100      	movs	r1, #0
 8007246:	4618      	mov	r0, r3
 8007248:	f001 fb8b 	bl	8008962 <SDMMC_GetResponse>
 800724c:	4602      	mov	r2, r0
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f001 fb75 	bl	8008962 <SDMMC_GetResponse>
 8007278:	4603      	mov	r3, r0
 800727a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007282:	d102      	bne.n	800728a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007288:	e02f      	b.n	80072ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f879 	bl	8007388 <SD_FindSCR>
 8007296:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	e023      	b.n	80072ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01c      	beq.n	80072e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f001 fcbd 	bl	8008c38 <SDMMC_CmdAppCommand>
 80072be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	e00f      	b.n	80072ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2102      	movs	r1, #2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 fcf7 	bl	8008cc4 <SDMMC_CmdBusWidth>
 80072d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	e003      	b.n	80072ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e001      	b.n	80072ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f001 fb2a 	bl	8008962 <SDMMC_GetResponse>
 800730e:	4603      	mov	r3, r0
 8007310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007318:	d102      	bne.n	8007320 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800731a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800731e:	e02f      	b.n	8007380 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f82e 	bl	8007388 <SD_FindSCR>
 800732c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	e023      	b.n	8007380 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01c      	beq.n	800737c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f001 fc72 	bl	8008c38 <SDMMC_CmdAppCommand>
 8007354:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	e00f      	b.n	8007380 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fcac 	bl	8008cc4 <SDMMC_CmdBusWidth>
 800736c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	e003      	b.n	8007380 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007378:	2300      	movs	r3, #0
 800737a:	e001      	b.n	8007380 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800737c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b08f      	sub	sp, #60	; 0x3c
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007392:	f7fa fd81 	bl	8001e98 <HAL_GetTick>
 8007396:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800739c:	2300      	movs	r3, #0
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2108      	movs	r1, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fb16 	bl	80089e0 <SDMMC_CmdBlockLength>
 80073b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	e0b2      	b.n	8007526 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f001 fc33 	bl	8008c38 <SDMMC_CmdAppCommand>
 80073d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <SD_FindSCR+0x56>
  {
    return errorstate;
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	e0a3      	b.n	8007526 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073de:	f04f 33ff 	mov.w	r3, #4294967295
 80073e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073e4:	2308      	movs	r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073ec:	2302      	movs	r3, #2
 80073ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073f4:	2301      	movs	r3, #1
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f107 0210 	add.w	r2, r7, #16
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fac0 	bl	8008988 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fc7b 	bl	8008d08 <SDMMC_CmdSendSCR>
 8007412:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d02a      	beq.n	8007470 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	e083      	b.n	8007526 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00f      	beq.n	800744c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	f107 0208 	add.w	r2, r7, #8
 8007438:	18d4      	adds	r4, r2, r3
 800743a:	4608      	mov	r0, r1
 800743c:	f001 fa20 	bl	8008880 <SDMMC_ReadFIFO>
 8007440:	4603      	mov	r3, r0
 8007442:	6023      	str	r3, [r4, #0]
      index++;
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	3301      	adds	r3, #1
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	e006      	b.n	800745a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d012      	beq.n	8007480 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800745a:	f7fa fd1d 	bl	8001e98 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d102      	bne.n	8007470 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800746a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800746e:	e05a      	b.n	8007526 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0cf      	beq.n	800741e <SD_FindSCR+0x96>
 800747e:	e000      	b.n	8007482 <SD_FindSCR+0xfa>
      break;
 8007480:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2208      	movs	r2, #8
 8007496:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007498:	2308      	movs	r3, #8
 800749a:	e044      	b.n	8007526 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2202      	movs	r2, #2
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	e037      	b.n	8007526 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2220      	movs	r2, #32
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074cc:	2320      	movs	r3, #32
 80074ce:	e02a      	b.n	8007526 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	061a      	lsls	r2, r3, #24
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	601a      	str	r2, [r3, #0]
    scr++;
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	3304      	adds	r3, #4
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	061a      	lsls	r2, r3, #24
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800750e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	0a1b      	lsrs	r3, r3, #8
 8007514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007518:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	0e1b      	lsrs	r3, r3, #24
 800751e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	373c      	adds	r7, #60	; 0x3c
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}

0800752e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d03f      	beq.n	80075c8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e033      	b.n	80075b6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f001 f994 	bl	8008880 <SDMMC_ReadFIFO>
 8007558:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	b2da      	uxtb	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	3b01      	subs	r3, #1
 8007582:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	b2da      	uxtb	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3b01      	subs	r3, #1
 8007598:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	d9c8      	bls.n	800754e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80075c8:	bf00      	nop
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d043      	beq.n	8007672 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e037      	b.n	8007660 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3b01      	subs	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	021a      	lsls	r2, r3, #8
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
 800760c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3b01      	subs	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	041a      	lsls	r2, r3, #16
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3b01      	subs	r3, #1
 8007630:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	061a      	lsls	r2, r3, #24
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4313      	orrs	r3, r2
 800763c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3b01      	subs	r3, #1
 8007648:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f107 0208 	add.w	r2, r7, #8
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f920 	bl	800889a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	3301      	adds	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b07      	cmp	r3, #7
 8007664:	d9c4      	bls.n	80075f0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007672:	bf00      	nop
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e025      	b.n	80076da <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fa fa90 	bl	8001bc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f000 ffee 	bl	800869c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	f001 f842 	bl	8008754 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e09d      	b.n	8007830 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007704:	d009      	beq.n	800771a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	61da      	str	r2, [r3, #28]
 800770c:	e005      	b.n	800771a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fa f88d 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007750:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800775a:	d902      	bls.n	8007762 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e002      	b.n	8007768 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007766:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007770:	d007      	beq.n	8007782 <HAL_SPI_Init+0xa0>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800777a:	d002      	beq.n	8007782 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c4:	ea42 0103 	orr.w	r1, r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	f003 0204 	and.w	r2, r3, #4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077fe:	ea42 0103 	orr.w	r1, r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69da      	ldr	r2, [r3, #28]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e049      	b.n	80078de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f841 	bl	80078e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f000 fa00 	bl	8007c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b01      	cmp	r3, #1
 800790e:	d001      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e054      	b.n	80079be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a26      	ldr	r2, [pc, #152]	; (80079cc <HAL_TIM_Base_Start_IT+0xd0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d022      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793e:	d01d      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d018      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00e      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <HAL_TIM_Base_Start_IT+0xe0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d009      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x80>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d115      	bne.n	80079a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_TIM_Base_Start_IT+0xec>)
 8007984:	4013      	ands	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b06      	cmp	r3, #6
 800798c:	d015      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0xbe>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d011      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	e008      	b.n	80079ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e000      	b.n	80079bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40010000 	.word	0x40010000
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	40010400 	.word	0x40010400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40001800 	.word	0x40001800
 80079e8:	00010007 	.word	0x00010007

080079ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0202 	mvn.w	r2, #2
 8007a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f905 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8f7 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f908 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0204 	mvn.w	r2, #4
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8db 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8cd 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8de 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d122      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d11b      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0208 	mvn.w	r2, #8
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8b1 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8a3 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8b4 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d122      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d11b      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0210 	mvn.w	r2, #16
 8007b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f887 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007b30:	e005      	b.n	8007b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f879 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f88a 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10e      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0201 	mvn.w	r2, #1
 8007b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7f9 fb28 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d107      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f91a 	bl	8007dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007baa:	d10e      	bne.n	8007bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d107      	bne.n	8007bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f90d 	bl	8007de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d10e      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d107      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f838 	bl	8007c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d10e      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0220 	mvn.w	r2, #32
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8cd 	bl	8007dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a40      	ldr	r2, [pc, #256]	; (8007d90 <TIM_Base_SetConfig+0x114>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d00f      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a3d      	ldr	r2, [pc, #244]	; (8007d94 <TIM_Base_SetConfig+0x118>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a3c      	ldr	r2, [pc, #240]	; (8007d98 <TIM_Base_SetConfig+0x11c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a3b      	ldr	r2, [pc, #236]	; (8007d9c <TIM_Base_SetConfig+0x120>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a3a      	ldr	r2, [pc, #232]	; (8007da0 <TIM_Base_SetConfig+0x124>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d108      	bne.n	8007cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <TIM_Base_SetConfig+0x114>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d02b      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cdc:	d027      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2c      	ldr	r2, [pc, #176]	; (8007d94 <TIM_Base_SetConfig+0x118>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d023      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2b      	ldr	r2, [pc, #172]	; (8007d98 <TIM_Base_SetConfig+0x11c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d01f      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <TIM_Base_SetConfig+0x120>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d01b      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a29      	ldr	r2, [pc, #164]	; (8007da0 <TIM_Base_SetConfig+0x124>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d017      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <TIM_Base_SetConfig+0x128>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <TIM_Base_SetConfig+0x12c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00f      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a26      	ldr	r2, [pc, #152]	; (8007dac <TIM_Base_SetConfig+0x130>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d00b      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a25      	ldr	r2, [pc, #148]	; (8007db0 <TIM_Base_SetConfig+0x134>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d007      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <TIM_Base_SetConfig+0x138>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d003      	beq.n	8007d2e <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a23      	ldr	r2, [pc, #140]	; (8007db8 <TIM_Base_SetConfig+0x13c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d108      	bne.n	8007d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a0a      	ldr	r2, [pc, #40]	; (8007d90 <TIM_Base_SetConfig+0x114>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_Base_SetConfig+0xf8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a0c      	ldr	r2, [pc, #48]	; (8007da0 <TIM_Base_SetConfig+0x124>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d103      	bne.n	8007d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	615a      	str	r2, [r3, #20]
}
 8007d82:	bf00      	nop
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800
 8007d9c:	40000c00 	.word	0x40000c00
 8007da0:	40010400 	.word	0x40010400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800
 8007db0:	40001800 	.word	0x40001800
 8007db4:	40001c00 	.word	0x40001c00
 8007db8:	40002000 	.word	0x40002000

08007dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e040      	b.n	8007e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f9 fd7c 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2224      	movs	r2, #36	; 0x24
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f82c 	bl	8007e94 <UART_SetConfig>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e022      	b.n	8007e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa84 	bl	800835c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb0b 	bl	80084a0 <UART_CheckIdleState>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4ba6      	ldr	r3, [pc, #664]	; (8008158 <UART_SetConfig+0x2c4>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	6979      	ldr	r1, [r7, #20]
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a94      	ldr	r2, [pc, #592]	; (800815c <UART_SetConfig+0x2c8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d120      	bne.n	8007f52 <UART_SetConfig+0xbe>
 8007f10:	4b93      	ldr	r3, [pc, #588]	; (8008160 <UART_SetConfig+0x2cc>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d816      	bhi.n	8007f4c <UART_SetConfig+0xb8>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <UART_SetConfig+0x90>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	08007f3b 	.word	0x08007f3b
 8007f30:	08007f47 	.word	0x08007f47
 8007f34:	2301      	movs	r3, #1
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e150      	b.n	80081dc <UART_SetConfig+0x348>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	77fb      	strb	r3, [r7, #31]
 8007f3e:	e14d      	b.n	80081dc <UART_SetConfig+0x348>
 8007f40:	2304      	movs	r3, #4
 8007f42:	77fb      	strb	r3, [r7, #31]
 8007f44:	e14a      	b.n	80081dc <UART_SetConfig+0x348>
 8007f46:	2308      	movs	r3, #8
 8007f48:	77fb      	strb	r3, [r7, #31]
 8007f4a:	e147      	b.n	80081dc <UART_SetConfig+0x348>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	77fb      	strb	r3, [r7, #31]
 8007f50:	e144      	b.n	80081dc <UART_SetConfig+0x348>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a83      	ldr	r2, [pc, #524]	; (8008164 <UART_SetConfig+0x2d0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d132      	bne.n	8007fc2 <UART_SetConfig+0x12e>
 8007f5c:	4b80      	ldr	r3, [pc, #512]	; (8008160 <UART_SetConfig+0x2cc>)
 8007f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f62:	f003 030c 	and.w	r3, r3, #12
 8007f66:	2b0c      	cmp	r3, #12
 8007f68:	d828      	bhi.n	8007fbc <UART_SetConfig+0x128>
 8007f6a:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <UART_SetConfig+0xdc>)
 8007f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f70:	08007fa5 	.word	0x08007fa5
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007fbd 	.word	0x08007fbd
 8007f7c:	08007fbd 	.word	0x08007fbd
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08007fab 	.word	0x08007fab
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fbd 	.word	0x08007fbd
 8007fa0:	08007fb7 	.word	0x08007fb7
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e118      	b.n	80081dc <UART_SetConfig+0x348>
 8007faa:	2302      	movs	r3, #2
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e115      	b.n	80081dc <UART_SetConfig+0x348>
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e112      	b.n	80081dc <UART_SetConfig+0x348>
 8007fb6:	2308      	movs	r3, #8
 8007fb8:	77fb      	strb	r3, [r7, #31]
 8007fba:	e10f      	b.n	80081dc <UART_SetConfig+0x348>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	e10c      	b.n	80081dc <UART_SetConfig+0x348>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a68      	ldr	r2, [pc, #416]	; (8008168 <UART_SetConfig+0x2d4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d120      	bne.n	800800e <UART_SetConfig+0x17a>
 8007fcc:	4b64      	ldr	r3, [pc, #400]	; (8008160 <UART_SetConfig+0x2cc>)
 8007fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	d013      	beq.n	8008002 <UART_SetConfig+0x16e>
 8007fda:	2b30      	cmp	r3, #48	; 0x30
 8007fdc:	d814      	bhi.n	8008008 <UART_SetConfig+0x174>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d009      	beq.n	8007ff6 <UART_SetConfig+0x162>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d810      	bhi.n	8008008 <UART_SetConfig+0x174>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <UART_SetConfig+0x15c>
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d006      	beq.n	8007ffc <UART_SetConfig+0x168>
 8007fee:	e00b      	b.n	8008008 <UART_SetConfig+0x174>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e0f2      	b.n	80081dc <UART_SetConfig+0x348>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	77fb      	strb	r3, [r7, #31]
 8007ffa:	e0ef      	b.n	80081dc <UART_SetConfig+0x348>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	77fb      	strb	r3, [r7, #31]
 8008000:	e0ec      	b.n	80081dc <UART_SetConfig+0x348>
 8008002:	2308      	movs	r3, #8
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e0e9      	b.n	80081dc <UART_SetConfig+0x348>
 8008008:	2310      	movs	r3, #16
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e0e6      	b.n	80081dc <UART_SetConfig+0x348>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a56      	ldr	r2, [pc, #344]	; (800816c <UART_SetConfig+0x2d8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d120      	bne.n	800805a <UART_SetConfig+0x1c6>
 8008018:	4b51      	ldr	r3, [pc, #324]	; (8008160 <UART_SetConfig+0x2cc>)
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008022:	2bc0      	cmp	r3, #192	; 0xc0
 8008024:	d013      	beq.n	800804e <UART_SetConfig+0x1ba>
 8008026:	2bc0      	cmp	r3, #192	; 0xc0
 8008028:	d814      	bhi.n	8008054 <UART_SetConfig+0x1c0>
 800802a:	2b80      	cmp	r3, #128	; 0x80
 800802c:	d009      	beq.n	8008042 <UART_SetConfig+0x1ae>
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d810      	bhi.n	8008054 <UART_SetConfig+0x1c0>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <UART_SetConfig+0x1a8>
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d006      	beq.n	8008048 <UART_SetConfig+0x1b4>
 800803a:	e00b      	b.n	8008054 <UART_SetConfig+0x1c0>
 800803c:	2300      	movs	r3, #0
 800803e:	77fb      	strb	r3, [r7, #31]
 8008040:	e0cc      	b.n	80081dc <UART_SetConfig+0x348>
 8008042:	2302      	movs	r3, #2
 8008044:	77fb      	strb	r3, [r7, #31]
 8008046:	e0c9      	b.n	80081dc <UART_SetConfig+0x348>
 8008048:	2304      	movs	r3, #4
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e0c6      	b.n	80081dc <UART_SetConfig+0x348>
 800804e:	2308      	movs	r3, #8
 8008050:	77fb      	strb	r3, [r7, #31]
 8008052:	e0c3      	b.n	80081dc <UART_SetConfig+0x348>
 8008054:	2310      	movs	r3, #16
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e0c0      	b.n	80081dc <UART_SetConfig+0x348>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a44      	ldr	r2, [pc, #272]	; (8008170 <UART_SetConfig+0x2dc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d125      	bne.n	80080b0 <UART_SetConfig+0x21c>
 8008064:	4b3e      	ldr	r3, [pc, #248]	; (8008160 <UART_SetConfig+0x2cc>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008072:	d017      	beq.n	80080a4 <UART_SetConfig+0x210>
 8008074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008078:	d817      	bhi.n	80080aa <UART_SetConfig+0x216>
 800807a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807e:	d00b      	beq.n	8008098 <UART_SetConfig+0x204>
 8008080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008084:	d811      	bhi.n	80080aa <UART_SetConfig+0x216>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <UART_SetConfig+0x1fe>
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d006      	beq.n	800809e <UART_SetConfig+0x20a>
 8008090:	e00b      	b.n	80080aa <UART_SetConfig+0x216>
 8008092:	2300      	movs	r3, #0
 8008094:	77fb      	strb	r3, [r7, #31]
 8008096:	e0a1      	b.n	80081dc <UART_SetConfig+0x348>
 8008098:	2302      	movs	r3, #2
 800809a:	77fb      	strb	r3, [r7, #31]
 800809c:	e09e      	b.n	80081dc <UART_SetConfig+0x348>
 800809e:	2304      	movs	r3, #4
 80080a0:	77fb      	strb	r3, [r7, #31]
 80080a2:	e09b      	b.n	80081dc <UART_SetConfig+0x348>
 80080a4:	2308      	movs	r3, #8
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e098      	b.n	80081dc <UART_SetConfig+0x348>
 80080aa:	2310      	movs	r3, #16
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e095      	b.n	80081dc <UART_SetConfig+0x348>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a2f      	ldr	r2, [pc, #188]	; (8008174 <UART_SetConfig+0x2e0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d125      	bne.n	8008106 <UART_SetConfig+0x272>
 80080ba:	4b29      	ldr	r3, [pc, #164]	; (8008160 <UART_SetConfig+0x2cc>)
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c8:	d017      	beq.n	80080fa <UART_SetConfig+0x266>
 80080ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ce:	d817      	bhi.n	8008100 <UART_SetConfig+0x26c>
 80080d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d4:	d00b      	beq.n	80080ee <UART_SetConfig+0x25a>
 80080d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080da:	d811      	bhi.n	8008100 <UART_SetConfig+0x26c>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <UART_SetConfig+0x254>
 80080e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e4:	d006      	beq.n	80080f4 <UART_SetConfig+0x260>
 80080e6:	e00b      	b.n	8008100 <UART_SetConfig+0x26c>
 80080e8:	2301      	movs	r3, #1
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e076      	b.n	80081dc <UART_SetConfig+0x348>
 80080ee:	2302      	movs	r3, #2
 80080f0:	77fb      	strb	r3, [r7, #31]
 80080f2:	e073      	b.n	80081dc <UART_SetConfig+0x348>
 80080f4:	2304      	movs	r3, #4
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e070      	b.n	80081dc <UART_SetConfig+0x348>
 80080fa:	2308      	movs	r3, #8
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e06d      	b.n	80081dc <UART_SetConfig+0x348>
 8008100:	2310      	movs	r3, #16
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e06a      	b.n	80081dc <UART_SetConfig+0x348>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <UART_SetConfig+0x2e4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d138      	bne.n	8008182 <UART_SetConfig+0x2ee>
 8008110:	4b13      	ldr	r3, [pc, #76]	; (8008160 <UART_SetConfig+0x2cc>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800811a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800811e:	d017      	beq.n	8008150 <UART_SetConfig+0x2bc>
 8008120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008124:	d82a      	bhi.n	800817c <UART_SetConfig+0x2e8>
 8008126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812a:	d00b      	beq.n	8008144 <UART_SetConfig+0x2b0>
 800812c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008130:	d824      	bhi.n	800817c <UART_SetConfig+0x2e8>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <UART_SetConfig+0x2aa>
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d006      	beq.n	800814a <UART_SetConfig+0x2b6>
 800813c:	e01e      	b.n	800817c <UART_SetConfig+0x2e8>
 800813e:	2300      	movs	r3, #0
 8008140:	77fb      	strb	r3, [r7, #31]
 8008142:	e04b      	b.n	80081dc <UART_SetConfig+0x348>
 8008144:	2302      	movs	r3, #2
 8008146:	77fb      	strb	r3, [r7, #31]
 8008148:	e048      	b.n	80081dc <UART_SetConfig+0x348>
 800814a:	2304      	movs	r3, #4
 800814c:	77fb      	strb	r3, [r7, #31]
 800814e:	e045      	b.n	80081dc <UART_SetConfig+0x348>
 8008150:	2308      	movs	r3, #8
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e042      	b.n	80081dc <UART_SetConfig+0x348>
 8008156:	bf00      	nop
 8008158:	efff69f3 	.word	0xefff69f3
 800815c:	40011000 	.word	0x40011000
 8008160:	40023800 	.word	0x40023800
 8008164:	40004400 	.word	0x40004400
 8008168:	40004800 	.word	0x40004800
 800816c:	40004c00 	.word	0x40004c00
 8008170:	40005000 	.word	0x40005000
 8008174:	40011400 	.word	0x40011400
 8008178:	40007800 	.word	0x40007800
 800817c:	2310      	movs	r3, #16
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e02c      	b.n	80081dc <UART_SetConfig+0x348>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a72      	ldr	r2, [pc, #456]	; (8008350 <UART_SetConfig+0x4bc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d125      	bne.n	80081d8 <UART_SetConfig+0x344>
 800818c:	4b71      	ldr	r3, [pc, #452]	; (8008354 <UART_SetConfig+0x4c0>)
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800819a:	d017      	beq.n	80081cc <UART_SetConfig+0x338>
 800819c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081a0:	d817      	bhi.n	80081d2 <UART_SetConfig+0x33e>
 80081a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a6:	d00b      	beq.n	80081c0 <UART_SetConfig+0x32c>
 80081a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ac:	d811      	bhi.n	80081d2 <UART_SetConfig+0x33e>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <UART_SetConfig+0x326>
 80081b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b6:	d006      	beq.n	80081c6 <UART_SetConfig+0x332>
 80081b8:	e00b      	b.n	80081d2 <UART_SetConfig+0x33e>
 80081ba:	2300      	movs	r3, #0
 80081bc:	77fb      	strb	r3, [r7, #31]
 80081be:	e00d      	b.n	80081dc <UART_SetConfig+0x348>
 80081c0:	2302      	movs	r3, #2
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e00a      	b.n	80081dc <UART_SetConfig+0x348>
 80081c6:	2304      	movs	r3, #4
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e007      	b.n	80081dc <UART_SetConfig+0x348>
 80081cc:	2308      	movs	r3, #8
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	e004      	b.n	80081dc <UART_SetConfig+0x348>
 80081d2:	2310      	movs	r3, #16
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e001      	b.n	80081dc <UART_SetConfig+0x348>
 80081d8:	2310      	movs	r3, #16
 80081da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e4:	d15b      	bne.n	800829e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80081e6:	7ffb      	ldrb	r3, [r7, #31]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d828      	bhi.n	800823e <UART_SetConfig+0x3aa>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x360>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008229 	.word	0x08008229
 8008200:	0800823f 	.word	0x0800823f
 8008204:	0800822f 	.word	0x0800822f
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800823f 	.word	0x0800823f
 8008210:	0800823f 	.word	0x0800823f
 8008214:	08008237 	.word	0x08008237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008218:	f7fd faba 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 800821c:	61b8      	str	r0, [r7, #24]
        break;
 800821e:	e013      	b.n	8008248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008220:	f7fd faca 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 8008224:	61b8      	str	r0, [r7, #24]
        break;
 8008226:	e00f      	b.n	8008248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008228:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <UART_SetConfig+0x4c4>)
 800822a:	61bb      	str	r3, [r7, #24]
        break;
 800822c:	e00c      	b.n	8008248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800822e:	f7fd f9dd 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 8008232:	61b8      	str	r0, [r7, #24]
        break;
 8008234:	e008      	b.n	8008248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800823a:	61bb      	str	r3, [r7, #24]
        break;
 800823c:	e004      	b.n	8008248 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	77bb      	strb	r3, [r7, #30]
        break;
 8008246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d074      	beq.n	8008338 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	005a      	lsls	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	441a      	add	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d916      	bls.n	8008298 <UART_SetConfig+0x404>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008270:	d212      	bcs.n	8008298 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f023 030f 	bic.w	r3, r3, #15
 800827a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b29a      	uxth	r2, r3
 8008288:	89fb      	ldrh	r3, [r7, #14]
 800828a:	4313      	orrs	r3, r2
 800828c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	89fa      	ldrh	r2, [r7, #14]
 8008294:	60da      	str	r2, [r3, #12]
 8008296:	e04f      	b.n	8008338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	77bb      	strb	r3, [r7, #30]
 800829c:	e04c      	b.n	8008338 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800829e:	7ffb      	ldrb	r3, [r7, #31]
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d828      	bhi.n	80082f6 <UART_SetConfig+0x462>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <UART_SetConfig+0x418>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d9 	.word	0x080082d9
 80082b4:	080082e1 	.word	0x080082e1
 80082b8:	080082f7 	.word	0x080082f7
 80082bc:	080082e7 	.word	0x080082e7
 80082c0:	080082f7 	.word	0x080082f7
 80082c4:	080082f7 	.word	0x080082f7
 80082c8:	080082f7 	.word	0x080082f7
 80082cc:	080082ef 	.word	0x080082ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d0:	f7fd fa5e 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 80082d4:	61b8      	str	r0, [r7, #24]
        break;
 80082d6:	e013      	b.n	8008300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d8:	f7fd fa6e 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 80082dc:	61b8      	str	r0, [r7, #24]
        break;
 80082de:	e00f      	b.n	8008300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e0:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <UART_SetConfig+0x4c4>)
 80082e2:	61bb      	str	r3, [r7, #24]
        break;
 80082e4:	e00c      	b.n	8008300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e6:	f7fd f981 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 80082ea:	61b8      	str	r0, [r7, #24]
        break;
 80082ec:	e008      	b.n	8008300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f2:	61bb      	str	r3, [r7, #24]
        break;
 80082f4:	e004      	b.n	8008300 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	77bb      	strb	r3, [r7, #30]
        break;
 80082fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d018      	beq.n	8008338 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	085a      	lsrs	r2, r3, #1
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	441a      	add	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	d909      	bls.n	8008334 <UART_SetConfig+0x4a0>
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008326:	d205      	bcs.n	8008334 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	e001      	b.n	8008338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008344:	7fbb      	ldrb	r3, [r7, #30]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40007c00 	.word	0x40007c00
 8008354:	40023800 	.word	0x40023800
 8008358:	00f42400 	.word	0x00f42400

0800835c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01a      	beq.n	8008472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800845a:	d10a      	bne.n	8008472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b0:	f7f9 fcf2 	bl	8001e98 <HAL_GetTick>
 80084b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d10e      	bne.n	80084e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f81b 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e011      	b.n	8008506 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b09c      	sub	sp, #112	; 0x70
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	603b      	str	r3, [r7, #0]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800851e:	e0a7      	b.n	8008670 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	f000 80a3 	beq.w	8008670 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852a:	f7f9 fcb5 	bl	8001e98 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008536:	429a      	cmp	r2, r3
 8008538:	d302      	bcc.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
 800853a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800853c:	2b00      	cmp	r3, #0
 800853e:	d13f      	bne.n	80085c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008554:	667b      	str	r3, [r7, #100]	; 0x64
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	663b      	str	r3, [r7, #96]	; 0x60
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008592:	64ba      	str	r2, [r7, #72]	; 0x48
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e068      	b.n	8008692 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d050      	beq.n	8008670 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085dc:	d148      	bne.n	8008670 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800860c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	613b      	str	r3, [r7, #16]
   return(result);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	66bb      	str	r3, [r7, #104]	; 0x68
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800863a:	623a      	str	r2, [r7, #32]
 800863c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	69f9      	ldr	r1, [r7, #28]
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	61bb      	str	r3, [r7, #24]
   return(result);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e010      	b.n	8008692 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	f43f af48 	beq.w	8008520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3770      	adds	r7, #112	; 0x70
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d121      	bne.n	80086f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b27      	ldr	r3, [pc, #156]	; (8008750 <FMC_SDRAM_Init+0xb4>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	6851      	ldr	r1, [r2, #4]
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	6892      	ldr	r2, [r2, #8]
 80086be:	4311      	orrs	r1, r2
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68d2      	ldr	r2, [r2, #12]
 80086c4:	4311      	orrs	r1, r2
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	6912      	ldr	r2, [r2, #16]
 80086ca:	4311      	orrs	r1, r2
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	6952      	ldr	r2, [r2, #20]
 80086d0:	4311      	orrs	r1, r2
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	6992      	ldr	r2, [r2, #24]
 80086d6:	4311      	orrs	r1, r2
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	69d2      	ldr	r2, [r2, #28]
 80086dc:	4311      	orrs	r1, r2
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	6a12      	ldr	r2, [r2, #32]
 80086e2:	4311      	orrs	r1, r2
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086e8:	430a      	orrs	r2, r1
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e026      	b.n	8008740 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	69d9      	ldr	r1, [r3, #28]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	4319      	orrs	r1, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	430b      	orrs	r3, r1
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <FMC_SDRAM_Init+0xb4>)
 8008716:	4013      	ands	r3, r2
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	6851      	ldr	r1, [r2, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	6892      	ldr	r2, [r2, #8]
 8008720:	4311      	orrs	r1, r2
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68d2      	ldr	r2, [r2, #12]
 8008726:	4311      	orrs	r1, r2
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	6912      	ldr	r2, [r2, #16]
 800872c:	4311      	orrs	r1, r2
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	6952      	ldr	r2, [r2, #20]
 8008732:	4311      	orrs	r1, r2
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6992      	ldr	r2, [r2, #24]
 8008738:	430a      	orrs	r2, r1
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	ffff8000 	.word	0xffff8000

08008754 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d128      	bne.n	80087b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	1e59      	subs	r1, r3, #1
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	3b01      	subs	r3, #1
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	4319      	orrs	r1, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	3b01      	subs	r3, #1
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	4319      	orrs	r1, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	3b01      	subs	r3, #1
 800878e:	031b      	lsls	r3, r3, #12
 8008790:	4319      	orrs	r1, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	3b01      	subs	r3, #1
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	4319      	orrs	r1, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	051b      	lsls	r3, r3, #20
 80087a4:	4319      	orrs	r1, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	430b      	orrs	r3, r1
 80087b0:	431a      	orrs	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	609a      	str	r2, [r3, #8]
 80087b6:	e02d      	b.n	8008814 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	4b19      	ldr	r3, [pc, #100]	; (8008824 <FMC_SDRAM_Timing_Init+0xd0>)
 80087be:	4013      	ands	r3, r2
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	68d2      	ldr	r2, [r2, #12]
 80087c4:	3a01      	subs	r2, #1
 80087c6:	0311      	lsls	r1, r2, #12
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	6952      	ldr	r2, [r2, #20]
 80087cc:	3a01      	subs	r2, #1
 80087ce:	0512      	lsls	r2, r2, #20
 80087d0:	430a      	orrs	r2, r1
 80087d2:	431a      	orrs	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	1e59      	subs	r1, r3, #1
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	4319      	orrs	r1, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	4319      	orrs	r1, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	3b01      	subs	r3, #1
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	4319      	orrs	r1, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	3b01      	subs	r3, #1
 800880a:	061b      	lsls	r3, r3, #24
 800880c:	430b      	orrs	r3, r1
 800880e:	431a      	orrs	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	ff0f0fff 	.word	0xff0f0fff

08008828 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008828:	b084      	sub	sp, #16
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	f107 001c 	add.w	r0, r7, #28
 8008836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800883e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008840:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008842:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008846:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800884a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800884e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008852:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <SDMMC_Init+0x54>)
 8008860:	4013      	ands	r3, r2
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	b004      	add	sp, #16
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	ffff8100 	.word	0xffff8100

08008880 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2203      	movs	r2, #3
 80088c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0303 	and.w	r3, r3, #3
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008912:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008918:	431a      	orrs	r2, r3
                       Command->CPSM);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800891e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <SDMMC_SendCommand+0x50>)
 800892c:	4013      	ands	r3, r2
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	fffff000 	.word	0xfffff000

08008948 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	b2db      	uxtb	r3, r3
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008962:	b480      	push	{r7}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3314      	adds	r3, #20
 8008970:	461a      	mov	r2, r3
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	4413      	add	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
}  
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0

}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80089ee:	2310      	movs	r3, #16
 80089f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089f2:	2340      	movs	r3, #64	; 0x40
 80089f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ff74 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a10:	2110      	movs	r1, #16
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa1a 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a32:	2311      	movs	r3, #17
 8008a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a36:	2340      	movs	r3, #64	; 0x40
 8008a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff ff52 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	2111      	movs	r1, #17
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9f8 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008a76:	2312      	movs	r3, #18
 8008a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a7a:	2340      	movs	r3, #64	; 0x40
 8008a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff ff30 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a98:	2112      	movs	r1, #18
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9d6 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008aba:	2318      	movs	r3, #24
 8008abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ff0e 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	2118      	movs	r1, #24
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9b4 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3720      	adds	r7, #32
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008afe:	2319      	movs	r3, #25
 8008b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b02:	2340      	movs	r3, #64	; 0x40
 8008b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b10:	f107 0308 	add.w	r3, r7, #8
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff feec 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b20:	2119      	movs	r1, #25
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f992 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b40:	230c      	movs	r3, #12
 8008b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b52:	f107 0308 	add.w	r3, r7, #8
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff fecb 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008b5e:	4a05      	ldr	r2, [pc, #20]	; (8008b74 <SDMMC_CmdStopTransfer+0x40>)
 8008b60:	210c      	movs	r1, #12
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f972 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	05f5e100 	.word	0x05f5e100

08008b78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008b88:	2307      	movs	r3, #7
 8008b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b98:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff fea7 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	2107      	movs	r1, #7
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f94d 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008bb2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3728      	adds	r7, #40	; 0x28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b088      	sub	sp, #32
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe86 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fb67 	bl	80092bc <SDMMC_GetCmdError>
 8008bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c08:	2308      	movs	r3, #8
 8008c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fe67 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fafa 	bl	8009220 <SDMMC_GetCmdResp7>
 8008c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c46:	2337      	movs	r3, #55	; 0x37
 8008c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c4a:	2340      	movs	r3, #64	; 0x40
 8008c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c58:	f107 0308 	add.w	r3, r7, #8
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fe48 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	2137      	movs	r1, #55	; 0x37
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f8ee 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c72:	69fb      	ldr	r3, [r7, #28]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <SDMMC_CmdAppOperCommand+0x44>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008c8e:	2329      	movs	r3, #41	; 0x29
 8008c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff fe24 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fa03 	bl	80090b8 <SDMMC_GetCmdResp3>
 8008cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	80100000 	.word	0x80100000

08008cc4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008cd2:	2306      	movs	r3, #6
 8008cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd6:	2340      	movs	r3, #64	; 0x40
 8008cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fe02 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf4:	2106      	movs	r1, #6
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8a8 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d14:	2333      	movs	r3, #51	; 0x33
 8008d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d26:	f107 0308 	add.w	r3, r7, #8
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fde1 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d36:	2133      	movs	r1, #51	; 0x33
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f887 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d40:	69fb      	ldr	r3, [r7, #28]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b088      	sub	sp, #32
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d56:	2302      	movs	r3, #2
 8008d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d5a:	23c0      	movs	r3, #192	; 0xc0
 8008d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d68:	f107 0308 	add.w	r3, r7, #8
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fdc0 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f957 	bl	8009028 <SDMMC_GetCmdResp2>
 8008d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b088      	sub	sp, #32
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008d94:	2309      	movs	r3, #9
 8008d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d98:	23c0      	movs	r3, #192	; 0xc0
 8008d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fda1 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f938 	bl	8009028 <SDMMC_GetCmdResp2>
 8008db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dba:	69fb      	ldr	r3, [r7, #28]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd6:	2340      	movs	r3, #64	; 0x40
 8008dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fd82 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	2103      	movs	r1, #3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f99d 	bl	8009134 <SDMMC_GetCmdResp6>
 8008dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b088      	sub	sp, #32
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e14:	230d      	movs	r3, #13
 8008e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fd61 	bl	80088f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e36:	210d      	movs	r1, #13
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f807 	bl	8008e4c <SDMMC_GetCmdResp1>
 8008e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e40:	69fb      	ldr	r3, [r7, #28]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	460b      	mov	r3, r1
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e5a:	4b70      	ldr	r3, [pc, #448]	; (800901c <SDMMC_GetCmdResp1+0x1d0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a70      	ldr	r2, [pc, #448]	; (8009020 <SDMMC_GetCmdResp1+0x1d4>)
 8008e60:	fba2 2303 	umull	r2, r3, r2, r3
 8008e64:	0a5a      	lsrs	r2, r3, #9
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	fb02 f303 	mul.w	r3, r2, r3
 8008e6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	61fa      	str	r2, [r7, #28]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e7c:	e0c9      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0ef      	beq.n	8008e6e <SDMMC_GetCmdResp1+0x22>
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1ea      	bne.n	8008e6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eaa:	2304      	movs	r3, #4
 8008eac:	e0b1      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e0a6      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	22c5      	movs	r2, #197	; 0xc5
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff fd3c 	bl	8008948 <SDMMC_GetCommandResponse>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d001      	beq.n	8008ede <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e099      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff fd3e 	bl	8008962 <SDMMC_GetResponse>
 8008ee6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4b4e      	ldr	r3, [pc, #312]	; (8009024 <SDMMC_GetCmdResp1+0x1d8>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e08d      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da02      	bge.n	8008f02 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f00:	e087      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	e080      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008f1a:	2380      	movs	r3, #128	; 0x80
 8008f1c:	e079      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f2c:	e071      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3c:	e069      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4c:	e061      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f5c:	e059      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f6c:	e051      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f7c:	e049      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f8c:	e041      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f9c:	e039      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fac:	e031      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008fb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008fbc:	e029      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008fc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fcc:	e021      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008fd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fdc:	e019      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008fe8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fec:	e011      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ffc:	e009      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009008:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800900c:	e001      	b.n	8009012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800900e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000000 	.word	0x20000000
 8009020:	10624dd3 	.word	0x10624dd3
 8009024:	fdffe008 	.word	0xfdffe008

08009028 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009030:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <SDMMC_GetCmdResp2+0x88>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1f      	ldr	r2, [pc, #124]	; (80090b4 <SDMMC_GetCmdResp2+0x8c>)
 8009036:	fba2 2303 	umull	r2, r3, r2, r3
 800903a:	0a5b      	lsrs	r3, r3, #9
 800903c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	1e5a      	subs	r2, r3, #1
 800904a:	60fa      	str	r2, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009054:	e026      	b.n	80090a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0ef      	beq.n	8009046 <SDMMC_GetCmdResp2+0x1e>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1ea      	bne.n	8009046 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2204      	movs	r2, #4
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009082:	2304      	movs	r3, #4
 8009084:	e00e      	b.n	80090a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009098:	2301      	movs	r3, #1
 800909a:	e003      	b.n	80090a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	22c5      	movs	r2, #197	; 0xc5
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20000000 	.word	0x20000000
 80090b4:	10624dd3 	.word	0x10624dd3

080090b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090c0:	4b1a      	ldr	r3, [pc, #104]	; (800912c <SDMMC_GetCmdResp3+0x74>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a1a      	ldr	r2, [pc, #104]	; (8009130 <SDMMC_GetCmdResp3+0x78>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	0a5b      	lsrs	r3, r3, #9
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	fb02 f303 	mul.w	r3, r2, r3
 80090d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	60fa      	str	r2, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090e4:	e01b      	b.n	800911e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ef      	beq.n	80090d6 <SDMMC_GetCmdResp3+0x1e>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ea      	bne.n	80090d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2204      	movs	r2, #4
 8009110:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009112:	2304      	movs	r3, #4
 8009114:	e003      	b.n	800911e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	22c5      	movs	r2, #197	; 0xc5
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000000 	.word	0x20000000
 8009130:	10624dd3 	.word	0x10624dd3

08009134 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	460b      	mov	r3, r1
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009142:	4b35      	ldr	r3, [pc, #212]	; (8009218 <SDMMC_GetCmdResp6+0xe4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a35      	ldr	r2, [pc, #212]	; (800921c <SDMMC_GetCmdResp6+0xe8>)
 8009148:	fba2 2303 	umull	r2, r3, r2, r3
 800914c:	0a5b      	lsrs	r3, r3, #9
 800914e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	1e5a      	subs	r2, r3, #1
 800915c:	61fa      	str	r2, [r7, #28]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009162:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009166:	e052      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0ef      	beq.n	8009158 <SDMMC_GetCmdResp6+0x24>
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ea      	bne.n	8009158 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2204      	movs	r2, #4
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009194:	2304      	movs	r3, #4
 8009196:	e03a      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e02f      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fbca 	bl	8008948 <SDMMC_GetCommandResponse>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d001      	beq.n	80091c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091be:	2301      	movs	r3, #1
 80091c0:	e025      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	22c5      	movs	r2, #197	; 0xc5
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80091c8:	2100      	movs	r1, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fbc9 	bl	8008962 <SDMMC_GetResponse>
 80091d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e011      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091f8:	e009      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009208:	e001      	b.n	800920e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800920a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800920e:	4618      	mov	r0, r3
 8009210:	3720      	adds	r7, #32
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000000 	.word	0x20000000
 800921c:	10624dd3 	.word	0x10624dd3

08009220 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <SDMMC_GetCmdResp7+0x94>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <SDMMC_GetCmdResp7+0x98>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	0a5b      	lsrs	r3, r3, #9
 8009234:	f241 3288 	movw	r2, #5000	; 0x1388
 8009238:	fb02 f303 	mul.w	r3, r2, r3
 800923c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1e5a      	subs	r2, r3, #1
 8009242:	60fa      	str	r2, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800924c:	e02c      	b.n	80092a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0ef      	beq.n	800923e <SDMMC_GetCmdResp7+0x1e>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ea      	bne.n	800923e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2204      	movs	r2, #4
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800927a:	2304      	movs	r3, #4
 800927c:	e014      	b.n	80092a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009290:	2301      	movs	r3, #1
 8009292:	e009      	b.n	80092a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2240      	movs	r2, #64	; 0x40
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80092a6:	2300      	movs	r3, #0
  
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000000 	.word	0x20000000
 80092b8:	10624dd3 	.word	0x10624dd3

080092bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <SDMMC_GetCmdError+0x50>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a11      	ldr	r2, [pc, #68]	; (8009310 <SDMMC_GetCmdError+0x54>)
 80092ca:	fba2 2303 	umull	r2, r3, r2, r3
 80092ce:	0a5b      	lsrs	r3, r3, #9
 80092d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d4:	fb02 f303 	mul.w	r3, r2, r3
 80092d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	1e5a      	subs	r2, r3, #1
 80092de:	60fa      	str	r2, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e8:	e009      	b.n	80092fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f1      	beq.n	80092da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	22c5      	movs	r2, #197	; 0xc5
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20000000 	.word	0x20000000
 8009310:	10624dd3 	.word	0x10624dd3

08009314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009314:	b084      	sub	sp, #16
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	f107 001c 	add.w	r0, r7, #28
 8009322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	2b01      	cmp	r3, #1
 800932a:	d120      	bne.n	800936e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	4b20      	ldr	r3, [pc, #128]	; (80093c0 <USB_CoreInit+0xac>)
 800933e:	4013      	ands	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	2b01      	cmp	r3, #1
 8009354:	d105      	bne.n	8009362 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fbee 	bl	800ab44 <USB_CoreReset>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
 800936c:	e010      	b.n	8009390 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fbe2 	bl	800ab44 <USB_CoreReset>
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	2b01      	cmp	r3, #1
 8009394:	d10b      	bne.n	80093ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f043 0206 	orr.w	r2, r3, #6
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093ba:	b004      	add	sp, #16
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	ffbdffbf 	.word	0xffbdffbf

080093c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d165      	bne.n	80094a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4a41      	ldr	r2, [pc, #260]	; (80094e0 <USB_SetTurnaroundTime+0x11c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d906      	bls.n	80093ee <USB_SetTurnaroundTime+0x2a>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4a40      	ldr	r2, [pc, #256]	; (80094e4 <USB_SetTurnaroundTime+0x120>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d202      	bcs.n	80093ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093e8:	230f      	movs	r3, #15
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	e062      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4a3c      	ldr	r2, [pc, #240]	; (80094e4 <USB_SetTurnaroundTime+0x120>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d306      	bcc.n	8009404 <USB_SetTurnaroundTime+0x40>
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a3b      	ldr	r2, [pc, #236]	; (80094e8 <USB_SetTurnaroundTime+0x124>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d202      	bcs.n	8009404 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093fe:	230e      	movs	r3, #14
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	e057      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4a38      	ldr	r2, [pc, #224]	; (80094e8 <USB_SetTurnaroundTime+0x124>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d306      	bcc.n	800941a <USB_SetTurnaroundTime+0x56>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4a37      	ldr	r2, [pc, #220]	; (80094ec <USB_SetTurnaroundTime+0x128>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d202      	bcs.n	800941a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009414:	230d      	movs	r3, #13
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e04c      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	4a33      	ldr	r2, [pc, #204]	; (80094ec <USB_SetTurnaroundTime+0x128>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d306      	bcc.n	8009430 <USB_SetTurnaroundTime+0x6c>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	4a32      	ldr	r2, [pc, #200]	; (80094f0 <USB_SetTurnaroundTime+0x12c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d802      	bhi.n	8009430 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800942a:	230c      	movs	r3, #12
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	e041      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4a2f      	ldr	r2, [pc, #188]	; (80094f0 <USB_SetTurnaroundTime+0x12c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d906      	bls.n	8009446 <USB_SetTurnaroundTime+0x82>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	4a2e      	ldr	r2, [pc, #184]	; (80094f4 <USB_SetTurnaroundTime+0x130>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d802      	bhi.n	8009446 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009440:	230b      	movs	r3, #11
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	e036      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4a2a      	ldr	r2, [pc, #168]	; (80094f4 <USB_SetTurnaroundTime+0x130>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d906      	bls.n	800945c <USB_SetTurnaroundTime+0x98>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	4a29      	ldr	r2, [pc, #164]	; (80094f8 <USB_SetTurnaroundTime+0x134>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d802      	bhi.n	800945c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009456:	230a      	movs	r3, #10
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e02b      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	4a26      	ldr	r2, [pc, #152]	; (80094f8 <USB_SetTurnaroundTime+0x134>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d906      	bls.n	8009472 <USB_SetTurnaroundTime+0xae>
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	4a25      	ldr	r2, [pc, #148]	; (80094fc <USB_SetTurnaroundTime+0x138>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d202      	bcs.n	8009472 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800946c:	2309      	movs	r3, #9
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e020      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4a21      	ldr	r2, [pc, #132]	; (80094fc <USB_SetTurnaroundTime+0x138>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d306      	bcc.n	8009488 <USB_SetTurnaroundTime+0xc4>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	4a20      	ldr	r2, [pc, #128]	; (8009500 <USB_SetTurnaroundTime+0x13c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d802      	bhi.n	8009488 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009482:	2308      	movs	r3, #8
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e015      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4a1d      	ldr	r2, [pc, #116]	; (8009500 <USB_SetTurnaroundTime+0x13c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d906      	bls.n	800949e <USB_SetTurnaroundTime+0xda>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <USB_SetTurnaroundTime+0x140>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d202      	bcs.n	800949e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009498:	2307      	movs	r3, #7
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	e00a      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800949e:	2306      	movs	r3, #6
 80094a0:	617b      	str	r3, [r7, #20]
 80094a2:	e007      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80094aa:	2309      	movs	r3, #9
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	e001      	b.n	80094b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80094b0:	2309      	movs	r3, #9
 80094b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	029b      	lsls	r3, r3, #10
 80094c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80094cc:	431a      	orrs	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	00d8acbf 	.word	0x00d8acbf
 80094e4:	00e4e1c0 	.word	0x00e4e1c0
 80094e8:	00f42400 	.word	0x00f42400
 80094ec:	01067380 	.word	0x01067380
 80094f0:	011a499f 	.word	0x011a499f
 80094f4:	01312cff 	.word	0x01312cff
 80094f8:	014ca43f 	.word	0x014ca43f
 80094fc:	016e3600 	.word	0x016e3600
 8009500:	01a6ab1f 	.word	0x01a6ab1f
 8009504:	01e84800 	.word	0x01e84800

08009508 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f043 0201 	orr.w	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f023 0201 	bic.w	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d115      	bne.n	800959a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800957a:	2001      	movs	r0, #1
 800957c:	f7f8 fc98 	bl	8001eb0 <HAL_Delay>
      ms++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fa4b 	bl	800aa22 <USB_GetMode>
 800958c:	4603      	mov	r3, r0
 800958e:	2b01      	cmp	r3, #1
 8009590:	d01e      	beq.n	80095d0 <USB_SetCurrentMode+0x84>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b31      	cmp	r3, #49	; 0x31
 8009596:	d9f0      	bls.n	800957a <USB_SetCurrentMode+0x2e>
 8009598:	e01a      	b.n	80095d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d115      	bne.n	80095cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095ac:	2001      	movs	r0, #1
 80095ae:	f7f8 fc7f 	bl	8001eb0 <HAL_Delay>
      ms++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3301      	adds	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fa32 	bl	800aa22 <USB_GetMode>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <USB_SetCurrentMode+0x84>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b31      	cmp	r3, #49	; 0x31
 80095c8:	d9f0      	bls.n	80095ac <USB_SetCurrentMode+0x60>
 80095ca:	e001      	b.n	80095d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e005      	b.n	80095dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b32      	cmp	r3, #50	; 0x32
 80095d4:	d101      	bne.n	80095da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e000      	b.n	80095dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095e4:	b084      	sub	sp, #16
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b086      	sub	sp, #24
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095fe:	2300      	movs	r3, #0
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	e009      	b.n	8009618 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	3340      	adds	r3, #64	; 0x40
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	2200      	movs	r2, #0
 8009610:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	3301      	adds	r3, #1
 8009616:	613b      	str	r3, [r7, #16]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	2b0e      	cmp	r3, #14
 800961c:	d9f2      	bls.n	8009604 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800961e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11c      	bne.n	800965e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009632:	f043 0302 	orr.w	r3, r3, #2
 8009636:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e005      	b.n	800966a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009670:	461a      	mov	r2, r3
 8009672:	2300      	movs	r3, #0
 8009674:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967c:	4619      	mov	r1, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009684:	461a      	mov	r2, r3
 8009686:	680b      	ldr	r3, [r1, #0]
 8009688:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	2b01      	cmp	r3, #1
 800968e:	d10c      	bne.n	80096aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009696:	2100      	movs	r1, #0
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f965 	bl	8009968 <USB_SetDevSpeed>
 800969e:	e008      	b.n	80096b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096a0:	2101      	movs	r1, #1
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f960 	bl	8009968 <USB_SetDevSpeed>
 80096a8:	e003      	b.n	80096b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096aa:	2103      	movs	r1, #3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f95b 	bl	8009968 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096b2:	2110      	movs	r1, #16
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8f3 	bl	80098a0 <USB_FlushTxFifo>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f91f 	bl	8009908 <USB_FlushRxFifo>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096da:	461a      	mov	r2, r3
 80096dc:	2300      	movs	r3, #0
 80096de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e6:	461a      	mov	r2, r3
 80096e8:	2300      	movs	r3, #0
 80096ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	461a      	mov	r2, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096f8:	2300      	movs	r3, #0
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	e043      	b.n	8009786 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009714:	d118      	bne.n	8009748 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	461a      	mov	r2, r3
 800972a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	e013      	b.n	800975a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973e:	461a      	mov	r2, r3
 8009740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	e008      	b.n	800975a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	461a      	mov	r2, r3
 8009756:	2300      	movs	r3, #0
 8009758:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009766:	461a      	mov	r2, r3
 8009768:	2300      	movs	r3, #0
 800976a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009778:	461a      	mov	r2, r3
 800977a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800977e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3301      	adds	r3, #1
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	429a      	cmp	r2, r3
 800978c:	d3b7      	bcc.n	80096fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	e043      	b.n	800981c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097aa:	d118      	bne.n	80097de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	461a      	mov	r2, r3
 80097c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	e013      	b.n	80097f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	461a      	mov	r2, r3
 80097d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e008      	b.n	80097f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	461a      	mov	r2, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	461a      	mov	r2, r3
 8009810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	429a      	cmp	r2, r3
 8009822:	d3b7      	bcc.n	8009794 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009836:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009844:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	2b00      	cmp	r3, #0
 800984a:	d105      	bne.n	8009858 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f043 0210 	orr.w	r2, r3, #16
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <USB_DevInit+0x2b4>)
 800985e:	4313      	orrs	r3, r2
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d005      	beq.n	8009876 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f043 0208 	orr.w	r2, r3, #8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d105      	bne.n	8009888 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	4b06      	ldr	r3, [pc, #24]	; (800989c <USB_DevInit+0x2b8>)
 8009882:	4313      	orrs	r3, r2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009894:	b004      	add	sp, #16
 8009896:	4770      	bx	lr
 8009898:	803c3800 	.word	0x803c3800
 800989c:	40000004 	.word	0x40000004

080098a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4a13      	ldr	r2, [pc, #76]	; (8009904 <USB_FlushTxFifo+0x64>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d901      	bls.n	80098c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e01b      	b.n	80098f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	daf2      	bge.n	80098ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	019b      	lsls	r3, r3, #6
 80098d0:	f043 0220 	orr.w	r2, r3, #32
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a08      	ldr	r2, [pc, #32]	; (8009904 <USB_FlushTxFifo+0x64>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d901      	bls.n	80098ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e006      	b.n	80098f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d0f0      	beq.n	80098d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	00030d40 	.word	0x00030d40

08009908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <USB_FlushRxFifo+0x5c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d901      	bls.n	8009926 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e018      	b.n	8009958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	daf2      	bge.n	8009914 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2210      	movs	r2, #16
 8009936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a08      	ldr	r2, [pc, #32]	; (8009964 <USB_FlushRxFifo+0x5c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d901      	bls.n	800994a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e006      	b.n	8009958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b10      	cmp	r3, #16
 8009954:	d0f0      	beq.n	8009938 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	00030d40 	.word	0x00030d40

08009968 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009988:	4313      	orrs	r3, r2
 800998a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800999a:	b480      	push	{r7}
 800999c:	b087      	sub	sp, #28
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 0306 	and.w	r3, r3, #6
 80099b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80099ba:	2300      	movs	r3, #0
 80099bc:	75fb      	strb	r3, [r7, #23]
 80099be:	e00a      	b.n	80099d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d002      	beq.n	80099cc <USB_GetDevSpeed+0x32>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b06      	cmp	r3, #6
 80099ca:	d102      	bne.n	80099d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80099cc:	2302      	movs	r3, #2
 80099ce:	75fb      	strb	r3, [r7, #23]
 80099d0:	e001      	b.n	80099d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80099d2:	230f      	movs	r3, #15
 80099d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d139      	bne.n	8009a74 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a06:	69da      	ldr	r2, [r3, #28]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 030f 	and.w	r3, r3, #15
 8009a10:	2101      	movs	r1, #1
 8009a12:	fa01 f303 	lsl.w	r3, r1, r3
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	68f9      	ldr	r1, [r7, #12]
 8009a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d153      	bne.n	8009ae0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	791b      	ldrb	r3, [r3, #4]
 8009a52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	059b      	lsls	r3, r3, #22
 8009a5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	0159      	lsls	r1, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	440b      	add	r3, r1
 8009a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4b20      	ldr	r3, [pc, #128]	; (8009af0 <USB_ActivateEndpoint+0x10c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	600b      	str	r3, [r1, #0]
 8009a72:	e035      	b.n	8009ae0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	2101      	movs	r1, #1
 8009a86:	fa01 f303 	lsl.w	r3, r1, r3
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a92:	4313      	orrs	r3, r2
 8009a94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d119      	bne.n	8009ae0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	791b      	ldrb	r3, [r3, #4]
 8009ac6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	431a      	orrs	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	0159      	lsls	r1, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	440b      	add	r3, r1
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <USB_ActivateEndpoint+0x10c>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	10008000 	.word	0x10008000

08009af4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d161      	bne.n	8009bd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b26:	d11f      	bne.n	8009b68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 030f 	and.w	r3, r3, #15
 8009b78:	2101      	movs	r1, #1
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	43db      	mvns	r3, r3
 8009b82:	68f9      	ldr	r1, [r7, #12]
 8009b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b88:	4013      	ands	r3, r2
 8009b8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	43db      	mvns	r3, r3
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bac:	4013      	ands	r3, r2
 8009bae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	0159      	lsls	r1, r3, #5
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	440b      	add	r3, r1
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <USB_DeactivateEndpoint+0x1b0>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	600b      	str	r3, [r1, #0]
 8009bd2:	e060      	b.n	8009c96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bea:	d11f      	bne.n	8009c2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	0151      	lsls	r1, r2, #5
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	440a      	add	r2, r1
 8009c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	43db      	mvns	r3, r3
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	2101      	movs	r1, #1
 8009c62:	fa01 f303 	lsl.w	r3, r1, r3
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c70:	4013      	ands	r3, r2
 8009c72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	0159      	lsls	r1, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	440b      	add	r3, r1
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <USB_DeactivateEndpoint+0x1b4>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	ec337800 	.word	0xec337800
 8009ca8:	eff37800 	.word	0xeff37800

08009cac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	f040 8163 	bne.w	8009f94 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d132      	bne.n	8009d3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	0159      	lsls	r1, r3, #5
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4ba5      	ldr	r3, [pc, #660]	; (8009f88 <USB_EPStartXfer+0x2dc>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	691a      	ldr	r2, [r3, #16]
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	0159      	lsls	r1, r3, #5
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d32:	4619      	mov	r1, r3
 8009d34:	4b95      	ldr	r3, [pc, #596]	; (8009f8c <USB_EPStartXfer+0x2e0>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	610b      	str	r3, [r1, #16]
 8009d3a:	e074      	b.n	8009e26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	691a      	ldr	r2, [r3, #16]
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	0159      	lsls	r1, r3, #5
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	440b      	add	r3, r1
 8009d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d56:	4619      	mov	r1, r3
 8009d58:	4b8c      	ldr	r3, [pc, #560]	; (8009f8c <USB_EPStartXfer+0x2e0>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6a:	691a      	ldr	r2, [r3, #16]
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	0159      	lsls	r1, r3, #5
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4b83      	ldr	r3, [pc, #524]	; (8009f88 <USB_EPStartXfer+0x2dc>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6999      	ldr	r1, [r3, #24]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	440b      	add	r3, r1
 8009d98:	1e59      	subs	r1, r3, #1
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009da2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009da4:	4b7a      	ldr	r3, [pc, #488]	; (8009f90 <USB_EPStartXfer+0x2e4>)
 8009da6:	400b      	ands	r3, r1
 8009da8:	69b9      	ldr	r1, [r7, #24]
 8009daa:	0148      	lsls	r0, r1, #5
 8009dac:	69f9      	ldr	r1, [r7, #28]
 8009dae:	4401      	add	r1, r0
 8009db0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009db4:	4313      	orrs	r3, r2
 8009db6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	0148      	lsls	r0, r1, #5
 8009dd2:	69f9      	ldr	r1, [r7, #28]
 8009dd4:	4401      	add	r1, r0
 8009dd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d11f      	bne.n	8009e26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	0151      	lsls	r1, r2, #5
 8009df8:	69fa      	ldr	r2, [r7, #28]
 8009dfa:	440a      	add	r2, r1
 8009dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009e04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d14b      	bne.n	8009ec4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d009      	beq.n	8009e48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	461a      	mov	r2, r3
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	791b      	ldrb	r3, [r3, #4]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d128      	bne.n	8009ea2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d110      	bne.n	8009e82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	0151      	lsls	r1, r2, #5
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	440a      	add	r2, r1
 8009e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	e00f      	b.n	8009ea2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	0151      	lsls	r1, r2, #5
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	440a      	add	r2, r1
 8009eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ebc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	e137      	b.n	800a134 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	0151      	lsls	r1, r2, #5
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ee2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	791b      	ldrb	r3, [r3, #4]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d015      	beq.n	8009f18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 811f 	beq.w	800a134 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	2101      	movs	r1, #1
 8009f08:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0c:	69f9      	ldr	r1, [r7, #28]
 8009f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f12:	4313      	orrs	r3, r2
 8009f14:	634b      	str	r3, [r1, #52]	; 0x34
 8009f16:	e10d      	b.n	800a134 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d110      	bne.n	8009f4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	e00f      	b.n	8009f6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	0151      	lsls	r1, r2, #5
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	440a      	add	r2, r1
 8009f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6919      	ldr	r1, [r3, #16]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	b298      	uxth	r0, r3
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 faea 	bl	800a558 <USB_WritePacket>
 8009f84:	e0d6      	b.n	800a134 <USB_EPStartXfer+0x488>
 8009f86:	bf00      	nop
 8009f88:	e007ffff 	.word	0xe007ffff
 8009f8c:	fff80000 	.word	0xfff80000
 8009f90:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691a      	ldr	r2, [r3, #16]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	0159      	lsls	r1, r3, #5
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	440b      	add	r3, r1
 8009faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4b63      	ldr	r3, [pc, #396]	; (800a140 <USB_EPStartXfer+0x494>)
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	0159      	lsls	r1, r3, #5
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	440b      	add	r3, r1
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4b5c      	ldr	r3, [pc, #368]	; (800a144 <USB_EPStartXfer+0x498>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d123      	bne.n	800a028 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ff6:	69b9      	ldr	r1, [r7, #24]
 8009ff8:	0148      	lsls	r0, r1, #5
 8009ffa:	69f9      	ldr	r1, [r7, #28]
 8009ffc:	4401      	add	r1, r0
 8009ffe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a002:	4313      	orrs	r3, r2
 800a004:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a024:	6113      	str	r3, [r2, #16]
 800a026:	e037      	b.n	800a098 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	4413      	add	r3, r2
 800a032:	1e5a      	subs	r2, r3, #1
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	8afa      	ldrh	r2, [r7, #22]
 800a044:	fb03 f202 	mul.w	r2, r3, r2
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	8afb      	ldrh	r3, [r7, #22]
 800a05c:	04d9      	lsls	r1, r3, #19
 800a05e:	4b3a      	ldr	r3, [pc, #232]	; (800a148 <USB_EPStartXfer+0x49c>)
 800a060:	400b      	ands	r3, r1
 800a062:	69b9      	ldr	r1, [r7, #24]
 800a064:	0148      	lsls	r0, r1, #5
 800a066:	69f9      	ldr	r1, [r7, #28]
 800a068:	4401      	add	r1, r0
 800a06a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a06e:	4313      	orrs	r3, r2
 800a070:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a088:	69b9      	ldr	r1, [r7, #24]
 800a08a:	0148      	lsls	r0, r1, #5
 800a08c:	69f9      	ldr	r1, [r7, #28]
 800a08e:	4401      	add	r1, r0
 800a090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a094:	4313      	orrs	r3, r2
 800a096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d10d      	bne.n	800a0ba <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d009      	beq.n	800a0ba <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6919      	ldr	r1, [r3, #16]
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b6:	460a      	mov	r2, r1
 800a0b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d128      	bne.n	800a114 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	0151      	lsls	r1, r2, #5
 800a0e4:	69fa      	ldr	r2, [r7, #28]
 800a0e6:	440a      	add	r2, r1
 800a0e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	e00f      	b.n	800a114 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	69fa      	ldr	r2, [r7, #28]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a112:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	0151      	lsls	r1, r2, #5
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	440a      	add	r2, r1
 800a12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a12e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	fff80000 	.word	0xfff80000
 800a144:	e007ffff 	.word	0xe007ffff
 800a148:	1ff80000 	.word	0x1ff80000

0800a14c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	f040 80ce 	bne.w	800a30a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d132      	bne.n	800a1dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	0159      	lsls	r1, r3, #5
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	440b      	add	r3, r1
 800a18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a190:	4619      	mov	r1, r3
 800a192:	4b9a      	ldr	r3, [pc, #616]	; (800a3fc <USB_EP0StartXfer+0x2b0>)
 800a194:	4013      	ands	r3, r2
 800a196:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	691a      	ldr	r2, [r3, #16]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	0159      	lsls	r1, r3, #5
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4b8a      	ldr	r3, [pc, #552]	; (800a400 <USB_EP0StartXfer+0x2b4>)
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	610b      	str	r3, [r1, #16]
 800a1da:	e04e      	b.n	800a27a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	0159      	lsls	r1, r3, #5
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	440b      	add	r3, r1
 800a1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4b81      	ldr	r3, [pc, #516]	; (800a400 <USB_EP0StartXfer+0x2b4>)
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	0159      	lsls	r1, r3, #5
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	440b      	add	r3, r1
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	4619      	mov	r1, r3
 800a21a:	4b78      	ldr	r3, [pc, #480]	; (800a3fc <USB_EP0StartXfer+0x2b0>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d903      	bls.n	800a234 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a24e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a26a:	6939      	ldr	r1, [r7, #16]
 800a26c:	0148      	lsls	r0, r1, #5
 800a26e:	6979      	ldr	r1, [r7, #20]
 800a270:	4401      	add	r1, r0
 800a272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a276:	4313      	orrs	r3, r2
 800a278:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d11e      	bne.n	800a2be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a294:	461a      	mov	r2, r3
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	e097      	b.n	800a3ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8083 	beq.w	800a3ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f003 030f 	and.w	r3, r3, #15
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fe:	6979      	ldr	r1, [r7, #20]
 800a300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a304:	4313      	orrs	r3, r2
 800a306:	634b      	str	r3, [r1, #52]	; 0x34
 800a308:	e071      	b.n	800a3ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	0159      	lsls	r1, r3, #5
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	440b      	add	r3, r1
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	4619      	mov	r1, r3
 800a326:	4b36      	ldr	r3, [pc, #216]	; (800a400 <USB_EP0StartXfer+0x2b4>)
 800a328:	4013      	ands	r3, r2
 800a32a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	0159      	lsls	r1, r3, #5
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	440b      	add	r3, r1
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	4619      	mov	r1, r3
 800a348:	4b2c      	ldr	r3, [pc, #176]	; (800a3fc <USB_EP0StartXfer+0x2b0>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39c:	6939      	ldr	r1, [r7, #16]
 800a39e:	0148      	lsls	r0, r1, #5
 800a3a0:	6979      	ldr	r1, [r7, #20]
 800a3a2:	4401      	add	r1, r0
 800a3a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10d      	bne.n	800a3ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6919      	ldr	r1, [r3, #16]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ca:	460a      	mov	r2, r1
 800a3cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	e007ffff 	.word	0xe007ffff
 800a400:	fff80000 	.word	0xfff80000

0800a404 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	785b      	ldrb	r3, [r3, #1]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d14a      	bne.n	800a4b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a43a:	f040 8086 	bne.w	800a54a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	7812      	ldrb	r2, [r2, #0]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a460:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	7812      	ldrb	r2, [r2, #0]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a484:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a492:	4293      	cmp	r3, r2
 800a494:	d902      	bls.n	800a49c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	75fb      	strb	r3, [r7, #23]
          break;
 800a49a:	e056      	b.n	800a54a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4b4:	d0e7      	beq.n	800a486 <USB_EPStopXfer+0x82>
 800a4b6:	e048      	b.n	800a54a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4d0:	d13b      	bne.n	800a54a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	7812      	ldrb	r2, [r2, #0]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a514:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f242 7210 	movw	r2, #10000	; 0x2710
 800a526:	4293      	cmp	r3, r2
 800a528:	d902      	bls.n	800a530 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	75fb      	strb	r3, [r7, #23]
          break;
 800a52e:	e00c      	b.n	800a54a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a548:	d0e7      	beq.n	800a51a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a558:	b480      	push	{r7}
 800a55a:	b089      	sub	sp, #36	; 0x24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4611      	mov	r1, r2
 800a564:	461a      	mov	r2, r3
 800a566:	460b      	mov	r3, r1
 800a568:	71fb      	strb	r3, [r7, #7]
 800a56a:	4613      	mov	r3, r2
 800a56c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a576:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d123      	bne.n	800a5c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a57e:	88bb      	ldrh	r3, [r7, #4]
 800a580:	3303      	adds	r3, #3
 800a582:	089b      	lsrs	r3, r3, #2
 800a584:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a586:	2300      	movs	r3, #0
 800a588:	61bb      	str	r3, [r7, #24]
 800a58a:	e018      	b.n	800a5be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	031a      	lsls	r2, r3, #12
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	4413      	add	r3, r2
 800a594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a598:	461a      	mov	r2, r3
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d3e2      	bcc.n	800a58c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3724      	adds	r7, #36	; 0x24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b08b      	sub	sp, #44	; 0x2c
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	089b      	lsrs	r3, r3, #2
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5f2:	88fb      	ldrh	r3, [r7, #6]
 800a5f4:	f003 0303 	and.w	r3, r3, #3
 800a5f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	623b      	str	r3, [r7, #32]
 800a5fe:	e014      	b.n	800a62a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	3301      	adds	r3, #1
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	3301      	adds	r3, #1
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	3301      	adds	r3, #1
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	3301      	adds	r3, #1
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	3301      	adds	r3, #1
 800a628:	623b      	str	r3, [r7, #32]
 800a62a:	6a3a      	ldr	r2, [r7, #32]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d3e6      	bcc.n	800a600 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a632:	8bfb      	ldrh	r3, [r7, #30]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01e      	beq.n	800a676 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a642:	461a      	mov	r2, r3
 800a644:	f107 0310 	add.w	r3, r7, #16
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	fa22 f303 	lsr.w	r3, r2, r3
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	701a      	strb	r2, [r3, #0]
      i++;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	3301      	adds	r3, #1
 800a662:	623b      	str	r3, [r7, #32]
      pDest++;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	3301      	adds	r3, #1
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a66a:	8bfb      	ldrh	r3, [r7, #30]
 800a66c:	3b01      	subs	r3, #1
 800a66e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a670:	8bfb      	ldrh	r3, [r7, #30]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1ea      	bne.n	800a64c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a678:	4618      	mov	r0, r3
 800a67a:	372c      	adds	r7, #44	; 0x2c
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d12c      	bne.n	800a6fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	db12      	blt.n	800a6d8 <USB_EPSetStall+0x54>
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00f      	beq.n	800a6d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	e02b      	b.n	800a752 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	db12      	blt.n	800a732 <USB_EPSetStall+0xae>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00f      	beq.n	800a732 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	440a      	add	r2, r1
 800a728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a72c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a730:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	0151      	lsls	r1, r2, #5
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	440a      	add	r2, r1
 800a748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a74c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d128      	bne.n	800a7ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	0151      	lsls	r1, r2, #5
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	440a      	add	r2, r1
 800a792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a79a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	791b      	ldrb	r3, [r3, #4]
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d003      	beq.n	800a7ac <USB_EPClearStall+0x4c>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	791b      	ldrb	r3, [r3, #4]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d138      	bne.n	800a81e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	0151      	lsls	r1, r2, #5
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	e027      	b.n	800a81e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	0151      	lsls	r1, r2, #5
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	440a      	add	r2, r1
 800a7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	791b      	ldrb	r3, [r3, #4]
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d003      	beq.n	800a7fe <USB_EPClearStall+0x9e>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	791b      	ldrb	r3, [r3, #4]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d10f      	bne.n	800a81e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a81c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a84a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a84e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a866:	4313      	orrs	r3, r2
 800a868:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8a6:	f023 0302 	bic.w	r3, r3, #2
 800a8aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b085      	sub	sp, #20
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8d4:	f023 0303 	bic.w	r3, r3, #3
 800a8d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8e8:	f043 0302 	orr.w	r3, r3, #2
 800a8ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4013      	ands	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a914:	68fb      	ldr	r3, [r7, #12]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	4013      	ands	r3, r2
 800a944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	0c1b      	lsrs	r3, r3, #16
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	4013      	ands	r3, r2
 800a978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	b29b      	uxth	r3, r3
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b085      	sub	sp, #20
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b087      	sub	sp, #28
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9ea:	78fb      	ldrb	r3, [r7, #3]
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f6:	01db      	lsls	r3, r3, #7
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	4013      	ands	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa14:	68bb      	ldr	r3, [r7, #8]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	371c      	adds	r7, #28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
	...

0800aa40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <USB_ActivateSetup+0x44>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	fffff800 	.word	0xfffff800

0800aa88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	460b      	mov	r3, r1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	333c      	adds	r3, #60	; 0x3c
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	4a26      	ldr	r2, [pc, #152]	; (800ab40 <USB_EP0_OutStart+0xb8>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d90a      	bls.n	800aac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aabc:	d101      	bne.n	800aac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e037      	b.n	800ab32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac8:	461a      	mov	r2, r3
 800aaca:	2300      	movs	r3, #0
 800aacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aadc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaf0:	f043 0318 	orr.w	r3, r3, #24
 800aaf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab0a:	7afb      	ldrb	r3, [r7, #11]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d10f      	bne.n	800ab30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab16:	461a      	mov	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ab2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	4f54300a 	.word	0x4f54300a

0800ab44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3301      	adds	r3, #1
 800ab54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <USB_CoreReset+0x64>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d901      	bls.n	800ab62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e01b      	b.n	800ab9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	daf2      	bge.n	800ab50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f043 0201 	orr.w	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4a09      	ldr	r2, [pc, #36]	; (800aba8 <USB_CoreReset+0x64>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d901      	bls.n	800ab8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e006      	b.n	800ab9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d0f0      	beq.n	800ab7a <USB_CoreReset+0x36>

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	00030d40 	.word	0x00030d40

0800abac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800abb0:	4904      	ldr	r1, [pc, #16]	; (800abc4 <MX_FATFS_Init+0x18>)
 800abb2:	4805      	ldr	r0, [pc, #20]	; (800abc8 <MX_FATFS_Init+0x1c>)
 800abb4:	f003 fd76 	bl	800e6a4 <FATFS_LinkDriver>
 800abb8:	4603      	mov	r3, r0
 800abba:	461a      	mov	r2, r3
 800abbc:	4b03      	ldr	r3, [pc, #12]	; (800abcc <MX_FATFS_Init+0x20>)
 800abbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2000097c 	.word	0x2000097c
 800abc8:	08011d3c 	.word	0x08011d3c
 800abcc:	20000978 	.word	0x20000978

0800abd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abda:	f000 f896 	bl	800ad0a <BSP_SD_IsDetected>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d001      	beq.n	800abe8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800abe4:	2302      	movs	r3, #2
 800abe6:	e012      	b.n	800ac0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abe8:	480b      	ldr	r0, [pc, #44]	; (800ac18 <BSP_SD_Init+0x48>)
 800abea:	f7fb fa1b 	bl	8006024 <HAL_SD_Init>
 800abee:	4603      	mov	r3, r0
 800abf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800abf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abfc:	4806      	ldr	r0, [pc, #24]	; (800ac18 <BSP_SD_Init+0x48>)
 800abfe:	f7fb ffe1 	bl	8006bc4 <HAL_SD_ConfigWideBusOperation>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20000630 	.word	0x20000630

0800ac1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	68f9      	ldr	r1, [r7, #12]
 800ac32:	4806      	ldr	r0, [pc, #24]	; (800ac4c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ac34:	f7fb faae 	bl	8006194 <HAL_SD_ReadBlocks_DMA>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000630 	.word	0x20000630

0800ac50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	68f9      	ldr	r1, [r7, #12]
 800ac66:	4806      	ldr	r0, [pc, #24]	; (800ac80 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ac68:	f7fb fb76 	bl	8006358 <HAL_SD_WriteBlocks_DMA>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20000630 	.word	0x20000630

0800ac84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <BSP_SD_GetCardState+0x1c>)
 800ac8a:	f7fc f835 	bl	8006cf8 <HAL_SD_GetCardState>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	bf14      	ite	ne
 800ac94:	2301      	movne	r3, #1
 800ac96:	2300      	moveq	r3, #0
 800ac98:	b2db      	uxtb	r3, r3
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000630 	.word	0x20000630

0800aca4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	4803      	ldr	r0, [pc, #12]	; (800acbc <BSP_SD_GetCardInfo+0x18>)
 800acb0:	f7fb ff5c 	bl	8006b6c <HAL_SD_GetCardInfo>
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20000630 	.word	0x20000630

0800acc0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800acc8:	f000 f818 	bl	800acfc <BSP_SD_AbortCallback>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800acdc:	f000 f9c4 	bl	800b068 <BSP_SD_WriteCpltCallback>
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800acf0:	f000 f9c8 	bl	800b084 <BSP_SD_ReadCpltCallback>
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0

}
 800ad00:	bf00      	nop
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad10:	2301      	movs	r3, #1
 800ad12:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad14:	f000 f80c 	bl	800ad30 <BSP_PlatformIsDetected>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	b2db      	uxtb	r3, r3
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad36:	2301      	movs	r3, #1
 800ad38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ad3e:	4806      	ldr	r0, [pc, #24]	; (800ad58 <BSP_PlatformIsDetected+0x28>)
 800ad40:	f7f7 fff8 	bl	8002d34 <HAL_GPIO_ReadPin>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	40020800 	.word	0x40020800

0800ad5c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ad64:	f003 fcea 	bl	800e73c <osKernelSysTick>
 800ad68:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ad6a:	e006      	b.n	800ad7a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad6c:	f7ff ff8a 	bl	800ac84 <BSP_SD_GetCardState>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e009      	b.n	800ad8e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ad7a:	f003 fcdf 	bl	800e73c <osKernelSysTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d8f0      	bhi.n	800ad6c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ada2:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <SD_CheckStatus+0x38>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ada8:	f7ff ff6c 	bl	800ac84 <BSP_SD_GetCardState>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d107      	bne.n	800adc2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800adb2:	4b07      	ldr	r3, [pc, #28]	; (800add0 <SD_CheckStatus+0x38>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f023 0301 	bic.w	r3, r3, #1
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	4b04      	ldr	r3, [pc, #16]	; (800add0 <SD_CheckStatus+0x38>)
 800adc0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800adc2:	4b03      	ldr	r3, [pc, #12]	; (800add0 <SD_CheckStatus+0x38>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	b2db      	uxtb	r3, r3
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20000009 	.word	0x20000009

0800add4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800adde:	4b20      	ldr	r3, [pc, #128]	; (800ae60 <SD_initialize+0x8c>)
 800ade0:	2201      	movs	r2, #1
 800ade2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ade4:	f003 fc9e 	bl	800e724 <osKernelRunning>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d030      	beq.n	800ae50 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800adee:	f7ff feef 	bl	800abd0 <BSP_SD_Init>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d107      	bne.n	800ae08 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff ffcc 	bl	800ad98 <SD_CheckStatus>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	4b16      	ldr	r3, [pc, #88]	; (800ae60 <SD_initialize+0x8c>)
 800ae06:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ae08:	4b15      	ldr	r3, [pc, #84]	; (800ae60 <SD_initialize+0x8c>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d01e      	beq.n	800ae50 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ae12:	4b14      	ldr	r3, [pc, #80]	; (800ae64 <SD_initialize+0x90>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10e      	bne.n	800ae38 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ae1a:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <SD_initialize+0x94>)
 800ae1c:	f107 0408 	add.w	r4, r7, #8
 800ae20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ae26:	f107 0308 	add.w	r3, r7, #8
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f003 fcf5 	bl	800e81c <osMessageCreate>
 800ae32:	4603      	mov	r3, r0
 800ae34:	4a0b      	ldr	r2, [pc, #44]	; (800ae64 <SD_initialize+0x90>)
 800ae36:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <SD_initialize+0x90>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d107      	bne.n	800ae50 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <SD_initialize+0x8c>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <SD_initialize+0x8c>)
 800ae4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ae50:	4b03      	ldr	r3, [pc, #12]	; (800ae60 <SD_initialize+0x8c>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	b2db      	uxtb	r3, r3
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd90      	pop	{r4, r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000009 	.word	0x20000009
 800ae64:	20000980 	.word	0x20000980
 800ae68:	08011cc0 	.word	0x08011cc0

0800ae6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff ff8d 	bl	800ad98 <SD_CheckStatus>
 800ae7e:	4603      	mov	r3, r0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae9e:	f247 5030 	movw	r0, #30000	; 0x7530
 800aea2:	f7ff ff5b 	bl	800ad5c <SD_CheckStatusWithTimeout>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da02      	bge.n	800aeb2 <SD_read+0x2a>
  {
    return res;
 800aeac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb0:	e032      	b.n	800af18 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	68b8      	ldr	r0, [r7, #8]
 800aeb8:	f7ff feb0 	bl	800ac1c <BSP_SD_ReadBlocks_DMA>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800aec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d124      	bne.n	800af14 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800aeca:	4b15      	ldr	r3, [pc, #84]	; (800af20 <SD_read+0x98>)
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	f107 0314 	add.w	r3, r7, #20
 800aed2:	f247 5230 	movw	r2, #30000	; 0x7530
 800aed6:	4618      	mov	r0, r3
 800aed8:	f003 fd08 	bl	800e8ec <osMessageGet>

    if (event.status == osEventMessage)
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2b10      	cmp	r3, #16
 800aee0:	d118      	bne.n	800af14 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d115      	bne.n	800af14 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800aee8:	f003 fc28 	bl	800e73c <osKernelSysTick>
 800aeec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800aeee:	e008      	b.n	800af02 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aef0:	f7ff fec8 	bl	800ac84 <BSP_SD_GetCardState>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d103      	bne.n	800af02 <SD_read+0x7a>
              {
                res = RES_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800af00:	e008      	b.n	800af14 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800af02:	f003 fc1b 	bl	800e73c <osKernelSysTick>
 800af06:	4602      	mov	r2, r0
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	f247 522f 	movw	r2, #29999	; 0x752f
 800af10:	4293      	cmp	r3, r2
 800af12:	d9ed      	bls.n	800aef0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800af14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3728      	adds	r7, #40	; 0x28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20000980 	.word	0x20000980

0800af24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	607a      	str	r2, [r7, #4]
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	4603      	mov	r3, r0
 800af32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af3a:	f247 5030 	movw	r0, #30000	; 0x7530
 800af3e:	f7ff ff0d 	bl	800ad5c <SD_CheckStatusWithTimeout>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	da02      	bge.n	800af4e <SD_write+0x2a>
  {
    return res;
 800af48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af4c:	e02e      	b.n	800afac <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	68b8      	ldr	r0, [r7, #8]
 800af54:	f7ff fe7c 	bl	800ac50 <BSP_SD_WriteBlocks_DMA>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d124      	bne.n	800afa8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800af5e:	4b15      	ldr	r3, [pc, #84]	; (800afb4 <SD_write+0x90>)
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	f107 0314 	add.w	r3, r7, #20
 800af66:	f247 5230 	movw	r2, #30000	; 0x7530
 800af6a:	4618      	mov	r0, r3
 800af6c:	f003 fcbe 	bl	800e8ec <osMessageGet>

    if (event.status == osEventMessage)
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b10      	cmp	r3, #16
 800af74:	d118      	bne.n	800afa8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d115      	bne.n	800afa8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800af7c:	f003 fbde 	bl	800e73c <osKernelSysTick>
 800af80:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800af82:	e008      	b.n	800af96 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af84:	f7ff fe7e 	bl	800ac84 <BSP_SD_GetCardState>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d103      	bne.n	800af96 <SD_write+0x72>
          {
            res = RES_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800af94:	e008      	b.n	800afa8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800af96:	f003 fbd1 	bl	800e73c <osKernelSysTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d9ed      	bls.n	800af84 <SD_write+0x60>
    }

  }
#endif

  return res;
 800afa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afac:	4618      	mov	r0, r3
 800afae:	3728      	adds	r7, #40	; 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000980 	.word	0x20000980

0800afb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08c      	sub	sp, #48	; 0x30
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	603a      	str	r2, [r7, #0]
 800afc2:	71fb      	strb	r3, [r7, #7]
 800afc4:	460b      	mov	r3, r1
 800afc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afce:	4b25      	ldr	r3, [pc, #148]	; (800b064 <SD_ioctl+0xac>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <SD_ioctl+0x28>
 800afdc:	2303      	movs	r3, #3
 800afde:	e03c      	b.n	800b05a <SD_ioctl+0xa2>

  switch (cmd)
 800afe0:	79bb      	ldrb	r3, [r7, #6]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d834      	bhi.n	800b050 <SD_ioctl+0x98>
 800afe6:	a201      	add	r2, pc, #4	; (adr r2, 800afec <SD_ioctl+0x34>)
 800afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afec:	0800affd 	.word	0x0800affd
 800aff0:	0800b005 	.word	0x0800b005
 800aff4:	0800b01d 	.word	0x0800b01d
 800aff8:	0800b037 	.word	0x0800b037
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b002:	e028      	b.n	800b056 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b004:	f107 030c 	add.w	r3, r7, #12
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fe4b 	bl	800aca4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b01a:	e01c      	b.n	800b056 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b01c:	f107 030c 	add.w	r3, r7, #12
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fe3f 	bl	800aca4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	b29a      	uxth	r2, r3
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b034:	e00f      	b.n	800b056 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fe32 	bl	800aca4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	0a5a      	lsrs	r2, r3, #9
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b04e:	e002      	b.n	800b056 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b050:	2304      	movs	r3, #4
 800b052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3730      	adds	r7, #48	; 0x30
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20000009 	.word	0x20000009

0800b068 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <BSP_SD_WriteCpltCallback+0x18>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2200      	movs	r2, #0
 800b072:	2102      	movs	r1, #2
 800b074:	4618      	mov	r0, r3
 800b076:	f003 fbf9 	bl	800e86c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b07a:	bf00      	nop
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000980 	.word	0x20000980

0800b084 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <BSP_SD_ReadCpltCallback+0x18>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2101      	movs	r1, #1
 800b090:	4618      	mov	r0, r3
 800b092:	f003 fbeb 	bl	800e86c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000980 	.word	0x20000980

0800b0a0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b0ac:	f44f 701d 	mov.w	r0, #628	; 0x274
 800b0b0:	f006 fc5a 	bl	8011968 <malloc>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <USBD_MSC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	32b0      	adds	r2, #176	; 0xb0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e06e      	b.n	800b1b0 <USBD_MSC_Init+0x110>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	32b0      	adds	r2, #176	; 0xb0
 800b0dc:	68f9      	ldr	r1, [r7, #12]
 800b0de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	32b0      	adds	r2, #176	; 0xb0
 800b0ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7c1b      	ldrb	r3, [r3, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d12b      	bne.n	800b156 <USBD_MSC_Init+0xb6>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b0fe:	4b2e      	ldr	r3, [pc, #184]	; (800b1b8 <USBD_MSC_Init+0x118>)
 800b100:	7819      	ldrb	r1, [r3, #0]
 800b102:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b106:	2202      	movs	r2, #2
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f006 fa3e 	bl	801158a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b10e:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <USBD_MSC_Init+0x118>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	f003 020f 	and.w	r2, r3, #15
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b126:	2201      	movs	r2, #1
 800b128:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <USBD_MSC_Init+0x11c>)
 800b12c:	7819      	ldrb	r1, [r3, #0]
 800b12e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b132:	2202      	movs	r2, #2
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f006 fa28 	bl	801158a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b13a:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <USBD_MSC_Init+0x11c>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	f003 020f 	and.w	r2, r3, #15
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3324      	adds	r3, #36	; 0x24
 800b150:	2201      	movs	r2, #1
 800b152:	801a      	strh	r2, [r3, #0]
 800b154:	e028      	b.n	800b1a8 <USBD_MSC_Init+0x108>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b156:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <USBD_MSC_Init+0x118>)
 800b158:	7819      	ldrb	r1, [r3, #0]
 800b15a:	2340      	movs	r3, #64	; 0x40
 800b15c:	2202      	movs	r2, #2
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f006 fa13 	bl	801158a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b164:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <USBD_MSC_Init+0x118>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 020f 	and.w	r2, r3, #15
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b17c:	2201      	movs	r2, #1
 800b17e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b180:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <USBD_MSC_Init+0x11c>)
 800b182:	7819      	ldrb	r1, [r3, #0]
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	2202      	movs	r2, #2
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f006 f9fe 	bl	801158a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b18e:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <USBD_MSC_Init+0x11c>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 020f 	and.w	r2, r3, #15
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	3324      	adds	r3, #36	; 0x24
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fa2b 	bl	800b604 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	2000006f 	.word	0x2000006f
 800b1bc:	2000006e 	.word	0x2000006e

0800b1c0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800b1cc:	4b26      	ldr	r3, [pc, #152]	; (800b268 <USBD_MSC_DeInit+0xa8>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f006 f9ff 	bl	80115d6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800b1d8:	4b23      	ldr	r3, [pc, #140]	; (800b268 <USBD_MSC_DeInit+0xa8>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 020f 	and.w	r2, r3, #15
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	440b      	add	r3, r1
 800b1ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800b1f4:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <USBD_MSC_DeInit+0xac>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f006 f9eb 	bl	80115d6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <USBD_MSC_DeInit+0xac>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 020f 	and.w	r2, r3, #15
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	3324      	adds	r3, #36	; 0x24
 800b216:	2200      	movs	r2, #0
 800b218:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	32b0      	adds	r2, #176	; 0xb0
 800b224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d018      	beq.n	800b25e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fa67 	bl	800b700 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	32b0      	adds	r2, #176	; 0xb0
 800b23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b240:	4618      	mov	r0, r3
 800b242:	f006 fb99 	bl	8011978 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32b0      	adds	r2, #176	; 0xb0
 800b250:	2100      	movs	r1, #0
 800b252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	2000006f 	.word	0x2000006f
 800b26c:	2000006e 	.word	0x2000006e

0800b270 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	32b0      	adds	r2, #176	; 0xb0
 800b284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b288:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	e0e1      	b.n	800b460 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d053      	beq.n	800b350 <USBD_MSC_Setup+0xe0>
 800b2a8:	2b20      	cmp	r3, #32
 800b2aa:	f040 80d1 	bne.w	800b450 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	785b      	ldrb	r3, [r3, #1]
 800b2b2:	2bfe      	cmp	r3, #254	; 0xfe
 800b2b4:	d002      	beq.n	800b2bc <USBD_MSC_Setup+0x4c>
 800b2b6:	2bff      	cmp	r3, #255	; 0xff
 800b2b8:	d02a      	beq.n	800b310 <USBD_MSC_Setup+0xa0>
 800b2ba:	e041      	b.n	800b340 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	885b      	ldrh	r3, [r3, #2]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d11e      	bne.n	800b302 <USBD_MSC_Setup+0x92>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	88db      	ldrh	r3, [r3, #6]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d11a      	bne.n	800b302 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da15      	bge.n	800b302 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	33b0      	adds	r3, #176	; 0xb0
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	4798      	blx	r3
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f003 f923 	bl	800e544 <USBD_CtlSendData>
 800b2fe:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b300:	e025      	b.n	800b34e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f003 f8ac 	bl	800e462 <USBD_CtlError>
            ret = USBD_FAIL;
 800b30a:	2303      	movs	r3, #3
 800b30c:	75fb      	strb	r3, [r7, #23]
          break;
 800b30e:	e01e      	b.n	800b34e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	885b      	ldrh	r3, [r3, #2]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10c      	bne.n	800b332 <USBD_MSC_Setup+0xc2>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	88db      	ldrh	r3, [r3, #6]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d108      	bne.n	800b332 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b326:	2b00      	cmp	r3, #0
 800b328:	db03      	blt.n	800b332 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f9b4 	bl	800b698 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b330:	e00d      	b.n	800b34e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f003 f894 	bl	800e462 <USBD_CtlError>
            ret = USBD_FAIL;
 800b33a:	2303      	movs	r3, #3
 800b33c:	75fb      	strb	r3, [r7, #23]
          break;
 800b33e:	e006      	b.n	800b34e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f003 f88d 	bl	800e462 <USBD_CtlError>
          ret = USBD_FAIL;
 800b348:	2303      	movs	r3, #3
 800b34a:	75fb      	strb	r3, [r7, #23]
          break;
 800b34c:	bf00      	nop
      }
      break;
 800b34e:	e086      	b.n	800b45e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	785b      	ldrb	r3, [r3, #1]
 800b354:	2b0b      	cmp	r3, #11
 800b356:	d872      	bhi.n	800b43e <USBD_MSC_Setup+0x1ce>
 800b358:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <USBD_MSC_Setup+0xf0>)
 800b35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35e:	bf00      	nop
 800b360:	0800b391 	.word	0x0800b391
 800b364:	0800b40d 	.word	0x0800b40d
 800b368:	0800b43f 	.word	0x0800b43f
 800b36c:	0800b43f 	.word	0x0800b43f
 800b370:	0800b43f 	.word	0x0800b43f
 800b374:	0800b43f 	.word	0x0800b43f
 800b378:	0800b43f 	.word	0x0800b43f
 800b37c:	0800b43f 	.word	0x0800b43f
 800b380:	0800b43f 	.word	0x0800b43f
 800b384:	0800b43f 	.word	0x0800b43f
 800b388:	0800b3bb 	.word	0x0800b3bb
 800b38c:	0800b3e5 	.word	0x0800b3e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d107      	bne.n	800b3ac <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b39c:	f107 030e 	add.w	r3, r7, #14
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f003 f8cd 	bl	800e544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3aa:	e050      	b.n	800b44e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f003 f857 	bl	800e462 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b3b8:	e049      	b.n	800b44e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d107      	bne.n	800b3d6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f003 f8b8 	bl	800e544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3d4:	e03b      	b.n	800b44e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f003 f842 	bl	800e462 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3e2:	e034      	b.n	800b44e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d106      	bne.n	800b3fe <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	885b      	ldrh	r3, [r3, #2]
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3fc:	e027      	b.n	800b44e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f003 f82e 	bl	800e462 <USBD_CtlError>
            ret = USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	75fb      	strb	r3, [r7, #23]
          break;
 800b40a:	e020      	b.n	800b44e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d119      	bne.n	800b44c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	885b      	ldrh	r3, [r3, #2]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d115      	bne.n	800b44c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	889b      	ldrh	r3, [r3, #4]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f006 f8f3 	bl	8011614 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	889b      	ldrh	r3, [r3, #4]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fb2e 	bl	800ba98 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b43c:	e006      	b.n	800b44c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f003 f80e 	bl	800e462 <USBD_CtlError>
          ret = USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
          break;
 800b44a:	e000      	b.n	800b44e <USBD_MSC_Setup+0x1de>
          break;
 800b44c:	bf00      	nop
      }
      break;
 800b44e:	e006      	b.n	800b45e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f003 f805 	bl	800e462 <USBD_CtlError>
      ret = USBD_FAIL;
 800b458:	2303      	movs	r3, #3
 800b45a:	75fb      	strb	r3, [r7, #23]
      break;
 800b45c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f959 	bl	800b730 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f983 	bl	800b7a4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b4b0:	2181      	movs	r1, #129	; 0x81
 800b4b2:	4812      	ldr	r0, [pc, #72]	; (800b4fc <USBD_MSC_GetHSCfgDesc+0x54>)
 800b4b4:	f002 f972 	bl	800d79c <USBD_GetEpDesc>
 800b4b8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	480f      	ldr	r0, [pc, #60]	; (800b4fc <USBD_MSC_GetHSCfgDesc+0x54>)
 800b4be:	f002 f96d 	bl	800d79c <USBD_GetEpDesc>
 800b4c2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d006      	beq.n	800b4d8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	711a      	strb	r2, [r3, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f042 0202 	orr.w	r2, r2, #2
 800b4d6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	711a      	strb	r2, [r3, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f042 0202 	orr.w	r2, r2, #2
 800b4ea:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b4f2:	4b02      	ldr	r3, [pc, #8]	; (800b4fc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20000044 	.word	0x20000044

0800b500 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b508:	2181      	movs	r1, #129	; 0x81
 800b50a:	4812      	ldr	r0, [pc, #72]	; (800b554 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b50c:	f002 f946 	bl	800d79c <USBD_GetEpDesc>
 800b510:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b512:	2101      	movs	r1, #1
 800b514:	480f      	ldr	r0, [pc, #60]	; (800b554 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b516:	f002 f941 	bl	800d79c <USBD_GetEpDesc>
 800b51a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d006      	beq.n	800b530 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b52a:	711a      	strb	r2, [r3, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d006      	beq.n	800b544 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2200      	movs	r2, #0
 800b53a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b53e:	711a      	strb	r2, [r3, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2220      	movs	r2, #32
 800b548:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b54a:	4b02      	ldr	r3, [pc, #8]	; (800b554 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	20000044 	.word	0x20000044

0800b558 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b560:	2181      	movs	r1, #129	; 0x81
 800b562:	4812      	ldr	r0, [pc, #72]	; (800b5ac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b564:	f002 f91a 	bl	800d79c <USBD_GetEpDesc>
 800b568:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b56a:	2101      	movs	r1, #1
 800b56c:	480f      	ldr	r0, [pc, #60]	; (800b5ac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b56e:	f002 f915 	bl	800d79c <USBD_GetEpDesc>
 800b572:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b582:	711a      	strb	r2, [r3, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2200      	movs	r2, #0
 800b592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b596:	711a      	strb	r2, [r3, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2220      	movs	r2, #32
 800b5a0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b5a2:	4b02      	ldr	r3, [pc, #8]	; (800b5ac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	20000044 	.word	0x20000044

0800b5b0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	220a      	movs	r2, #10
 800b5bc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b5be:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	20000064 	.word	0x20000064

0800b5d0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e009      	b.n	800b5f8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	33b0      	adds	r3, #176	; 0xb0
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	32b0      	adds	r2, #176	; 0xb0
 800b616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d032      	beq.n	800b688 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	33b0      	adds	r3, #176	; 0xb0
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2000      	movs	r0, #0
 800b65a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800b65c:	4b0c      	ldr	r3, [pc, #48]	; (800b690 <MSC_BOT_Init+0x8c>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f005 ffd6 	bl	8011614 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <MSC_BOT_Init+0x90>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f005 ffd0 	bl	8011614 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b674:	4b06      	ldr	r3, [pc, #24]	; (800b690 <MSC_BOT_Init+0x8c>)
 800b676:	7819      	ldrb	r1, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b67e:	231f      	movs	r3, #31
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f006 f890 	bl	80117a6 <USBD_LL_PrepareReceive>
 800b686:	e000      	b.n	800b68a <MSC_BOT_Init+0x86>
    return;
 800b688:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	2000006f 	.word	0x2000006f
 800b694:	2000006e 	.word	0x2000006e

0800b698 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	32b0      	adds	r2, #176	; 0xb0
 800b6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d01b      	beq.n	800b6ee <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800b6c2:	4b0d      	ldr	r3, [pc, #52]	; (800b6f8 <MSC_BOT_Reset+0x60>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f005 ffe1 	bl	8011690 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <MSC_BOT_Reset+0x64>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f005 ffdb 	bl	8011690 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b6da:	4b08      	ldr	r3, [pc, #32]	; (800b6fc <MSC_BOT_Reset+0x64>)
 800b6dc:	7819      	ldrb	r1, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b6e4:	231f      	movs	r3, #31
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f006 f85d 	bl	80117a6 <USBD_LL_PrepareReceive>
 800b6ec:	e000      	b.n	800b6f0 <MSC_BOT_Reset+0x58>
    return;
 800b6ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	2000006e 	.word	0x2000006e
 800b6fc:	2000006f 	.word	0x2000006f

0800b700 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	32b0      	adds	r2, #176	; 0xb0
 800b712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b716:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	721a      	strb	r2, [r3, #8]
  }
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	32b0      	adds	r2, #176	; 0xb0
 800b746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d020      	beq.n	800b794 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	7a1b      	ldrb	r3, [r3, #8]
 800b756:	2b02      	cmp	r3, #2
 800b758:	d005      	beq.n	800b766 <MSC_BOT_DataIn+0x36>
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	db1c      	blt.n	800b798 <MSC_BOT_DataIn+0x68>
 800b75e:	3b03      	subs	r3, #3
 800b760:	2b01      	cmp	r3, #1
 800b762:	d819      	bhi.n	800b798 <MSC_BOT_DataIn+0x68>
 800b764:	e011      	b.n	800b78a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b772:	461a      	mov	r2, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f9c9 	bl	800bb0c <SCSI_ProcessCmd>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da0d      	bge.n	800b79c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b780:	2101      	movs	r1, #1
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f90c 	bl	800b9a0 <MSC_BOT_SendCSW>
      }
      break;
 800b788:	e008      	b.n	800b79c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b78a:	2100      	movs	r1, #0
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f907 	bl	800b9a0 <MSC_BOT_SendCSW>
      break;
 800b792:	e004      	b.n	800b79e <MSC_BOT_DataIn+0x6e>
    return;
 800b794:	bf00      	nop
 800b796:	e002      	b.n	800b79e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800b798:	bf00      	nop
 800b79a:	e000      	b.n	800b79e <MSC_BOT_DataIn+0x6e>
      break;
 800b79c:	bf00      	nop
  }
}
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	32b0      	adds	r2, #176	; 0xb0
 800b7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7be:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01c      	beq.n	800b800 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	7a1b      	ldrb	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <MSC_BOT_DataOut+0x30>
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d004      	beq.n	800b7dc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b7d2:	e018      	b.n	800b806 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f819 	bl	800b80c <MSC_BOT_CBW_Decode>
      break;
 800b7da:	e014      	b.n	800b806 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f98e 	bl	800bb0c <SCSI_ProcessCmd>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da06      	bge.n	800b804 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f8d1 	bl	800b9a0 <MSC_BOT_SendCSW>
      break;
 800b7fe:	e001      	b.n	800b804 <MSC_BOT_DataOut+0x60>
    return;
 800b800:	bf00      	nop
 800b802:	e000      	b.n	800b806 <MSC_BOT_DataOut+0x62>
      break;
 800b804:	bf00      	nop
  }
}
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	32b0      	adds	r2, #176	; 0xb0
 800b81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b822:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d079      	beq.n	800b91e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b842:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <MSC_BOT_CBW_Decode+0x120>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f005 ffcd 	bl	80117e8 <USBD_LL_GetRxDataSize>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b1f      	cmp	r3, #31
 800b852:	d114      	bne.n	800b87e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b85a:	4a35      	ldr	r2, [pc, #212]	; (800b930 <MSC_BOT_CBW_Decode+0x124>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d10e      	bne.n	800b87e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b866:	2b01      	cmp	r3, #1
 800b868:	d809      	bhi.n	800b87e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b870:	2b00      	cmp	r3, #0
 800b872:	d004      	beq.n	800b87e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b87a:	2b10      	cmp	r3, #16
 800b87c:	d90e      	bls.n	800b89c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b884:	2320      	movs	r3, #32
 800b886:	2205      	movs	r2, #5
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fe28 	bl	800c4de <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2202      	movs	r2, #2
 800b892:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f8bd 	bl	800ba14 <MSC_BOT_Abort>
 800b89a:	e043      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f92e 	bl	800bb0c <SCSI_ProcessCmd>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da0c      	bge.n	800b8d0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7a1b      	ldrb	r3, [r3, #8]
 800b8ba:	2b05      	cmp	r3, #5
 800b8bc:	d104      	bne.n	800b8c8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b8be:	2101      	movs	r1, #1
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f86d 	bl	800b9a0 <MSC_BOT_SendCSW>
 800b8c6:	e02d      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8a3 	bl	800ba14 <MSC_BOT_Abort>
 800b8ce:	e029      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	7a1b      	ldrb	r3, [r3, #8]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d024      	beq.n	800b922 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d020      	beq.n	800b922 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d01c      	beq.n	800b922 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f103 0110 	add.w	r1, r3, #16
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f819 	bl	800b934 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b902:	e00f      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d104      	bne.n	800b916 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b90c:	2100      	movs	r1, #0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f846 	bl	800b9a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b914:	e006      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f87c 	bl	800ba14 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b91c:	e002      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
    return;
 800b91e:	bf00      	nop
 800b920:	e000      	b.n	800b924 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800b922:	bf00      	nop
    }
  }
}
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	2000006f 	.word	0x2000006f
 800b930:	43425355 	.word	0x43425355

0800b934 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	32b0      	adds	r2, #176	; 0xb0
 800b94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01e      	beq.n	800b994 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	4293      	cmp	r3, r2
 800b960:	bf28      	it	cs
 800b962:	4613      	movcs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2204      	movs	r2, #4
 800b982:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b984:	4b05      	ldr	r3, [pc, #20]	; (800b99c <MSC_BOT_SendData+0x68>)
 800b986:	7819      	ldrb	r1, [r3, #0]
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f005 fee9 	bl	8011764 <USBD_LL_Transmit>
 800b992:	e000      	b.n	800b996 <MSC_BOT_SendData+0x62>
    return;
 800b994:	bf00      	nop
}
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	2000006e 	.word	0x2000006e

0800b9a0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	32b0      	adds	r2, #176	; 0xb0
 800b9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d01d      	beq.n	800b9fe <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4a10      	ldr	r2, [pc, #64]	; (800ba08 <MSC_BOT_SendCSW+0x68>)
 800b9c6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	78fa      	ldrb	r2, [r7, #3]
 800b9ce:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <MSC_BOT_SendCSW+0x6c>)
 800b9da:	7819      	ldrb	r1, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800b9e2:	230d      	movs	r3, #13
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f005 febd 	bl	8011764 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <MSC_BOT_SendCSW+0x70>)
 800b9ec:	7819      	ldrb	r1, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b9f4:	231f      	movs	r3, #31
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f005 fed5 	bl	80117a6 <USBD_LL_PrepareReceive>
 800b9fc:	e000      	b.n	800ba00 <MSC_BOT_SendCSW+0x60>
    return;
 800b9fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	53425355 	.word	0x53425355
 800ba0c:	2000006e 	.word	0x2000006e
 800ba10:	2000006f 	.word	0x2000006f

0800ba14 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32b0      	adds	r2, #176	; 0xb0
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d02a      	beq.n	800ba88 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10e      	bne.n	800ba5a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d009      	beq.n	800ba5a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d105      	bne.n	800ba5a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ba4e:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <MSC_BOT_Abort+0x7c>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f005 fdfc 	bl	8011652 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <MSC_BOT_Abort+0x80>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f005 fdf6 	bl	8011652 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	7a5b      	ldrb	r3, [r3, #9]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d10d      	bne.n	800ba8a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800ba6e:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <MSC_BOT_Abort+0x80>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f005 fdec 	bl	8011652 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ba7a:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <MSC_BOT_Abort+0x7c>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f005 fde6 	bl	8011652 <USBD_LL_StallEP>
 800ba86:	e000      	b.n	800ba8a <MSC_BOT_Abort+0x76>
    return;
 800ba88:	bf00      	nop
  }
}
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000006f 	.word	0x2000006f
 800ba94:	2000006e 	.word	0x2000006e

0800ba98 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	32b0      	adds	r2, #176	; 0xb0
 800baae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d01d      	beq.n	800baf6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	7a5b      	ldrb	r3, [r3, #9]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d10c      	bne.n	800badc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800bac2:	4b10      	ldr	r3, [pc, #64]	; (800bb04 <MSC_BOT_CplClrFeature+0x6c>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f005 fdc2 	bl	8011652 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800bace:	4b0e      	ldr	r3, [pc, #56]	; (800bb08 <MSC_BOT_CplClrFeature+0x70>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f005 fdbc 	bl	8011652 <USBD_LL_StallEP>
 800bada:	e00f      	b.n	800bafc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800badc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da0a      	bge.n	800bafa <MSC_BOT_CplClrFeature+0x62>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	7a5b      	ldrb	r3, [r3, #9]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d006      	beq.n	800bafa <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800baec:	2101      	movs	r1, #1
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff ff56 	bl	800b9a0 <MSC_BOT_SendCSW>
 800baf4:	e002      	b.n	800bafc <MSC_BOT_CplClrFeature+0x64>
    return;
 800baf6:	bf00      	nop
 800baf8:	e000      	b.n	800bafc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800bafa:	bf00      	nop
  }
}
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	2000006e 	.word	0x2000006e
 800bb08:	2000006f 	.word	0x2000006f

0800bb0c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	460b      	mov	r3, r1
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	32b0      	adds	r2, #176	; 0xb0
 800bb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb28:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295
 800bb34:	e168      	b.n	800be08 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	2baa      	cmp	r3, #170	; 0xaa
 800bb3c:	f000 8144 	beq.w	800bdc8 <SCSI_ProcessCmd+0x2bc>
 800bb40:	2baa      	cmp	r3, #170	; 0xaa
 800bb42:	f300 8153 	bgt.w	800bdec <SCSI_ProcessCmd+0x2e0>
 800bb46:	2ba8      	cmp	r3, #168	; 0xa8
 800bb48:	f000 812c 	beq.w	800bda4 <SCSI_ProcessCmd+0x298>
 800bb4c:	2ba8      	cmp	r3, #168	; 0xa8
 800bb4e:	f300 814d 	bgt.w	800bdec <SCSI_ProcessCmd+0x2e0>
 800bb52:	2b5a      	cmp	r3, #90	; 0x5a
 800bb54:	f300 80c0 	bgt.w	800bcd8 <SCSI_ProcessCmd+0x1cc>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f2c0 8147 	blt.w	800bdec <SCSI_ProcessCmd+0x2e0>
 800bb5e:	2b5a      	cmp	r3, #90	; 0x5a
 800bb60:	f200 8144 	bhi.w	800bdec <SCSI_ProcessCmd+0x2e0>
 800bb64:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <SCSI_ProcessCmd+0x60>)
 800bb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6a:	bf00      	nop
 800bb6c:	0800bcdf 	.word	0x0800bcdf
 800bb70:	0800bded 	.word	0x0800bded
 800bb74:	0800bded 	.word	0x0800bded
 800bb78:	0800bcf1 	.word	0x0800bcf1
 800bb7c:	0800bded 	.word	0x0800bded
 800bb80:	0800bded 	.word	0x0800bded
 800bb84:	0800bded 	.word	0x0800bded
 800bb88:	0800bded 	.word	0x0800bded
 800bb8c:	0800bded 	.word	0x0800bded
 800bb90:	0800bded 	.word	0x0800bded
 800bb94:	0800bded 	.word	0x0800bded
 800bb98:	0800bded 	.word	0x0800bded
 800bb9c:	0800bded 	.word	0x0800bded
 800bba0:	0800bded 	.word	0x0800bded
 800bba4:	0800bded 	.word	0x0800bded
 800bba8:	0800bded 	.word	0x0800bded
 800bbac:	0800bded 	.word	0x0800bded
 800bbb0:	0800bded 	.word	0x0800bded
 800bbb4:	0800bd03 	.word	0x0800bd03
 800bbb8:	0800bded 	.word	0x0800bded
 800bbbc:	0800bded 	.word	0x0800bded
 800bbc0:	0800bded 	.word	0x0800bded
 800bbc4:	0800bded 	.word	0x0800bded
 800bbc8:	0800bded 	.word	0x0800bded
 800bbcc:	0800bded 	.word	0x0800bded
 800bbd0:	0800bded 	.word	0x0800bded
 800bbd4:	0800bd39 	.word	0x0800bd39
 800bbd8:	0800bd15 	.word	0x0800bd15
 800bbdc:	0800bded 	.word	0x0800bded
 800bbe0:	0800bded 	.word	0x0800bded
 800bbe4:	0800bd27 	.word	0x0800bd27
 800bbe8:	0800bded 	.word	0x0800bded
 800bbec:	0800bded 	.word	0x0800bded
 800bbf0:	0800bded 	.word	0x0800bded
 800bbf4:	0800bded 	.word	0x0800bded
 800bbf8:	0800bd5d 	.word	0x0800bd5d
 800bbfc:	0800bded 	.word	0x0800bded
 800bc00:	0800bd6f 	.word	0x0800bd6f
 800bc04:	0800bded 	.word	0x0800bded
 800bc08:	0800bded 	.word	0x0800bded
 800bc0c:	0800bd93 	.word	0x0800bd93
 800bc10:	0800bded 	.word	0x0800bded
 800bc14:	0800bdb7 	.word	0x0800bdb7
 800bc18:	0800bded 	.word	0x0800bded
 800bc1c:	0800bded 	.word	0x0800bded
 800bc20:	0800bded 	.word	0x0800bded
 800bc24:	0800bded 	.word	0x0800bded
 800bc28:	0800bddb 	.word	0x0800bddb
 800bc2c:	0800bded 	.word	0x0800bded
 800bc30:	0800bded 	.word	0x0800bded
 800bc34:	0800bded 	.word	0x0800bded
 800bc38:	0800bded 	.word	0x0800bded
 800bc3c:	0800bded 	.word	0x0800bded
 800bc40:	0800bded 	.word	0x0800bded
 800bc44:	0800bded 	.word	0x0800bded
 800bc48:	0800bded 	.word	0x0800bded
 800bc4c:	0800bded 	.word	0x0800bded
 800bc50:	0800bded 	.word	0x0800bded
 800bc54:	0800bded 	.word	0x0800bded
 800bc58:	0800bded 	.word	0x0800bded
 800bc5c:	0800bded 	.word	0x0800bded
 800bc60:	0800bded 	.word	0x0800bded
 800bc64:	0800bded 	.word	0x0800bded
 800bc68:	0800bded 	.word	0x0800bded
 800bc6c:	0800bded 	.word	0x0800bded
 800bc70:	0800bded 	.word	0x0800bded
 800bc74:	0800bded 	.word	0x0800bded
 800bc78:	0800bded 	.word	0x0800bded
 800bc7c:	0800bded 	.word	0x0800bded
 800bc80:	0800bded 	.word	0x0800bded
 800bc84:	0800bded 	.word	0x0800bded
 800bc88:	0800bded 	.word	0x0800bded
 800bc8c:	0800bded 	.word	0x0800bded
 800bc90:	0800bded 	.word	0x0800bded
 800bc94:	0800bded 	.word	0x0800bded
 800bc98:	0800bded 	.word	0x0800bded
 800bc9c:	0800bded 	.word	0x0800bded
 800bca0:	0800bded 	.word	0x0800bded
 800bca4:	0800bded 	.word	0x0800bded
 800bca8:	0800bded 	.word	0x0800bded
 800bcac:	0800bded 	.word	0x0800bded
 800bcb0:	0800bded 	.word	0x0800bded
 800bcb4:	0800bded 	.word	0x0800bded
 800bcb8:	0800bded 	.word	0x0800bded
 800bcbc:	0800bded 	.word	0x0800bded
 800bcc0:	0800bded 	.word	0x0800bded
 800bcc4:	0800bded 	.word	0x0800bded
 800bcc8:	0800bded 	.word	0x0800bded
 800bccc:	0800bded 	.word	0x0800bded
 800bcd0:	0800bded 	.word	0x0800bded
 800bcd4:	0800bd4b 	.word	0x0800bd4b
 800bcd8:	2b9e      	cmp	r3, #158	; 0x9e
 800bcda:	d051      	beq.n	800bd80 <SCSI_ProcessCmd+0x274>
 800bcdc:	e086      	b.n	800bdec <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4619      	mov	r1, r3
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f000 f893 	bl	800be10 <SCSI_TestUnitReady>
 800bcea:	4603      	mov	r3, r0
 800bcec:	75fb      	strb	r3, [r7, #23]
      break;
 800bcee:	e089      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800bcf0:	7afb      	ldrb	r3, [r7, #11]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fb6e 	bl	800c3d8 <SCSI_RequestSense>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75fb      	strb	r3, [r7, #23]
      break;
 800bd00:	e080      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	4619      	mov	r1, r3
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f8db 	bl	800bec4 <SCSI_Inquiry>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	75fb      	strb	r3, [r7, #23]
      break;
 800bd12:	e077      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 fc2a 	bl	800c574 <SCSI_StartStopUnit>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75fb      	strb	r3, [r7, #23]
      break;
 800bd24:	e06e      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 fc76 	bl	800c61e <SCSI_AllowPreventRemovable>
 800bd32:	4603      	mov	r3, r0
 800bd34:	75fb      	strb	r3, [r7, #23]
      break;
 800bd36:	e065      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 faea 	bl	800c318 <SCSI_ModeSense6>
 800bd44:	4603      	mov	r3, r0
 800bd46:	75fb      	strb	r3, [r7, #23]
      break;
 800bd48:	e05c      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800bd4a:	7afb      	ldrb	r3, [r7, #11]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 fb11 	bl	800c378 <SCSI_ModeSense10>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
      break;
 800bd5a:	e053      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4619      	mov	r1, r3
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 fa5d 	bl	800c222 <SCSI_ReadFormatCapacity>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bd6c:	e04a      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4619      	mov	r1, r3
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 f923 	bl	800bfc0 <SCSI_ReadCapacity10>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd7e:	e041      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4619      	mov	r1, r3
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 f998 	bl	800c0bc <SCSI_ReadCapacity16>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd90:	e038      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 fc6d 	bl	800c678 <SCSI_Read10>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	75fb      	strb	r3, [r7, #23]
      break;
 800bda2:	e02f      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fd0e 	bl	800c7cc <SCSI_Read12>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdb4:	e026      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800bdb6:	7afb      	ldrb	r3, [r7, #11]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 fdb9 	bl	800c934 <SCSI_Write10>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bdc6:	e01d      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800bdc8:	7afb      	ldrb	r3, [r7, #11]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fe86 	bl	800cae0 <SCSI_Write12>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd8:	e014      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800bdda:	7afb      	ldrb	r3, [r7, #11]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	4619      	mov	r1, r3
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 ff63 	bl	800ccac <SCSI_Verify10>
 800bde6:	4603      	mov	r3, r0
 800bde8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdea:	e00b      	b.n	800be04 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800bdec:	7af9      	ldrb	r1, [r7, #11]
 800bdee:	2320      	movs	r3, #32
 800bdf0:	2205      	movs	r2, #5
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 fb73 	bl	800c4de <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bdfe:	23ff      	movs	r3, #255	; 0xff
 800be00:	75fb      	strb	r3, [r7, #23]
      break;
 800be02:	bf00      	nop
  }

  return ret;
 800be04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	460b      	mov	r3, r1
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	32b0      	adds	r2, #176	; 0xb0
 800be28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800be34:	f04f 33ff 	mov.w	r3, #4294967295
 800be38:	e03f      	b.n	800beba <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00a      	beq.n	800be5a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800be4a:	2320      	movs	r3, #32
 800be4c:	2205      	movs	r2, #5
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 fb45 	bl	800c4de <SCSI_SenseCode>

    return -1;
 800be54:	f04f 33ff 	mov.w	r3, #4294967295
 800be58:	e02f      	b.n	800beba <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800be60:	2b02      	cmp	r3, #2
 800be62:	d10b      	bne.n	800be7c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800be64:	7af9      	ldrb	r1, [r7, #11]
 800be66:	233a      	movs	r3, #58	; 0x3a
 800be68:	2202      	movs	r2, #2
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f000 fb37 	bl	800c4de <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2205      	movs	r2, #5
 800be74:	721a      	strb	r2, [r3, #8]
    return -1;
 800be76:	f04f 33ff 	mov.w	r3, #4294967295
 800be7a:	e01e      	b.n	800beba <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	33b0      	adds	r3, #176	; 0xb0
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	7afa      	ldrb	r2, [r7, #11]
 800be90:	4610      	mov	r0, r2
 800be92:	4798      	blx	r3
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00b      	beq.n	800beb2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800be9a:	7af9      	ldrb	r1, [r7, #11]
 800be9c:	233a      	movs	r3, #58	; 0x3a
 800be9e:	2202      	movs	r2, #2
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 fb1c 	bl	800c4de <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2205      	movs	r2, #5
 800beaa:	721a      	strb	r2, [r3, #8]

    return -1;
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	e003      	b.n	800beba <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2200      	movs	r2, #0
 800beb6:	60da      	str	r2, [r3, #12]

  return 0;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	460b      	mov	r3, r1
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	32b0      	adds	r2, #176	; 0xb0
 800bedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <SCSI_Inquiry+0x2a>
  {
    return -1;
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	e05f      	b.n	800bfae <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800befe:	2320      	movs	r3, #32
 800bf00:	2205      	movs	r2, #5
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f000 faeb 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0c:	e04f      	b.n	800bfae <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3301      	adds	r3, #1
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d020      	beq.n	800bf5e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3302      	adds	r3, #2
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d105      	bne.n	800bf32 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800bf26:	2206      	movs	r2, #6
 800bf28:	4923      	ldr	r1, [pc, #140]	; (800bfb8 <SCSI_Inquiry+0xf4>)
 800bf2a:	69b8      	ldr	r0, [r7, #24]
 800bf2c:	f001 f844 	bl	800cfb8 <SCSI_UpdateBotData>
 800bf30:	e03c      	b.n	800bfac <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3302      	adds	r3, #2
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b80      	cmp	r3, #128	; 0x80
 800bf3a:	d105      	bne.n	800bf48 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	491f      	ldr	r1, [pc, #124]	; (800bfbc <SCSI_Inquiry+0xf8>)
 800bf40:	69b8      	ldr	r0, [r7, #24]
 800bf42:	f001 f839 	bl	800cfb8 <SCSI_UpdateBotData>
 800bf46:	e031      	b.n	800bfac <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bf4e:	2324      	movs	r3, #36	; 0x24
 800bf50:	2205      	movs	r2, #5
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 fac3 	bl	800c4de <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5c:	e027      	b.n	800bfae <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	33b0      	adds	r3, #176	; 0xb0
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	69d9      	ldr	r1, [r3, #28]
 800bf70:	7afa      	ldrb	r2, [r7, #11]
 800bf72:	4613      	mov	r3, r2
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	4413      	add	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	3304      	adds	r3, #4
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	3305      	adds	r3, #5
 800bf88:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	8bfa      	ldrh	r2, [r7, #30]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d303      	bcc.n	800bfa0 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800bfa0:	8bfb      	ldrh	r3, [r7, #30]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6979      	ldr	r1, [r7, #20]
 800bfa6:	69b8      	ldr	r0, [r7, #24]
 800bfa8:	f001 f806 	bl	800cfb8 <SCSI_UpdateBotData>
  }

  return 0;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000070 	.word	0x20000070
 800bfbc:	20000078 	.word	0x20000078

0800bfc0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	32b0      	adds	r2, #176	; 0xb0
 800bfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfdc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800bfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe8:	e064      	b.n	800c0b4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	33b0      	adds	r3, #176	; 0xb0
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c008:	7af8      	ldrb	r0, [r7, #11]
 800c00a:	4798      	blx	r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c010:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <SCSI_ReadCapacity10+0x62>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d108      	bne.n	800c034 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c022:	7af9      	ldrb	r1, [r7, #11]
 800c024:	233a      	movs	r3, #58	; 0x3a
 800c026:	2202      	movs	r2, #2
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 fa58 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800c02e:	f04f 33ff 	mov.w	r3, #4294967295
 800c032:	e03f      	b.n	800c0b4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c03a:	3b01      	subs	r3, #1
 800c03c:	0e1b      	lsrs	r3, r3, #24
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c04a:	3b01      	subs	r3, #1
 800c04c:	0c1b      	lsrs	r3, r3, #16
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c05a:	3b01      	subs	r3, #1
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	3b01      	subs	r3, #1
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c07a:	161b      	asrs	r3, r3, #24
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c088:	141b      	asrs	r3, r3, #16
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c096:	0a1b      	lsrs	r3, r3, #8
 800c098:	b29b      	uxth	r3, r3
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	2208      	movs	r2, #8
 800c0b0:	60da      	str	r2, [r3, #12]

  return 0;
 800c0b2:	2300      	movs	r3, #0

}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	32b0      	adds	r2, #176	; 0xb0
 800c0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800c0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e4:	e099      	b.n	800c21a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	33b0      	adds	r3, #176	; 0xb0
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c104:	7af8      	ldrb	r0, [r7, #11]
 800c106:	4798      	blx	r3
 800c108:	4603      	mov	r3, r0
 800c10a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c10c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d104      	bne.n	800c11e <SCSI_ReadCapacity16+0x62>
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d108      	bne.n	800c130 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c11e:	7af9      	ldrb	r1, [r7, #11]
 800c120:	233a      	movs	r3, #58	; 0x3a
 800c122:	2202      	movs	r2, #2
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f9da 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800c12a:	f04f 33ff 	mov.w	r3, #4294967295
 800c12e:	e074      	b.n	800c21a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	330a      	adds	r3, #10
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	330b      	adds	r3, #11
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c140:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	330c      	adds	r3, #12
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c14a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	320d      	adds	r2, #13
 800c150:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c152:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c158:	2300      	movs	r3, #0
 800c15a:	77fb      	strb	r3, [r7, #31]
 800c15c:	e007      	b.n	800c16e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800c15e:	7ffb      	ldrb	r3, [r7, #31]
 800c160:	69ba      	ldr	r2, [r7, #24]
 800c162:	4413      	add	r3, r2
 800c164:	2200      	movs	r2, #0
 800c166:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c168:	7ffb      	ldrb	r3, [r7, #31]
 800c16a:	3301      	adds	r3, #1
 800c16c:	77fb      	strb	r3, [r7, #31]
 800c16e:	7ffa      	ldrb	r2, [r7, #31]
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	429a      	cmp	r2, r3
 800c176:	d3f2      	bcc.n	800c15e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c17e:	3b01      	subs	r3, #1
 800c180:	0e1b      	lsrs	r3, r3, #24
 800c182:	b2da      	uxtb	r2, r3
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c18e:	3b01      	subs	r3, #1
 800c190:	0c1b      	lsrs	r3, r3, #16
 800c192:	b2da      	uxtb	r2, r3
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	0a1b      	lsrs	r3, r3, #8
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c1be:	161b      	asrs	r3, r3, #24
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c1cc:	141b      	asrs	r3, r3, #16
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	330a      	adds	r3, #10
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	330b      	adds	r3, #11
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c200:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	330c      	adds	r3, #12
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c20a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	320d      	adds	r2, #13
 800c210:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c212:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	60da      	str	r2, [r3, #12]

  return 0;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b088      	sub	sp, #32
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	460b      	mov	r3, r1
 800c22c:	607a      	str	r2, [r7, #4]
 800c22e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	32b0      	adds	r2, #176	; 0xb0
 800c23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d102      	bne.n	800c24c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800c246:	f04f 33ff 	mov.w	r3, #4294967295
 800c24a:	e061      	b.n	800c310 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	33b0      	adds	r3, #176	; 0xb0
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f107 0214 	add.w	r2, r7, #20
 800c262:	f107 0110 	add.w	r1, r7, #16
 800c266:	7af8      	ldrb	r0, [r7, #11]
 800c268:	4798      	blx	r3
 800c26a:	4603      	mov	r3, r0
 800c26c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d104      	bne.n	800c280 <SCSI_ReadFormatCapacity+0x5e>
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d108      	bne.n	800c292 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c280:	7af9      	ldrb	r1, [r7, #11]
 800c282:	233a      	movs	r3, #58	; 0x3a
 800c284:	2202      	movs	r2, #2
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 f929 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800c28c:	f04f 33ff 	mov.w	r3, #4294967295
 800c290:	e03e      	b.n	800c310 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800c292:	2300      	movs	r3, #0
 800c294:	83fb      	strh	r3, [r7, #30]
 800c296:	e007      	b.n	800c2a8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800c298:	8bfb      	ldrh	r3, [r7, #30]
 800c29a:	69ba      	ldr	r2, [r7, #24]
 800c29c:	4413      	add	r3, r2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c2a2:	8bfb      	ldrh	r3, [r7, #30]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	83fb      	strh	r3, [r7, #30]
 800c2a8:	8bfb      	ldrh	r3, [r7, #30]
 800c2aa:	2b0b      	cmp	r3, #11
 800c2ac:	d9f4      	bls.n	800c298 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	2208      	movs	r2, #8
 800c2b2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	0e1b      	lsrs	r3, r3, #24
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	0c1b      	lsrs	r3, r3, #16
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	0a1b      	lsrs	r3, r3, #8
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c2ea:	8abb      	ldrh	r3, [r7, #20]
 800c2ec:	141b      	asrs	r3, r3, #16
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c2f4:	8abb      	ldrh	r3, [r7, #20]
 800c2f6:	0a1b      	lsrs	r3, r3, #8
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c300:	8abb      	ldrh	r3, [r7, #20]
 800c302:	b2da      	uxtb	r2, r3
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	220c      	movs	r2, #12
 800c30c:	60da      	str	r2, [r3, #12]

  return 0;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	460b      	mov	r3, r1
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	32b0      	adds	r2, #176	; 0xb0
 800c330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c334:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c336:	2317      	movs	r3, #23
 800c338:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c340:	f04f 33ff 	mov.w	r3, #4294967295
 800c344:	e011      	b.n	800c36a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	3304      	adds	r3, #4
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	8afa      	ldrh	r2, [r7, #22]
 800c350:	429a      	cmp	r2, r3
 800c352:	d303      	bcc.n	800c35c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3304      	adds	r3, #4
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c35c:	8afb      	ldrh	r3, [r7, #22]
 800c35e:	461a      	mov	r2, r3
 800c360:	4904      	ldr	r1, [pc, #16]	; (800c374 <SCSI_ModeSense6+0x5c>)
 800c362:	6938      	ldr	r0, [r7, #16]
 800c364:	f000 fe28 	bl	800cfb8 <SCSI_UpdateBotData>

  return 0;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000080 	.word	0x20000080

0800c378 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	460b      	mov	r3, r1
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	32b0      	adds	r2, #176	; 0xb0
 800c390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c394:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c396:	231b      	movs	r3, #27
 800c398:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e011      	b.n	800c3ca <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	8afa      	ldrh	r2, [r7, #22]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d303      	bcc.n	800c3bc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c3bc:	8afb      	ldrh	r3, [r7, #22]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4904      	ldr	r1, [pc, #16]	; (800c3d4 <SCSI_ModeSense10+0x5c>)
 800c3c2:	6938      	ldr	r0, [r7, #16]
 800c3c4:	f000 fdf8 	bl	800cfb8 <SCSI_UpdateBotData>

  return 0;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000098 	.word	0x20000098

0800c3d8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	32b0      	adds	r2, #176	; 0xb0
 800c3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c400:	e069      	b.n	800c4d6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c412:	2320      	movs	r3, #32
 800c414:	2205      	movs	r2, #5
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f861 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800c41c:	f04f 33ff 	mov.w	r3, #4294967295
 800c420:	e059      	b.n	800c4d6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c422:	2300      	movs	r3, #0
 800c424:	75fb      	strb	r3, [r7, #23]
 800c426:	e007      	b.n	800c438 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	4413      	add	r3, r2
 800c42e:	2200      	movs	r2, #0
 800c430:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	3301      	adds	r3, #1
 800c436:	75fb      	strb	r3, [r7, #23]
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	2b11      	cmp	r3, #17
 800c43c:	d9f4      	bls.n	800c428 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2270      	movs	r2, #112	; 0x70
 800c442:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	220c      	movs	r2, #12
 800c448:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c456:	429a      	cmp	r2, r3
 800c458:	d02e      	beq.n	800c4b8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c460:	461a      	mov	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	3248      	adds	r2, #72	; 0x48
 800c466:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	3348      	adds	r3, #72	; 0x48
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	4413      	add	r3, r2
 800c47c:	791a      	ldrb	r2, [r3, #4]
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	3348      	adds	r3, #72	; 0x48
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	4413      	add	r3, r2
 800c490:	795a      	ldrb	r2, [r3, #5]
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c49c:	3301      	adds	r3, #1
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d103      	bne.n	800c4b8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2212      	movs	r2, #18
 800c4bc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b12      	cmp	r3, #18
 800c4c6:	d805      	bhi.n	800c4d4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	70fb      	strb	r3, [r7, #3]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	70bb      	strb	r3, [r7, #2]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	32b0      	adds	r2, #176	; 0xb0
 800c502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c506:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d02c      	beq.n	800c568 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c514:	461a      	mov	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3248      	adds	r2, #72	; 0x48
 800c51a:	78b9      	ldrb	r1, [r7, #2]
 800c51c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	3348      	adds	r3, #72	; 0x48
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	4413      	add	r3, r2
 800c52e:	787a      	ldrb	r2, [r7, #1]
 800c530:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	3348      	adds	r3, #72	; 0x48
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	4413      	add	r3, r2
 800c540:	2200      	movs	r2, #0
 800c542:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c54a:	3301      	adds	r3, #1
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c55a:	2b04      	cmp	r3, #4
 800c55c:	d105      	bne.n	800c56a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c566:	e000      	b.n	800c56a <SCSI_SenseCode+0x8c>
    return;
 800c568:	bf00      	nop
  }
}
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	460b      	mov	r3, r1
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	32b0      	adds	r2, #176	; 0xb0
 800c58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c590:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800c598:	f04f 33ff 	mov.w	r3, #4294967295
 800c59c:	e03b      	b.n	800c616 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d10f      	bne.n	800c5c8 <SCSI_StartStopUnit+0x54>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d108      	bne.n	800c5c8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c5b6:	7af9      	ldrb	r1, [r7, #11]
 800c5b8:	2324      	movs	r3, #36	; 0x24
 800c5ba:	2205      	movs	r2, #5
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff ff8e 	bl	800c4de <SCSI_SenseCode>

    return -1;
 800c5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c6:	e026      	b.n	800c616 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f003 0303 	and.w	r3, r3, #3
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d104      	bne.n	800c5e0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c5de:	e016      	b.n	800c60e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	f003 0303 	and.w	r3, r3, #3
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d104      	bne.n	800c5f8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c5f6:	e00a      	b.n	800c60e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b03      	cmp	r3, #3
 800c604:	d103      	bne.n	800c60e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2200      	movs	r2, #0
 800c612:	60da      	str	r2, [r3, #12]

  return 0;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c61e:	b480      	push	{r7}
 800c620:	b087      	sub	sp, #28
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	460b      	mov	r3, r1
 800c628:	607a      	str	r2, [r7, #4]
 800c62a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	32b0      	adds	r2, #176	; 0xb0
 800c636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d102      	bne.n	800c648 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800c642:	f04f 33ff 	mov.w	r3, #4294967295
 800c646:	e011      	b.n	800c66c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3304      	adds	r3, #4
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d104      	bne.n	800c65c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c65a:	e003      	b.n	800c664 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2200      	movs	r2, #0
 800c668:	60da      	str	r2, [r3, #12]

  return 0;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	371c      	adds	r7, #28
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	460b      	mov	r3, r1
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	32b0      	adds	r2, #176	; 0xb0
 800c690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c694:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <SCSI_Read10+0x2a>
  {
    return -1;
 800c69c:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a0:	e090      	b.n	800c7c4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	7a1b      	ldrb	r3, [r3, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f040 8082 	bne.w	800c7b0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c6b2:	b25b      	sxtb	r3, r3
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	db0a      	blt.n	800c6ce <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c6be:	2320      	movs	r3, #32
 800c6c0:	2205      	movs	r2, #5
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff ff0b 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6cc:	e07a      	b.n	800c7c4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d108      	bne.n	800c6ea <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c6d8:	7af9      	ldrb	r1, [r7, #11]
 800c6da:	233a      	movs	r3, #58	; 0x3a
 800c6dc:	2202      	movs	r2, #2
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f7ff fefd 	bl	800c4de <SCSI_SenseCode>

      return -1;
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e8:	e06c      	b.n	800c7c4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	33b0      	adds	r3, #176	; 0xb0
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	7afa      	ldrb	r2, [r7, #11]
 800c6fe:	4610      	mov	r0, r2
 800c700:	4798      	blx	r3
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d008      	beq.n	800c71a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c708:	7af9      	ldrb	r1, [r7, #11]
 800c70a:	233a      	movs	r3, #58	; 0x3a
 800c70c:	2202      	movs	r2, #2
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7ff fee5 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c714:	f04f 33ff 	mov.w	r3, #4294967295
 800c718:	e054      	b.n	800c7c4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	3302      	adds	r3, #2
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3303      	adds	r3, #3
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c72a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3304      	adds	r3, #4
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c734:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	3205      	adds	r2, #5
 800c73a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c73c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3307      	adds	r3, #7
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	021b      	lsls	r3, r3, #8
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	3208      	adds	r2, #8
 800c750:	7812      	ldrb	r2, [r2, #0]
 800c752:	431a      	orrs	r2, r3
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c766:	7af9      	ldrb	r1, [r7, #11]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 fadc 	bl	800cd26 <SCSI_CheckAddressRange>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	da02      	bge.n	800c77a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	e024      	b.n	800c7c4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c786:	6979      	ldr	r1, [r7, #20]
 800c788:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c78c:	fb01 f303 	mul.w	r3, r1, r3
 800c790:	429a      	cmp	r2, r3
 800c792:	d00a      	beq.n	800c7aa <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c79a:	2320      	movs	r3, #32
 800c79c:	2205      	movs	r2, #5
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f7ff fe9d 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a8:	e00c      	b.n	800c7c4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c7b8:	7afb      	ldrb	r3, [r7, #11]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fadf 	bl	800cd80 <SCSI_ProcessRead>
 800c7c2:	4603      	mov	r3, r0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	32b0      	adds	r2, #176	; 0xb0
 800c7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <SCSI_Read12+0x2a>
  {
    return -1;
 800c7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f4:	e09a      	b.n	800c92c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	7a1b      	ldrb	r3, [r3, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f040 808c 	bne.w	800c918 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c806:	b25b      	sxtb	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	db0a      	blt.n	800c822 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c812:	2320      	movs	r3, #32
 800c814:	2205      	movs	r2, #5
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7ff fe61 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	e084      	b.n	800c92c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d108      	bne.n	800c83e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c82c:	7af9      	ldrb	r1, [r7, #11]
 800c82e:	233a      	movs	r3, #58	; 0x3a
 800c830:	2202      	movs	r2, #2
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff fe53 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	e076      	b.n	800c92c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	33b0      	adds	r3, #176	; 0xb0
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	7afa      	ldrb	r2, [r7, #11]
 800c852:	4610      	mov	r0, r2
 800c854:	4798      	blx	r3
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c85c:	7af9      	ldrb	r1, [r7, #11]
 800c85e:	233a      	movs	r3, #58	; 0x3a
 800c860:	2202      	movs	r2, #2
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7ff fe3b 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c868:	f04f 33ff 	mov.w	r3, #4294967295
 800c86c:	e05e      	b.n	800c92c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3302      	adds	r3, #2
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3303      	adds	r3, #3
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c87e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3304      	adds	r3, #4
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c888:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	3205      	adds	r2, #5
 800c88e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c890:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3306      	adds	r3, #6
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3307      	adds	r3, #7
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c8a8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c8b2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	3209      	adds	r2, #9
 800c8b8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c8ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c8ce:	7af9      	ldrb	r1, [r7, #11]
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 fa28 	bl	800cd26 <SCSI_CheckAddressRange>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da02      	bge.n	800c8e2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e0:	e024      	b.n	800c92c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c8ee:	6979      	ldr	r1, [r7, #20]
 800c8f0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c8f4:	fb01 f303 	mul.w	r3, r1, r3
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d00a      	beq.n	800c912 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c902:	2320      	movs	r3, #32
 800c904:	2205      	movs	r2, #5
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff fde9 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c90c:	f04f 33ff 	mov.w	r3, #4294967295
 800c910:	e00c      	b.n	800c92c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2202      	movs	r2, #2
 800c916:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c91e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c920:	7afb      	ldrb	r3, [r7, #11]
 800c922:	4619      	mov	r1, r3
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 fa2b 	bl	800cd80 <SCSI_ProcessRead>
 800c92a:	4603      	mov	r3, r0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	460b      	mov	r3, r1
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	32b0      	adds	r2, #176	; 0xb0
 800c94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c950:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <SCSI_Write10+0x2a>
  {
    return -1;
 800c958:	f04f 33ff 	mov.w	r3, #4294967295
 800c95c:	e0ba      	b.n	800cad4 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	7a1b      	ldrb	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 80b0 	bne.w	800cac8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c978:	2320      	movs	r3, #32
 800c97a:	2205      	movs	r2, #5
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fdae 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c982:	f04f 33ff 	mov.w	r3, #4294967295
 800c986:	e0a5      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c98e:	b25b      	sxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	da0a      	bge.n	800c9aa <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c99a:	2320      	movs	r3, #32
 800c99c:	2205      	movs	r2, #5
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fd9d 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a8:	e094      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	33b0      	adds	r3, #176	; 0xb0
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	7afa      	ldrb	r2, [r7, #11]
 800c9be:	4610      	mov	r0, r2
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d008      	beq.n	800c9da <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c9c8:	7af9      	ldrb	r1, [r7, #11]
 800c9ca:	233a      	movs	r3, #58	; 0x3a
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff fd85 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800c9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d8:	e07c      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	33b0      	adds	r3, #176	; 0xb0
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	7afa      	ldrb	r2, [r7, #11]
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4798      	blx	r3
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d008      	beq.n	800ca0a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c9f8:	7af9      	ldrb	r1, [r7, #11]
 800c9fa:	2327      	movs	r3, #39	; 0x27
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7ff fd6d 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800ca04:	f04f 33ff 	mov.w	r3, #4294967295
 800ca08:	e064      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3302      	adds	r3, #2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	3303      	adds	r3, #3
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca1a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ca24:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	3205      	adds	r2, #5
 800ca2a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ca2c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3307      	adds	r3, #7
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	3208      	adds	r2, #8
 800ca40:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ca42:	431a      	orrs	r2, r3
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca56:	7af9      	ldrb	r1, [r7, #11]
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 f964 	bl	800cd26 <SCSI_CheckAddressRange>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	da02      	bge.n	800ca6a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ca64:	f04f 33ff 	mov.w	r3, #4294967295
 800ca68:	e034      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ca76:	fb02 f303 	mul.w	r3, r2, r3
 800ca7a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d00a      	beq.n	800ca9e <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ca8e:	2320      	movs	r3, #32
 800ca90:	2205      	movs	r2, #5
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f7ff fd23 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800ca98:	f04f 33ff 	mov.w	r3, #4294967295
 800ca9c:	e01a      	b.n	800cad4 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa4:	bf28      	it	cs
 800caa6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800caaa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2201      	movs	r2, #1
 800cab0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800cab2:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <SCSI_Write10+0x1a8>)
 800cab4:	7819      	ldrb	r1, [r3, #0]
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f103 0210 	add.w	r2, r3, #16
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f004 fe71 	bl	80117a6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	e005      	b.n	800cad4 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800cac8:	7afb      	ldrb	r3, [r7, #11]
 800caca:	4619      	mov	r1, r3
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 f9dd 	bl	800ce8c <SCSI_ProcessWrite>
 800cad2:	4603      	mov	r3, r0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	2000006f 	.word	0x2000006f

0800cae0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	460b      	mov	r3, r1
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	32b0      	adds	r2, #176	; 0xb0
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d102      	bne.n	800cb0a <SCSI_Write12+0x2a>
  {
    return -1;
 800cb04:	f04f 33ff 	mov.w	r3, #4294967295
 800cb08:	e0ca      	b.n	800cca0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	7a1b      	ldrb	r3, [r3, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f040 80c0 	bne.w	800cc94 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10a      	bne.n	800cb34 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cb24:	2320      	movs	r3, #32
 800cb26:	2205      	movs	r2, #5
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff fcd8 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800cb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb32:	e0b5      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cb3a:	b25b      	sxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da0a      	bge.n	800cb56 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cb46:	2320      	movs	r3, #32
 800cb48:	2205      	movs	r2, #5
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f7ff fcc7 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295
 800cb54:	e0a4      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	33b0      	adds	r3, #176	; 0xb0
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	7afa      	ldrb	r2, [r7, #11]
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	4798      	blx	r3
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00b      	beq.n	800cb8c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cb74:	7af9      	ldrb	r1, [r7, #11]
 800cb76:	233a      	movs	r3, #58	; 0x3a
 800cb78:	2202      	movs	r2, #2
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff fcaf 	bl	800c4de <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2205      	movs	r2, #5
 800cb84:	721a      	strb	r2, [r3, #8]
      return -1;
 800cb86:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8a:	e089      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	33b0      	adds	r3, #176	; 0xb0
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	7afa      	ldrb	r2, [r7, #11]
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00b      	beq.n	800cbc2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cbaa:	7af9      	ldrb	r1, [r7, #11]
 800cbac:	2327      	movs	r3, #39	; 0x27
 800cbae:	2202      	movs	r2, #2
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fc94 	bl	800c4de <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2205      	movs	r2, #5
 800cbba:	721a      	strb	r2, [r3, #8]
      return -1;
 800cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc0:	e06e      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3302      	adds	r3, #2
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3303      	adds	r3, #3
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbd2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cbdc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	3205      	adds	r2, #5
 800cbe2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cbe4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3306      	adds	r3, #6
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3307      	adds	r3, #7
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cbfc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3308      	adds	r3, #8
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800cc06:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	3209      	adds	r2, #9
 800cc0c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800cc0e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc22:	7af9      	ldrb	r1, [r7, #11]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 f87e 	bl	800cd26 <SCSI_CheckAddressRange>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	da02      	bge.n	800cc36 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295
 800cc34:	e034      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cc42:	fb02 f303 	mul.w	r3, r2, r3
 800cc46:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d00a      	beq.n	800cc6a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cc5a:	2320      	movs	r3, #32
 800cc5c:	2205      	movs	r2, #5
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff fc3d 	bl	800c4de <SCSI_SenseCode>
      return -1;
 800cc64:	f04f 33ff 	mov.w	r3, #4294967295
 800cc68:	e01a      	b.n	800cca0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc70:	bf28      	it	cs
 800cc72:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cc76:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800cc7e:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <SCSI_Write12+0x1c8>)
 800cc80:	7819      	ldrb	r1, [r3, #0]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f103 0210 	add.w	r2, r3, #16
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f004 fd8b 	bl	80117a6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	e005      	b.n	800cca0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	4619      	mov	r1, r3
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 f8f7 	bl	800ce8c <SCSI_ProcessWrite>
 800cc9e:	4603      	mov	r3, r0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	2000006f 	.word	0x2000006f

0800ccac <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	32b0      	adds	r2, #176	; 0xb0
 800ccc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ccd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd4:	e023      	b.n	800cd1e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d008      	beq.n	800ccf6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800cce4:	7af9      	ldrb	r1, [r7, #11]
 800cce6:	2324      	movs	r3, #36	; 0x24
 800cce8:	2205      	movs	r2, #5
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7ff fbf7 	bl	800c4de <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ccf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf4:	e013      	b.n	800cd1e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd02:	7af9      	ldrb	r1, [r7, #11]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f000 f80e 	bl	800cd26 <SCSI_CheckAddressRange>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	da02      	bge.n	800cd16 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295
 800cd14:	e003      	b.n	800cd1e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	60da      	str	r2, [r3, #12]

  return 0;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
 800cd32:	460b      	mov	r3, r1
 800cd34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	32b0      	adds	r2, #176	; 0xb0
 800cd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800cd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd50:	e011      	b.n	800cd76 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	441a      	add	r2, r3
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d908      	bls.n	800cd74 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800cd62:	7af9      	ldrb	r1, [r7, #11]
 800cd64:	2321      	movs	r3, #33	; 0x21
 800cd66:	2205      	movs	r2, #5
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7ff fbb8 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800cd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd72:	e000      	b.n	800cd76 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	32b0      	adds	r2, #176	; 0xb0
 800cd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd9a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800cda2:	f04f 33ff 	mov.w	r3, #4294967295
 800cda6:	e06a      	b.n	800ce7e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cdb4:	fb02 f303 	mul.w	r3, r2, r3
 800cdb8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc0:	bf28      	it	cs
 800cdc2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cdc6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	33b0      	adds	r3, #176	; 0xb0
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	691c      	ldr	r4, [r3, #16]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f103 0110 	add.w	r1, r3, #16
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cdec:	4618      	mov	r0, r3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	78f8      	ldrb	r0, [r7, #3]
 800cdf8:	47a0      	blx	r4
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da08      	bge.n	800ce12 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ce00:	78f9      	ldrb	r1, [r7, #3]
 800ce02:	2311      	movs	r3, #17
 800ce04:	2204      	movs	r2, #4
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff fb69 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800ce0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce10:	e035      	b.n	800ce7e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ce12:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <SCSI_ProcessRead+0x108>)
 800ce14:	7819      	ldrb	r1, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f103 0210 	add.w	r2, r3, #16
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f004 fca0 	bl	8011764 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ce30:	4619      	mov	r1, r3
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce38:	441a      	add	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce54:	1ad2      	subs	r2, r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	1ad2      	subs	r2, r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2203      	movs	r2, #3
 800ce7a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd90      	pop	{r4, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2000006e 	.word	0x2000006e

0800ce8c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	32b0      	adds	r2, #176	; 0xb0
 800cea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ceae:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb2:	e07a      	b.n	800cfaa <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
 800cec4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cecc:	bf28      	it	cs
 800cece:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ced2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	33b0      	adds	r3, #176	; 0xb0
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	695c      	ldr	r4, [r3, #20]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f103 0110 	add.w	r1, r3, #16
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cef8:	4618      	mov	r0, r3
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	78f8      	ldrb	r0, [r7, #3]
 800cf04:	47a0      	blx	r4
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da08      	bge.n	800cf1e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800cf0c:	78f9      	ldrb	r1, [r7, #3]
 800cf0e:	2303      	movs	r3, #3
 800cf10:	2204      	movs	r2, #4
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fae3 	bl	800c4de <SCSI_SenseCode>
    return -1;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1c:	e045      	b.n	800cfaa <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cf46:	4619      	mov	r1, r3
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf4e:	1ad2      	subs	r2, r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d104      	bne.n	800cf7a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800cf70:	2100      	movs	r1, #0
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7fe fd14 	bl	800b9a0 <MSC_BOT_SendCSW>
 800cf78:	e016      	b.n	800cfa8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf8e:	bf28      	it	cs
 800cf90:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cf94:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800cf96:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <SCSI_ProcessWrite+0x128>)
 800cf98:	7819      	ldrb	r1, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f103 0210 	add.w	r2, r3, #16
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f004 fbff 	bl	80117a6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd90      	pop	{r4, r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	2000006f 	.word	0x2000006f

0800cfb8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b087      	sub	sp, #28
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800cfc6:	88fb      	ldrh	r3, [r7, #6]
 800cfc8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d102      	bne.n	800cfd6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd4:	e013      	b.n	800cffe <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800cfd6:	8afa      	ldrh	r2, [r7, #22]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800cfdc:	e00b      	b.n	800cff6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800cfde:	8afb      	ldrh	r3, [r7, #22]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800cfe4:	8afb      	ldrh	r3, [r7, #22]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	441a      	add	r2, r3
 800cfea:	8afb      	ldrh	r3, [r7, #22]
 800cfec:	7811      	ldrb	r1, [r2, #0]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	4413      	add	r3, r2
 800cff2:	460a      	mov	r2, r1
 800cff4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800cff6:	8afb      	ldrh	r3, [r7, #22]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1f0      	bne.n	800cfde <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b086      	sub	sp, #24
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	4613      	mov	r3, r2
 800d016:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d01e:	2303      	movs	r3, #3
 800d020:	e01f      	b.n	800d062 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	79fa      	ldrb	r2, [r7, #7]
 800d054:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f004 fa2a 	bl	80114b0 <USBD_LL_Init>
 800d05c:	4603      	mov	r3, r0
 800d05e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d060:	7dfb      	ldrb	r3, [r7, #23]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d07e:	2303      	movs	r3, #3
 800d080:	e025      	b.n	800d0ce <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	32ae      	adds	r2, #174	; 0xae
 800d094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00f      	beq.n	800d0be <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	32ae      	adds	r2, #174	; 0xae
 800d0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	f107 020e 	add.w	r2, r7, #14
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4798      	blx	r3
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f004 fa38 	bl	8011554 <USBD_LL_Start>
 800d0e4:	4603      	mov	r3, r0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b083      	sub	sp, #12
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0f6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d009      	beq.n	800d132 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	78fa      	ldrb	r2, [r7, #3]
 800d128:	4611      	mov	r1, r2
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4798      	blx	r3
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d132:	7bfb      	ldrb	r3, [r7, #15]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	78fa      	ldrb	r2, [r7, #3]
 800d156:	4611      	mov	r1, r2
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	4798      	blx	r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d162:	2303      	movs	r3, #3
 800d164:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d166:	7bfb      	ldrb	r3, [r7, #15]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f001 f933 	bl	800e3ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d196:	461a      	mov	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d1a4:	f003 031f 	and.w	r3, r3, #31
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d01a      	beq.n	800d1e2 <USBD_LL_SetupStage+0x72>
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d822      	bhi.n	800d1f6 <USBD_LL_SetupStage+0x86>
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <USBD_LL_SetupStage+0x4a>
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d00a      	beq.n	800d1ce <USBD_LL_SetupStage+0x5e>
 800d1b8:	e01d      	b.n	800d1f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fb60 	bl	800d888 <USBD_StdDevReq>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d1cc:	e020      	b.n	800d210 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fbc8 	bl	800d96c <USBD_StdItfReq>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e0:	e016      	b.n	800d210 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fc2a 	bl	800da44 <USBD_StdEPReq>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f4:	e00c      	b.n	800d210 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d1fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d200:	b2db      	uxtb	r3, r3
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f004 fa24 	bl	8011652 <USBD_LL_StallEP>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
      break;
 800d20e:	bf00      	nop
  }

  return ret;
 800d210:	7bfb      	ldrb	r3, [r7, #15]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	460b      	mov	r3, r1
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d22c:	7afb      	ldrb	r3, [r7, #11]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d16e      	bne.n	800d310 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d240:	2b03      	cmp	r3, #3
 800d242:	f040 8098 	bne.w	800d376 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	689a      	ldr	r2, [r3, #8]
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d913      	bls.n	800d27a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	1ad2      	subs	r2, r2, r3
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	68da      	ldr	r2, [r3, #12]
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	4293      	cmp	r3, r2
 800d26a:	bf28      	it	cs
 800d26c:	4613      	movcs	r3, r2
 800d26e:	461a      	mov	r2, r3
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f001 f992 	bl	800e59c <USBD_CtlContinueRx>
 800d278:	e07d      	b.n	800d376 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d280:	f003 031f 	and.w	r3, r3, #31
 800d284:	2b02      	cmp	r3, #2
 800d286:	d014      	beq.n	800d2b2 <USBD_LL_DataOutStage+0x98>
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d81d      	bhi.n	800d2c8 <USBD_LL_DataOutStage+0xae>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <USBD_LL_DataOutStage+0x7c>
 800d290:	2b01      	cmp	r3, #1
 800d292:	d003      	beq.n	800d29c <USBD_LL_DataOutStage+0x82>
 800d294:	e018      	b.n	800d2c8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	75bb      	strb	r3, [r7, #22]
            break;
 800d29a:	e018      	b.n	800d2ce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 fa5e 	bl	800d768 <USBD_CoreFindIF>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	75bb      	strb	r3, [r7, #22]
            break;
 800d2b0:	e00d      	b.n	800d2ce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 fa60 	bl	800d782 <USBD_CoreFindEP>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	75bb      	strb	r3, [r7, #22]
            break;
 800d2c6:	e002      	b.n	800d2ce <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d2cc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d119      	bne.n	800d308 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d113      	bne.n	800d308 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d2e0:	7dba      	ldrb	r2, [r7, #22]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	32ae      	adds	r2, #174	; 0xae
 800d2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00b      	beq.n	800d308 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d2f0:	7dba      	ldrb	r2, [r7, #22]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d2f8:	7dba      	ldrb	r2, [r7, #22]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	32ae      	adds	r2, #174	; 0xae
 800d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f001 f958 	bl	800e5be <USBD_CtlSendStatus>
 800d30e:	e032      	b.n	800d376 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d310:	7afb      	ldrb	r3, [r7, #11]
 800d312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d316:	b2db      	uxtb	r3, r3
 800d318:	4619      	mov	r1, r3
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f000 fa31 	bl	800d782 <USBD_CoreFindEP>
 800d320:	4603      	mov	r3, r0
 800d322:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d324:	7dbb      	ldrb	r3, [r7, #22]
 800d326:	2bff      	cmp	r3, #255	; 0xff
 800d328:	d025      	beq.n	800d376 <USBD_LL_DataOutStage+0x15c>
 800d32a:	7dbb      	ldrb	r3, [r7, #22]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d122      	bne.n	800d376 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b03      	cmp	r3, #3
 800d33a:	d117      	bne.n	800d36c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d33c:	7dba      	ldrb	r2, [r7, #22]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	32ae      	adds	r2, #174	; 0xae
 800d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00f      	beq.n	800d36c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d34c:	7dba      	ldrb	r2, [r7, #22]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d354:	7dba      	ldrb	r2, [r7, #22]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	32ae      	adds	r2, #174	; 0xae
 800d35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	7afa      	ldrb	r2, [r7, #11]
 800d362:	4611      	mov	r1, r2
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	4798      	blx	r3
 800d368:	4603      	mov	r3, r0
 800d36a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d372:	7dfb      	ldrb	r3, [r7, #23]
 800d374:	e000      	b.n	800d378 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	460b      	mov	r3, r1
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d38e:	7afb      	ldrb	r3, [r7, #11]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d16f      	bne.n	800d474 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3314      	adds	r3, #20
 800d398:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d15a      	bne.n	800d45a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	689a      	ldr	r2, [r3, #8]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d914      	bls.n	800d3da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	689a      	ldr	r2, [r3, #8]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	1ad2      	subs	r2, r2, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6879      	ldr	r1, [r7, #4]
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f001 f8d7 	bl	800e57a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f004 f9e7 	bl	80117a6 <USBD_LL_PrepareReceive>
 800d3d8:	e03f      	b.n	800d45a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d11c      	bne.n	800d420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d316      	bcc.n	800d420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d20f      	bcs.n	800d420 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d400:	2200      	movs	r2, #0
 800d402:	2100      	movs	r1, #0
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f001 f8b8 	bl	800e57a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d412:	2300      	movs	r3, #0
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f004 f9c4 	bl	80117a6 <USBD_LL_PrepareReceive>
 800d41e:	e01c      	b.n	800d45a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d10f      	bne.n	800d44c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d44c:	2180      	movs	r1, #128	; 0x80
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f004 f8ff 	bl	8011652 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f001 f8c5 	bl	800e5e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d03a      	beq.n	800d4da <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff fe42 	bl	800d0ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d472:	e032      	b.n	800d4da <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d474:	7afb      	ldrb	r3, [r7, #11]
 800d476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	4619      	mov	r1, r3
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f000 f97f 	bl	800d782 <USBD_CoreFindEP>
 800d484:	4603      	mov	r3, r0
 800d486:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	2bff      	cmp	r3, #255	; 0xff
 800d48c:	d025      	beq.n	800d4da <USBD_LL_DataInStage+0x15a>
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d122      	bne.n	800d4da <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d11c      	bne.n	800d4da <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d4a0:	7dfa      	ldrb	r2, [r7, #23]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	32ae      	adds	r2, #174	; 0xae
 800d4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d014      	beq.n	800d4da <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d4b0:	7dfa      	ldrb	r2, [r7, #23]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	32ae      	adds	r2, #174	; 0xae
 800d4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	7afa      	ldrb	r2, [r7, #11]
 800d4c6:	4611      	mov	r1, r2
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	4798      	blx	r3
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d4d0:	7dbb      	ldrb	r3, [r7, #22]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
 800d4d8:	e000      	b.n	800d4dc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d014      	beq.n	800d54a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00e      	beq.n	800d54a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	6852      	ldr	r2, [r2, #4]
 800d538:	b2d2      	uxtb	r2, r2
 800d53a:	4611      	mov	r1, r2
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	4798      	blx	r3
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d546:	2303      	movs	r3, #3
 800d548:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d54a:	2340      	movs	r3, #64	; 0x40
 800d54c:	2200      	movs	r2, #0
 800d54e:	2100      	movs	r1, #0
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f004 f81a 	bl	801158a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2240      	movs	r2, #64	; 0x40
 800d562:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d566:	2340      	movs	r3, #64	; 0x40
 800d568:	2200      	movs	r2, #0
 800d56a:	2180      	movs	r1, #128	; 0x80
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f004 f80c 	bl	801158a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2240      	movs	r2, #64	; 0x40
 800d57c:	621a      	str	r2, [r3, #32]

  return ret;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d106      	bne.n	800d5f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b03      	cmp	r3, #3
 800d616:	d110      	bne.n	800d63a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00b      	beq.n	800d63a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d628:	69db      	ldr	r3, [r3, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d005      	beq.n	800d63a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	32ae      	adds	r2, #174	; 0xae
 800d65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d662:	2303      	movs	r3, #3
 800d664:	e01c      	b.n	800d6a0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d115      	bne.n	800d69e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	32ae      	adds	r2, #174	; 0xae
 800d67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00b      	beq.n	800d69e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	32ae      	adds	r2, #174	; 0xae
 800d690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	4611      	mov	r1, r2
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	32ae      	adds	r2, #174	; 0xae
 800d6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	e01c      	b.n	800d704 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d115      	bne.n	800d702 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	32ae      	adds	r2, #174	; 0xae
 800d6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00b      	beq.n	800d702 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	32ae      	adds	r2, #174	; 0xae
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00e      	beq.n	800d75e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6852      	ldr	r2, [r2, #4]
 800d74c:	b2d2      	uxtb	r2, r2
 800d74e:	4611      	mov	r1, r2
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	4798      	blx	r3
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d75a:	2303      	movs	r3, #3
 800d75c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d774:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	460b      	mov	r3, r1
 800d78c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d78e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	885b      	ldrh	r3, [r3, #2]
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d920      	bls.n	800d806 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d7cc:	e013      	b.n	800d7f6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d7ce:	f107 030a 	add.w	r3, r7, #10
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6978      	ldr	r0, [r7, #20]
 800d7d6:	f000 f81b 	bl	800d810 <USBD_GetNextDesc>
 800d7da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	785b      	ldrb	r3, [r3, #1]
 800d7e0:	2b05      	cmp	r3, #5
 800d7e2:	d108      	bne.n	800d7f6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	789b      	ldrb	r3, [r3, #2]
 800d7ec:	78fa      	ldrb	r2, [r7, #3]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d008      	beq.n	800d804 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	885b      	ldrh	r3, [r3, #2]
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	897b      	ldrh	r3, [r7, #10]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d8e5      	bhi.n	800d7ce <USBD_GetEpDesc+0x32>
 800d802:	e000      	b.n	800d806 <USBD_GetEpDesc+0x6a>
          break;
 800d804:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d806:	693b      	ldr	r3, [r7, #16]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	881a      	ldrh	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	4413      	add	r3, r2
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	461a      	mov	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4413      	add	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b087      	sub	sp, #28
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	3301      	adds	r3, #1
 800d860:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d868:	8a3b      	ldrh	r3, [r7, #16]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	b21a      	sxth	r2, r3
 800d86e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d872:	4313      	orrs	r3, r2
 800d874:	b21b      	sxth	r3, r3
 800d876:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d878:	89fb      	ldrh	r3, [r7, #14]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	371c      	adds	r7, #28
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
	...

0800d888 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d89e:	2b40      	cmp	r3, #64	; 0x40
 800d8a0:	d005      	beq.n	800d8ae <USBD_StdDevReq+0x26>
 800d8a2:	2b40      	cmp	r3, #64	; 0x40
 800d8a4:	d857      	bhi.n	800d956 <USBD_StdDevReq+0xce>
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00f      	beq.n	800d8ca <USBD_StdDevReq+0x42>
 800d8aa:	2b20      	cmp	r3, #32
 800d8ac:	d153      	bne.n	800d956 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	32ae      	adds	r2, #174	; 0xae
 800d8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	4798      	blx	r3
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8c8:	e04a      	b.n	800d960 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	785b      	ldrb	r3, [r3, #1]
 800d8ce:	2b09      	cmp	r3, #9
 800d8d0:	d83b      	bhi.n	800d94a <USBD_StdDevReq+0xc2>
 800d8d2:	a201      	add	r2, pc, #4	; (adr r2, 800d8d8 <USBD_StdDevReq+0x50>)
 800d8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d8:	0800d92d 	.word	0x0800d92d
 800d8dc:	0800d941 	.word	0x0800d941
 800d8e0:	0800d94b 	.word	0x0800d94b
 800d8e4:	0800d937 	.word	0x0800d937
 800d8e8:	0800d94b 	.word	0x0800d94b
 800d8ec:	0800d90b 	.word	0x0800d90b
 800d8f0:	0800d901 	.word	0x0800d901
 800d8f4:	0800d94b 	.word	0x0800d94b
 800d8f8:	0800d923 	.word	0x0800d923
 800d8fc:	0800d915 	.word	0x0800d915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fa3c 	bl	800dd80 <USBD_GetDescriptor>
          break;
 800d908:	e024      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d90a:	6839      	ldr	r1, [r7, #0]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fbcb 	bl	800e0a8 <USBD_SetAddress>
          break;
 800d912:	e01f      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fc0a 	bl	800e130 <USBD_SetConfig>
 800d91c:	4603      	mov	r3, r0
 800d91e:	73fb      	strb	r3, [r7, #15]
          break;
 800d920:	e018      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fcad 	bl	800e284 <USBD_GetConfig>
          break;
 800d92a:	e013      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fcde 	bl	800e2f0 <USBD_GetStatus>
          break;
 800d934:	e00e      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fd0d 	bl	800e358 <USBD_SetFeature>
          break;
 800d93e:	e009      	b.n	800d954 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fd31 	bl	800e3aa <USBD_ClrFeature>
          break;
 800d948:	e004      	b.n	800d954 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fd88 	bl	800e462 <USBD_CtlError>
          break;
 800d952:	bf00      	nop
      }
      break;
 800d954:	e004      	b.n	800d960 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d956:	6839      	ldr	r1, [r7, #0]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fd82 	bl	800e462 <USBD_CtlError>
      break;
 800d95e:	bf00      	nop
  }

  return ret;
 800d960:	7bfb      	ldrb	r3, [r7, #15]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop

0800d96c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d982:	2b40      	cmp	r3, #64	; 0x40
 800d984:	d005      	beq.n	800d992 <USBD_StdItfReq+0x26>
 800d986:	2b40      	cmp	r3, #64	; 0x40
 800d988:	d852      	bhi.n	800da30 <USBD_StdItfReq+0xc4>
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d001      	beq.n	800d992 <USBD_StdItfReq+0x26>
 800d98e:	2b20      	cmp	r3, #32
 800d990:	d14e      	bne.n	800da30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	3b01      	subs	r3, #1
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d840      	bhi.n	800da22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	889b      	ldrh	r3, [r3, #4]
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d836      	bhi.n	800da18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	889b      	ldrh	r3, [r3, #4]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7ff fed8 	bl	800d768 <USBD_CoreFindIF>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9bc:	7bbb      	ldrb	r3, [r7, #14]
 800d9be:	2bff      	cmp	r3, #255	; 0xff
 800d9c0:	d01d      	beq.n	800d9fe <USBD_StdItfReq+0x92>
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d11a      	bne.n	800d9fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d9c8:	7bba      	ldrb	r2, [r7, #14]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	32ae      	adds	r2, #174	; 0xae
 800d9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00f      	beq.n	800d9f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d9d8:	7bba      	ldrb	r2, [r7, #14]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d9e0:	7bba      	ldrb	r2, [r7, #14]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	32ae      	adds	r2, #174	; 0xae
 800d9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	4798      	blx	r3
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d9f6:	e004      	b.n	800da02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d9fc:	e001      	b.n	800da02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d9fe:	2303      	movs	r3, #3
 800da00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	88db      	ldrh	r3, [r3, #6]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d110      	bne.n	800da2c <USBD_StdItfReq+0xc0>
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10d      	bne.n	800da2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fdd4 	bl	800e5be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800da16:	e009      	b.n	800da2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fd21 	bl	800e462 <USBD_CtlError>
          break;
 800da20:	e004      	b.n	800da2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 fd1c 	bl	800e462 <USBD_CtlError>
          break;
 800da2a:	e000      	b.n	800da2e <USBD_StdItfReq+0xc2>
          break;
 800da2c:	bf00      	nop
      }
      break;
 800da2e:	e004      	b.n	800da3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fd15 	bl	800e462 <USBD_CtlError>
      break;
 800da38:	bf00      	nop
  }

  return ret;
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	889b      	ldrh	r3, [r3, #4]
 800da56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da60:	2b40      	cmp	r3, #64	; 0x40
 800da62:	d007      	beq.n	800da74 <USBD_StdEPReq+0x30>
 800da64:	2b40      	cmp	r3, #64	; 0x40
 800da66:	f200 817f 	bhi.w	800dd68 <USBD_StdEPReq+0x324>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d02a      	beq.n	800dac4 <USBD_StdEPReq+0x80>
 800da6e:	2b20      	cmp	r3, #32
 800da70:	f040 817a 	bne.w	800dd68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800da74:	7bbb      	ldrb	r3, [r7, #14]
 800da76:	4619      	mov	r1, r3
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff fe82 	bl	800d782 <USBD_CoreFindEP>
 800da7e:	4603      	mov	r3, r0
 800da80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da82:	7b7b      	ldrb	r3, [r7, #13]
 800da84:	2bff      	cmp	r3, #255	; 0xff
 800da86:	f000 8174 	beq.w	800dd72 <USBD_StdEPReq+0x32e>
 800da8a:	7b7b      	ldrb	r3, [r7, #13]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f040 8170 	bne.w	800dd72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800da92:	7b7a      	ldrb	r2, [r7, #13]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800da9a:	7b7a      	ldrb	r2, [r7, #13]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	32ae      	adds	r2, #174	; 0xae
 800daa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f000 8163 	beq.w	800dd72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800daac:	7b7a      	ldrb	r2, [r7, #13]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	32ae      	adds	r2, #174	; 0xae
 800dab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	4798      	blx	r3
 800dabe:	4603      	mov	r3, r0
 800dac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dac2:	e156      	b.n	800dd72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	785b      	ldrb	r3, [r3, #1]
 800dac8:	2b03      	cmp	r3, #3
 800daca:	d008      	beq.n	800dade <USBD_StdEPReq+0x9a>
 800dacc:	2b03      	cmp	r3, #3
 800dace:	f300 8145 	bgt.w	800dd5c <USBD_StdEPReq+0x318>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 809b 	beq.w	800dc0e <USBD_StdEPReq+0x1ca>
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d03c      	beq.n	800db56 <USBD_StdEPReq+0x112>
 800dadc:	e13e      	b.n	800dd5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d002      	beq.n	800daf0 <USBD_StdEPReq+0xac>
 800daea:	2b03      	cmp	r3, #3
 800daec:	d016      	beq.n	800db1c <USBD_StdEPReq+0xd8>
 800daee:	e02c      	b.n	800db4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daf0:	7bbb      	ldrb	r3, [r7, #14]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00d      	beq.n	800db12 <USBD_StdEPReq+0xce>
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	2b80      	cmp	r3, #128	; 0x80
 800dafa:	d00a      	beq.n	800db12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f003 fda6 	bl	8011652 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db06:	2180      	movs	r1, #128	; 0x80
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f003 fda2 	bl	8011652 <USBD_LL_StallEP>
 800db0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db10:	e020      	b.n	800db54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fca4 	bl	800e462 <USBD_CtlError>
              break;
 800db1a:	e01b      	b.n	800db54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	885b      	ldrh	r3, [r3, #2]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10e      	bne.n	800db42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00b      	beq.n	800db42 <USBD_StdEPReq+0xfe>
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	2b80      	cmp	r3, #128	; 0x80
 800db2e:	d008      	beq.n	800db42 <USBD_StdEPReq+0xfe>
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	88db      	ldrh	r3, [r3, #6]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d104      	bne.n	800db42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800db38:	7bbb      	ldrb	r3, [r7, #14]
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f003 fd88 	bl	8011652 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fd3b 	bl	800e5be <USBD_CtlSendStatus>

              break;
 800db48:	e004      	b.n	800db54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fc88 	bl	800e462 <USBD_CtlError>
              break;
 800db52:	bf00      	nop
          }
          break;
 800db54:	e107      	b.n	800dd66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d002      	beq.n	800db68 <USBD_StdEPReq+0x124>
 800db62:	2b03      	cmp	r3, #3
 800db64:	d016      	beq.n	800db94 <USBD_StdEPReq+0x150>
 800db66:	e04b      	b.n	800dc00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db68:	7bbb      	ldrb	r3, [r7, #14]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00d      	beq.n	800db8a <USBD_StdEPReq+0x146>
 800db6e:	7bbb      	ldrb	r3, [r7, #14]
 800db70:	2b80      	cmp	r3, #128	; 0x80
 800db72:	d00a      	beq.n	800db8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db74:	7bbb      	ldrb	r3, [r7, #14]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f003 fd6a 	bl	8011652 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db7e:	2180      	movs	r1, #128	; 0x80
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f003 fd66 	bl	8011652 <USBD_LL_StallEP>
 800db86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db88:	e040      	b.n	800dc0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800db8a:	6839      	ldr	r1, [r7, #0]
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fc68 	bl	800e462 <USBD_CtlError>
              break;
 800db92:	e03b      	b.n	800dc0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	885b      	ldrh	r3, [r3, #2]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d136      	bne.n	800dc0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f003 fd70 	bl	8011690 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fd04 	bl	800e5be <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff fde1 	bl	800d782 <USBD_CoreFindEP>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbc4:	7b7b      	ldrb	r3, [r7, #13]
 800dbc6:	2bff      	cmp	r3, #255	; 0xff
 800dbc8:	d01f      	beq.n	800dc0a <USBD_StdEPReq+0x1c6>
 800dbca:	7b7b      	ldrb	r3, [r7, #13]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d11c      	bne.n	800dc0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dbd0:	7b7a      	ldrb	r2, [r7, #13]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dbd8:	7b7a      	ldrb	r2, [r7, #13]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	32ae      	adds	r2, #174	; 0xae
 800dbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d010      	beq.n	800dc0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dbe8:	7b7a      	ldrb	r2, [r7, #13]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	32ae      	adds	r2, #174	; 0xae
 800dbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	4798      	blx	r3
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dbfe:	e004      	b.n	800dc0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fc2d 	bl	800e462 <USBD_CtlError>
              break;
 800dc08:	e000      	b.n	800dc0c <USBD_StdEPReq+0x1c8>
              break;
 800dc0a:	bf00      	nop
          }
          break;
 800dc0c:	e0ab      	b.n	800dd66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d002      	beq.n	800dc20 <USBD_StdEPReq+0x1dc>
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	d032      	beq.n	800dc84 <USBD_StdEPReq+0x240>
 800dc1e:	e097      	b.n	800dd50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d007      	beq.n	800dc36 <USBD_StdEPReq+0x1f2>
 800dc26:	7bbb      	ldrb	r3, [r7, #14]
 800dc28:	2b80      	cmp	r3, #128	; 0x80
 800dc2a:	d004      	beq.n	800dc36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fc17 	bl	800e462 <USBD_CtlError>
                break;
 800dc34:	e091      	b.n	800dd5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da0b      	bge.n	800dc56 <USBD_StdEPReq+0x212>
 800dc3e:	7bbb      	ldrb	r3, [r7, #14]
 800dc40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc44:	4613      	mov	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	4413      	add	r3, r2
 800dc52:	3304      	adds	r3, #4
 800dc54:	e00b      	b.n	800dc6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc56:	7bbb      	ldrb	r3, [r7, #14]
 800dc58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2202      	movs	r2, #2
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fc61 	bl	800e544 <USBD_CtlSendData>
              break;
 800dc82:	e06a      	b.n	800dd5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dc84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	da11      	bge.n	800dcb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	f003 020f 	and.w	r2, r3, #15
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	4613      	mov	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3324      	adds	r3, #36	; 0x24
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d117      	bne.n	800dcd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fbda 	bl	800e462 <USBD_CtlError>
                  break;
 800dcae:	e054      	b.n	800dd5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dcb0:	7bbb      	ldrb	r3, [r7, #14]
 800dcb2:	f003 020f 	and.w	r2, r3, #15
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	440b      	add	r3, r1
 800dcc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dcc6:	881b      	ldrh	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d104      	bne.n	800dcd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dccc:	6839      	ldr	r1, [r7, #0]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fbc7 	bl	800e462 <USBD_CtlError>
                  break;
 800dcd4:	e041      	b.n	800dd5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	da0b      	bge.n	800dcf6 <USBD_StdEPReq+0x2b2>
 800dcde:	7bbb      	ldrb	r3, [r7, #14]
 800dce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dce4:	4613      	mov	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	3310      	adds	r3, #16
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	e00b      	b.n	800dd0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcf6:	7bbb      	ldrb	r3, [r7, #14]
 800dcf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d002      	beq.n	800dd1c <USBD_StdEPReq+0x2d8>
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	2b80      	cmp	r3, #128	; 0x80
 800dd1a:	d103      	bne.n	800dd24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	e00e      	b.n	800dd42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f003 fcd0 	bl	80116ce <USBD_LL_IsStallEP>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d003      	beq.n	800dd3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	e002      	b.n	800dd42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2202      	movs	r2, #2
 800dd46:	4619      	mov	r1, r3
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fbfb 	bl	800e544 <USBD_CtlSendData>
              break;
 800dd4e:	e004      	b.n	800dd5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fb85 	bl	800e462 <USBD_CtlError>
              break;
 800dd58:	bf00      	nop
          }
          break;
 800dd5a:	e004      	b.n	800dd66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fb7f 	bl	800e462 <USBD_CtlError>
          break;
 800dd64:	bf00      	nop
      }
      break;
 800dd66:	e005      	b.n	800dd74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fb79 	bl	800e462 <USBD_CtlError>
      break;
 800dd70:	e000      	b.n	800dd74 <USBD_StdEPReq+0x330>
      break;
 800dd72:	bf00      	nop
  }

  return ret;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	885b      	ldrh	r3, [r3, #2]
 800dd9a:	0a1b      	lsrs	r3, r3, #8
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	2b0e      	cmp	r3, #14
 800dda2:	f200 8152 	bhi.w	800e04a <USBD_GetDescriptor+0x2ca>
 800dda6:	a201      	add	r2, pc, #4	; (adr r2, 800ddac <USBD_GetDescriptor+0x2c>)
 800dda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddac:	0800de1d 	.word	0x0800de1d
 800ddb0:	0800de35 	.word	0x0800de35
 800ddb4:	0800de75 	.word	0x0800de75
 800ddb8:	0800e04b 	.word	0x0800e04b
 800ddbc:	0800e04b 	.word	0x0800e04b
 800ddc0:	0800dfeb 	.word	0x0800dfeb
 800ddc4:	0800e017 	.word	0x0800e017
 800ddc8:	0800e04b 	.word	0x0800e04b
 800ddcc:	0800e04b 	.word	0x0800e04b
 800ddd0:	0800e04b 	.word	0x0800e04b
 800ddd4:	0800e04b 	.word	0x0800e04b
 800ddd8:	0800e04b 	.word	0x0800e04b
 800dddc:	0800e04b 	.word	0x0800e04b
 800dde0:	0800e04b 	.word	0x0800e04b
 800dde4:	0800dde9 	.word	0x0800dde9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddee:	69db      	ldr	r3, [r3, #28]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	7c12      	ldrb	r2, [r2, #16]
 800de00:	f107 0108 	add.w	r1, r7, #8
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de0a:	e126      	b.n	800e05a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fb27 	bl	800e462 <USBD_CtlError>
        err++;
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	3301      	adds	r3, #1
 800de18:	72fb      	strb	r3, [r7, #11]
      break;
 800de1a:	e11e      	b.n	800e05a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	7c12      	ldrb	r2, [r2, #16]
 800de28:	f107 0108 	add.w	r1, r7, #8
 800de2c:	4610      	mov	r0, r2
 800de2e:	4798      	blx	r3
 800de30:	60f8      	str	r0, [r7, #12]
      break;
 800de32:	e112      	b.n	800e05a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7c1b      	ldrb	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10d      	bne.n	800de58 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de44:	f107 0208 	add.w	r2, r7, #8
 800de48:	4610      	mov	r0, r2
 800de4a:	4798      	blx	r3
 800de4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3301      	adds	r3, #1
 800de52:	2202      	movs	r2, #2
 800de54:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800de56:	e100      	b.n	800e05a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de60:	f107 0208 	add.w	r2, r7, #8
 800de64:	4610      	mov	r0, r2
 800de66:	4798      	blx	r3
 800de68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3301      	adds	r3, #1
 800de6e:	2202      	movs	r2, #2
 800de70:	701a      	strb	r2, [r3, #0]
      break;
 800de72:	e0f2      	b.n	800e05a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	885b      	ldrh	r3, [r3, #2]
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	f200 80ac 	bhi.w	800dfd8 <USBD_GetDescriptor+0x258>
 800de80:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <USBD_GetDescriptor+0x108>)
 800de82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de86:	bf00      	nop
 800de88:	0800dea1 	.word	0x0800dea1
 800de8c:	0800ded5 	.word	0x0800ded5
 800de90:	0800df09 	.word	0x0800df09
 800de94:	0800df3d 	.word	0x0800df3d
 800de98:	0800df71 	.word	0x0800df71
 800de9c:	0800dfa5 	.word	0x0800dfa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	7c12      	ldrb	r2, [r2, #16]
 800deb8:	f107 0108 	add.w	r1, r7, #8
 800debc:	4610      	mov	r0, r2
 800debe:	4798      	blx	r3
 800dec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dec2:	e091      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 facb 	bl	800e462 <USBD_CtlError>
            err++;
 800decc:	7afb      	ldrb	r3, [r7, #11]
 800dece:	3301      	adds	r3, #1
 800ded0:	72fb      	strb	r3, [r7, #11]
          break;
 800ded2:	e089      	b.n	800dfe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00b      	beq.n	800def8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	7c12      	ldrb	r2, [r2, #16]
 800deec:	f107 0108 	add.w	r1, r7, #8
 800def0:	4610      	mov	r0, r2
 800def2:	4798      	blx	r3
 800def4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800def6:	e077      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800def8:	6839      	ldr	r1, [r7, #0]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fab1 	bl	800e462 <USBD_CtlError>
            err++;
 800df00:	7afb      	ldrb	r3, [r7, #11]
 800df02:	3301      	adds	r3, #1
 800df04:	72fb      	strb	r3, [r7, #11]
          break;
 800df06:	e06f      	b.n	800dfe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	7c12      	ldrb	r2, [r2, #16]
 800df20:	f107 0108 	add.w	r1, r7, #8
 800df24:	4610      	mov	r0, r2
 800df26:	4798      	blx	r3
 800df28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df2a:	e05d      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fa97 	bl	800e462 <USBD_CtlError>
            err++;
 800df34:	7afb      	ldrb	r3, [r7, #11]
 800df36:	3301      	adds	r3, #1
 800df38:	72fb      	strb	r3, [r7, #11]
          break;
 800df3a:	e055      	b.n	800dfe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00b      	beq.n	800df60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	7c12      	ldrb	r2, [r2, #16]
 800df54:	f107 0108 	add.w	r1, r7, #8
 800df58:	4610      	mov	r0, r2
 800df5a:	4798      	blx	r3
 800df5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df5e:	e043      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fa7d 	bl	800e462 <USBD_CtlError>
            err++;
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	3301      	adds	r3, #1
 800df6c:	72fb      	strb	r3, [r7, #11]
          break;
 800df6e:	e03b      	b.n	800dfe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	7c12      	ldrb	r2, [r2, #16]
 800df88:	f107 0108 	add.w	r1, r7, #8
 800df8c:	4610      	mov	r0, r2
 800df8e:	4798      	blx	r3
 800df90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df92:	e029      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fa63 	bl	800e462 <USBD_CtlError>
            err++;
 800df9c:	7afb      	ldrb	r3, [r7, #11]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfa2:	e021      	b.n	800dfe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb6:	699b      	ldr	r3, [r3, #24]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	7c12      	ldrb	r2, [r2, #16]
 800dfbc:	f107 0108 	add.w	r1, r7, #8
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfc6:	e00f      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa49 	bl	800e462 <USBD_CtlError>
            err++;
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfd6:	e007      	b.n	800dfe8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fa41 	bl	800e462 <USBD_CtlError>
          err++;
 800dfe0:	7afb      	ldrb	r3, [r7, #11]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dfe6:	bf00      	nop
      }
      break;
 800dfe8:	e037      	b.n	800e05a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	7c1b      	ldrb	r3, [r3, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d109      	bne.n	800e006 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	f107 0208 	add.w	r2, r7, #8
 800dffe:	4610      	mov	r0, r2
 800e000:	4798      	blx	r3
 800e002:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e004:	e029      	b.n	800e05a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fa2a 	bl	800e462 <USBD_CtlError>
        err++;
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	3301      	adds	r3, #1
 800e012:	72fb      	strb	r3, [r7, #11]
      break;
 800e014:	e021      	b.n	800e05a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7c1b      	ldrb	r3, [r3, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10d      	bne.n	800e03a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e026:	f107 0208 	add.w	r2, r7, #8
 800e02a:	4610      	mov	r0, r2
 800e02c:	4798      	blx	r3
 800e02e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3301      	adds	r3, #1
 800e034:	2207      	movs	r2, #7
 800e036:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e038:	e00f      	b.n	800e05a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fa10 	bl	800e462 <USBD_CtlError>
        err++;
 800e042:	7afb      	ldrb	r3, [r7, #11]
 800e044:	3301      	adds	r3, #1
 800e046:	72fb      	strb	r3, [r7, #11]
      break;
 800e048:	e007      	b.n	800e05a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fa08 	bl	800e462 <USBD_CtlError>
      err++;
 800e052:	7afb      	ldrb	r3, [r7, #11]
 800e054:	3301      	adds	r3, #1
 800e056:	72fb      	strb	r3, [r7, #11]
      break;
 800e058:	bf00      	nop
  }

  if (err != 0U)
 800e05a:	7afb      	ldrb	r3, [r7, #11]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d11e      	bne.n	800e09e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	88db      	ldrh	r3, [r3, #6]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d016      	beq.n	800e096 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e068:	893b      	ldrh	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00e      	beq.n	800e08c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	88da      	ldrh	r2, [r3, #6]
 800e072:	893b      	ldrh	r3, [r7, #8]
 800e074:	4293      	cmp	r3, r2
 800e076:	bf28      	it	cs
 800e078:	4613      	movcs	r3, r2
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e07e:	893b      	ldrh	r3, [r7, #8]
 800e080:	461a      	mov	r2, r3
 800e082:	68f9      	ldr	r1, [r7, #12]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fa5d 	bl	800e544 <USBD_CtlSendData>
 800e08a:	e009      	b.n	800e0a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f9e7 	bl	800e462 <USBD_CtlError>
 800e094:	e004      	b.n	800e0a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fa91 	bl	800e5be <USBD_CtlSendStatus>
 800e09c:	e000      	b.n	800e0a0 <USBD_GetDescriptor+0x320>
    return;
 800e09e:	bf00      	nop
  }
}
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop

0800e0a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	889b      	ldrh	r3, [r3, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d131      	bne.n	800e11e <USBD_SetAddress+0x76>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	88db      	ldrh	r3, [r3, #6]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d12d      	bne.n	800e11e <USBD_SetAddress+0x76>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	2b7f      	cmp	r3, #127	; 0x7f
 800e0c8:	d829      	bhi.n	800e11e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	885b      	ldrh	r3, [r3, #2]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	d104      	bne.n	800e0ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e0e2:	6839      	ldr	r1, [r7, #0]
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 f9bc 	bl	800e462 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ea:	e01d      	b.n	800e128 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	7bfa      	ldrb	r2, [r7, #15]
 800e0f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f003 fb14 	bl	8011726 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fa5d 	bl	800e5be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d004      	beq.n	800e114 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2202      	movs	r2, #2
 800e10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e112:	e009      	b.n	800e128 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e11c:	e004      	b.n	800e128 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f99e 	bl	800e462 <USBD_CtlError>
  }
}
 800e126:	bf00      	nop
 800e128:	bf00      	nop
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	885b      	ldrh	r3, [r3, #2]
 800e142:	b2da      	uxtb	r2, r3
 800e144:	4b4e      	ldr	r3, [pc, #312]	; (800e280 <USBD_SetConfig+0x150>)
 800e146:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e148:	4b4d      	ldr	r3, [pc, #308]	; (800e280 <USBD_SetConfig+0x150>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d905      	bls.n	800e15c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e150:	6839      	ldr	r1, [r7, #0]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f985 	bl	800e462 <USBD_CtlError>
    return USBD_FAIL;
 800e158:	2303      	movs	r3, #3
 800e15a:	e08c      	b.n	800e276 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b02      	cmp	r3, #2
 800e166:	d002      	beq.n	800e16e <USBD_SetConfig+0x3e>
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d029      	beq.n	800e1c0 <USBD_SetConfig+0x90>
 800e16c:	e075      	b.n	800e25a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e16e:	4b44      	ldr	r3, [pc, #272]	; (800e280 <USBD_SetConfig+0x150>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d020      	beq.n	800e1b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e176:	4b42      	ldr	r3, [pc, #264]	; (800e280 <USBD_SetConfig+0x150>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	461a      	mov	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e180:	4b3f      	ldr	r3, [pc, #252]	; (800e280 <USBD_SetConfig+0x150>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7fe ffbc 	bl	800d104 <USBD_SetClassConfig>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d008      	beq.n	800e1a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e196:	6839      	ldr	r1, [r7, #0]
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f962 	bl	800e462 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e1a6:	e065      	b.n	800e274 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fa08 	bl	800e5be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2203      	movs	r2, #3
 800e1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e1b6:	e05d      	b.n	800e274 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fa00 	bl	800e5be <USBD_CtlSendStatus>
      break;
 800e1be:	e059      	b.n	800e274 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e1c0:	4b2f      	ldr	r3, [pc, #188]	; (800e280 <USBD_SetConfig+0x150>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d112      	bne.n	800e1ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e1d0:	4b2b      	ldr	r3, [pc, #172]	; (800e280 <USBD_SetConfig+0x150>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e1da:	4b29      	ldr	r3, [pc, #164]	; (800e280 <USBD_SetConfig+0x150>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7fe ffab 	bl	800d13c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f9e9 	bl	800e5be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e1ec:	e042      	b.n	800e274 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e1ee:	4b24      	ldr	r3, [pc, #144]	; (800e280 <USBD_SetConfig+0x150>)
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d02a      	beq.n	800e252 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7fe ff99 	bl	800d13c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e20a:	4b1d      	ldr	r3, [pc, #116]	; (800e280 <USBD_SetConfig+0x150>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	461a      	mov	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e214:	4b1a      	ldr	r3, [pc, #104]	; (800e280 <USBD_SetConfig+0x150>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7fe ff72 	bl	800d104 <USBD_SetClassConfig>
 800e220:	4603      	mov	r3, r0
 800e222:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e224:	7bfb      	ldrb	r3, [r7, #15]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00f      	beq.n	800e24a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f918 	bl	800e462 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	b2db      	uxtb	r3, r3
 800e238:	4619      	mov	r1, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7fe ff7e 	bl	800d13c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2202      	movs	r2, #2
 800e244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e248:	e014      	b.n	800e274 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f9b7 	bl	800e5be <USBD_CtlSendStatus>
      break;
 800e250:	e010      	b.n	800e274 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f9b3 	bl	800e5be <USBD_CtlSendStatus>
      break;
 800e258:	e00c      	b.n	800e274 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f900 	bl	800e462 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e262:	4b07      	ldr	r3, [pc, #28]	; (800e280 <USBD_SetConfig+0x150>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7fe ff67 	bl	800d13c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e26e:	2303      	movs	r3, #3
 800e270:	73fb      	strb	r3, [r7, #15]
      break;
 800e272:	bf00      	nop
  }

  return ret;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	20000984 	.word	0x20000984

0800e284 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	88db      	ldrh	r3, [r3, #6]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d004      	beq.n	800e2a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f8e2 	bl	800e462 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e29e:	e023      	b.n	800e2e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	dc02      	bgt.n	800e2b2 <USBD_GetConfig+0x2e>
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	dc03      	bgt.n	800e2b8 <USBD_GetConfig+0x34>
 800e2b0:	e015      	b.n	800e2de <USBD_GetConfig+0x5a>
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d00b      	beq.n	800e2ce <USBD_GetConfig+0x4a>
 800e2b6:	e012      	b.n	800e2de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f93c 	bl	800e544 <USBD_CtlSendData>
        break;
 800e2cc:	e00c      	b.n	800e2e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f934 	bl	800e544 <USBD_CtlSendData>
        break;
 800e2dc:	e004      	b.n	800e2e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f8be 	bl	800e462 <USBD_CtlError>
        break;
 800e2e6:	bf00      	nop
}
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e300:	b2db      	uxtb	r3, r3
 800e302:	3b01      	subs	r3, #1
 800e304:	2b02      	cmp	r3, #2
 800e306:	d81e      	bhi.n	800e346 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	88db      	ldrh	r3, [r3, #6]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d004      	beq.n	800e31a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 f8a5 	bl	800e462 <USBD_CtlError>
        break;
 800e318:	e01a      	b.n	800e350 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e326:	2b00      	cmp	r3, #0
 800e328:	d005      	beq.n	800e336 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	f043 0202 	orr.w	r2, r3, #2
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	330c      	adds	r3, #12
 800e33a:	2202      	movs	r2, #2
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f900 	bl	800e544 <USBD_CtlSendData>
      break;
 800e344:	e004      	b.n	800e350 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f88a 	bl	800e462 <USBD_CtlError>
      break;
 800e34e:	bf00      	nop
  }
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	885b      	ldrh	r3, [r3, #2]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d107      	bne.n	800e37a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f923 	bl	800e5be <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e378:	e013      	b.n	800e3a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	885b      	ldrh	r3, [r3, #2]
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d10b      	bne.n	800e39a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	889b      	ldrh	r3, [r3, #4]
 800e386:	0a1b      	lsrs	r3, r3, #8
 800e388:	b29b      	uxth	r3, r3
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f913 	bl	800e5be <USBD_CtlSendStatus>
}
 800e398:	e003      	b.n	800e3a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f860 	bl	800e462 <USBD_CtlError>
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d80b      	bhi.n	800e3da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	885b      	ldrh	r3, [r3, #2]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d10c      	bne.n	800e3e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f8f3 	bl	800e5be <USBD_CtlSendStatus>
      }
      break;
 800e3d8:	e004      	b.n	800e3e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f840 	bl	800e462 <USBD_CtlError>
      break;
 800e3e2:	e000      	b.n	800e3e6 <USBD_ClrFeature+0x3c>
      break;
 800e3e4:	bf00      	nop
  }
}
 800e3e6:	bf00      	nop
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	781a      	ldrb	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3301      	adds	r3, #1
 800e408:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3301      	adds	r3, #1
 800e416:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f7ff fa16 	bl	800d84a <SWAPBYTE>
 800e41e:	4603      	mov	r3, r0
 800e420:	461a      	mov	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3301      	adds	r3, #1
 800e42a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3301      	adds	r3, #1
 800e430:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff fa09 	bl	800d84a <SWAPBYTE>
 800e438:	4603      	mov	r3, r0
 800e43a:	461a      	mov	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3301      	adds	r3, #1
 800e444:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	3301      	adds	r3, #1
 800e44a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7ff f9fc 	bl	800d84a <SWAPBYTE>
 800e452:	4603      	mov	r3, r0
 800e454:	461a      	mov	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	80da      	strh	r2, [r3, #6]
}
 800e45a:	bf00      	nop
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e46c:	2180      	movs	r1, #128	; 0x80
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f003 f8ef 	bl	8011652 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e474:	2100      	movs	r1, #0
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f003 f8eb 	bl	8011652 <USBD_LL_StallEP>
}
 800e47c:	bf00      	nop
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e490:	2300      	movs	r3, #0
 800e492:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d036      	beq.n	800e508 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e49e:	6938      	ldr	r0, [r7, #16]
 800e4a0:	f000 f836 	bl	800e510 <USBD_GetLen>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	7812      	ldrb	r2, [r2, #0]
 800e4bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	2203      	movs	r2, #3
 800e4cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e4d4:	e013      	b.n	800e4fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	4413      	add	r3, r2
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	7812      	ldrb	r2, [r2, #0]
 800e4e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	613b      	str	r3, [r7, #16]
    idx++;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800e4f8:	7dfb      	ldrb	r3, [r7, #23]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1e7      	bne.n	800e4d6 <USBD_GetString+0x52>
 800e506:	e000      	b.n	800e50a <USBD_GetString+0x86>
    return;
 800e508:	bf00      	nop
  }
}
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e518:	2300      	movs	r3, #0
 800e51a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e520:	e005      	b.n	800e52e <USBD_GetLen+0x1e>
  {
    len++;
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	3301      	adds	r3, #1
 800e526:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	3301      	adds	r3, #1
 800e52c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f5      	bne.n	800e522 <USBD_GetLen+0x12>
  }

  return len;
 800e536:	7bfb      	ldrb	r3, [r7, #15]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2202      	movs	r2, #2
 800e554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	2100      	movs	r1, #0
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f003 f8fa 	bl	8011764 <USBD_LL_Transmit>

  return USBD_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	af00      	add	r7, sp, #0
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	2100      	movs	r1, #0
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f003 f8e9 	bl	8011764 <USBD_LL_Transmit>

  return USBD_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f003 f8f9 	bl	80117a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2204      	movs	r2, #4
 800e5ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f003 f8c5 	bl	8011764 <USBD_LL_Transmit>

  return USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2205      	movs	r2, #5
 800e5f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f003 f8d3 	bl	80117a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4613      	mov	r3, r2
 800e618:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e61e:	2300      	movs	r3, #0
 800e620:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e622:	4b1f      	ldr	r3, [pc, #124]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e624:	7a5b      	ldrb	r3, [r3, #9]
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d131      	bne.n	800e690 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e62c:	4b1c      	ldr	r3, [pc, #112]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e62e:	7a5b      	ldrb	r3, [r3, #9]
 800e630:	b2db      	uxtb	r3, r3
 800e632:	461a      	mov	r2, r3
 800e634:	4b1a      	ldr	r3, [pc, #104]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e636:	2100      	movs	r1, #0
 800e638:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e63a:	4b19      	ldr	r3, [pc, #100]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e63c:	7a5b      	ldrb	r3, [r3, #9]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	4a17      	ldr	r2, [pc, #92]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e64a:	4b15      	ldr	r3, [pc, #84]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e64c:	7a5b      	ldrb	r3, [r3, #9]
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	461a      	mov	r2, r3
 800e652:	4b13      	ldr	r3, [pc, #76]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e654:	4413      	add	r3, r2
 800e656:	79fa      	ldrb	r2, [r7, #7]
 800e658:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e65a:	4b11      	ldr	r3, [pc, #68]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e65c:	7a5b      	ldrb	r3, [r3, #9]
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	b2d1      	uxtb	r1, r2
 800e664:	4a0e      	ldr	r2, [pc, #56]	; (800e6a0 <FATFS_LinkDriverEx+0x94>)
 800e666:	7251      	strb	r1, [r2, #9]
 800e668:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e66a:	7dbb      	ldrb	r3, [r7, #22]
 800e66c:	3330      	adds	r3, #48	; 0x30
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	3301      	adds	r3, #1
 800e678:	223a      	movs	r2, #58	; 0x3a
 800e67a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	3302      	adds	r3, #2
 800e680:	222f      	movs	r2, #47	; 0x2f
 800e682:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	3303      	adds	r3, #3
 800e688:	2200      	movs	r2, #0
 800e68a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e68c:	2300      	movs	r3, #0
 800e68e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e690:	7dfb      	ldrb	r3, [r7, #23]
}
 800e692:	4618      	mov	r0, r3
 800e694:	371c      	adds	r7, #28
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	20000988 	.word	0x20000988

0800e6a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff ffaa 	bl	800e60c <FATFS_LinkDriverEx>
 800e6b8:	4603      	mov	r3, r0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e6d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6d4:	2b84      	cmp	r3, #132	; 0x84
 800e6d6:	d005      	beq.n	800e6e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e6d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	4413      	add	r3, r2
 800e6e0:	3303      	adds	r3, #3
 800e6e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6f8:	f3ef 8305 	mrs	r3, IPSR
 800e6fc:	607b      	str	r3, [r7, #4]
  return(result);
 800e6fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e700:	2b00      	cmp	r3, #0
 800e702:	bf14      	ite	ne
 800e704:	2301      	movne	r3, #1
 800e706:	2300      	moveq	r3, #0
 800e708:	b2db      	uxtb	r3, r3
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	370c      	adds	r7, #12
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e71a:	f001 f973 	bl	800fa04 <vTaskStartScheduler>
  
  return osOK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	bd80      	pop	{r7, pc}

0800e724 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e728:	f001 fddc 	bl	80102e4 <xTaskGetSchedulerState>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d101      	bne.n	800e736 <osKernelRunning+0x12>
    return 0;
 800e732:	2300      	movs	r3, #0
 800e734:	e000      	b.n	800e738 <osKernelRunning+0x14>
  else
    return 1;
 800e736:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e738:	4618      	mov	r0, r3
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e740:	f7ff ffd7 	bl	800e6f2 <inHandlerMode>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e74a:	f001 fa85 	bl	800fc58 <xTaskGetTickCountFromISR>
 800e74e:	4603      	mov	r3, r0
 800e750:	e002      	b.n	800e758 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e752:	f001 fa71 	bl	800fc38 <xTaskGetTickCount>
 800e756:	4603      	mov	r3, r0
  }
}
 800e758:	4618      	mov	r0, r3
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75e:	b089      	sub	sp, #36	; 0x24
 800e760:	af04      	add	r7, sp, #16
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d020      	beq.n	800e7b0 <osThreadCreate+0x54>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	699b      	ldr	r3, [r3, #24]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d01c      	beq.n	800e7b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685c      	ldr	r4, [r3, #4]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681d      	ldr	r5, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691e      	ldr	r6, [r3, #16]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff ff9a 	bl	800e6c2 <makeFreeRtosPriority>
 800e78e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e798:	9202      	str	r2, [sp, #8]
 800e79a:	9301      	str	r3, [sp, #4]
 800e79c:	9100      	str	r1, [sp, #0]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	4632      	mov	r2, r6
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f000 ff39 	bl	800f61c <xTaskCreateStatic>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	60fb      	str	r3, [r7, #12]
 800e7ae:	e01c      	b.n	800e7ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685c      	ldr	r4, [r3, #4]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e7bc:	b29e      	uxth	r6, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff ff7c 	bl	800e6c2 <makeFreeRtosPriority>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	f107 030c 	add.w	r3, r7, #12
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	9200      	str	r2, [sp, #0]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f000 ff81 	bl	800f6e2 <xTaskCreate>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d001      	beq.n	800e7ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e000      	b.n	800e7ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <osDelay+0x16>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	e000      	b.n	800e80c <osDelay+0x18>
 800e80a:	2301      	movs	r3, #1
 800e80c:	4618      	mov	r0, r3
 800e80e:	f001 f8c3 	bl	800f998 <vTaskDelay>
  
  return osOK;
 800e812:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e81c:	b590      	push	{r4, r7, lr}
 800e81e:	b085      	sub	sp, #20
 800e820:	af02      	add	r7, sp, #8
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d011      	beq.n	800e852 <osMessageCreate+0x36>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6818      	ldr	r0, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6859      	ldr	r1, [r3, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	2400      	movs	r4, #0
 800e848:	9400      	str	r4, [sp, #0]
 800e84a:	f000 f9e1 	bl	800ec10 <xQueueGenericCreateStatic>
 800e84e:	4603      	mov	r3, r0
 800e850:	e008      	b.n	800e864 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6818      	ldr	r0, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	4619      	mov	r1, r3
 800e85e:	f000 fa59 	bl	800ed14 <xQueueGenericCreate>
 800e862:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd90      	pop	{r4, r7, pc}

0800e86c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e878:	2300      	movs	r3, #0
 800e87a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <osMessagePut+0x1e>
    ticks = 1;
 800e886:	2301      	movs	r3, #1
 800e888:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e88a:	f7ff ff32 	bl	800e6f2 <inHandlerMode>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d018      	beq.n	800e8c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e894:	f107 0210 	add.w	r2, r7, #16
 800e898:	f107 0108 	add.w	r1, r7, #8
 800e89c:	2300      	movs	r3, #0
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f000 fba0 	bl	800efe4 <xQueueGenericSendFromISR>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d001      	beq.n	800e8ae <osMessagePut+0x42>
      return osErrorOS;
 800e8aa:	23ff      	movs	r3, #255	; 0xff
 800e8ac:	e018      	b.n	800e8e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d014      	beq.n	800e8de <osMessagePut+0x72>
 800e8b4:	4b0c      	ldr	r3, [pc, #48]	; (800e8e8 <osMessagePut+0x7c>)
 800e8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	e00b      	b.n	800e8de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e8c6:	f107 0108 	add.w	r1, r7, #8
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	697a      	ldr	r2, [r7, #20]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 fa82 	bl	800edd8 <xQueueGenericSend>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d001      	beq.n	800e8de <osMessagePut+0x72>
      return osErrorOS;
 800e8da:	23ff      	movs	r3, #255	; 0xff
 800e8dc:	e000      	b.n	800e8e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	e000ed04 	.word	0xe000ed04

0800e8ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e8ec:	b590      	push	{r4, r7, lr}
 800e8ee:	b08b      	sub	sp, #44	; 0x2c
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10a      	bne.n	800e91c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e906:	2380      	movs	r3, #128	; 0x80
 800e908:	617b      	str	r3, [r7, #20]
    return event;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	461c      	mov	r4, r3
 800e90e:	f107 0314 	add.w	r3, r7, #20
 800e912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e91a:	e054      	b.n	800e9c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e91c:	2300      	movs	r3, #0
 800e91e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92a:	d103      	bne.n	800e934 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e92c:	f04f 33ff 	mov.w	r3, #4294967295
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
 800e932:	e009      	b.n	800e948 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d006      	beq.n	800e948 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <osMessageGet+0x5c>
      ticks = 1;
 800e944:	2301      	movs	r3, #1
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e948:	f7ff fed3 	bl	800e6f2 <inHandlerMode>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d01c      	beq.n	800e98c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e952:	f107 0220 	add.w	r2, r7, #32
 800e956:	f107 0314 	add.w	r3, r7, #20
 800e95a:	3304      	adds	r3, #4
 800e95c:	4619      	mov	r1, r3
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	f000 fcc6 	bl	800f2f0 <xQueueReceiveFromISR>
 800e964:	4603      	mov	r3, r0
 800e966:	2b01      	cmp	r3, #1
 800e968:	d102      	bne.n	800e970 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e96a:	2310      	movs	r3, #16
 800e96c:	617b      	str	r3, [r7, #20]
 800e96e:	e001      	b.n	800e974 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e970:	2300      	movs	r3, #0
 800e972:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d01d      	beq.n	800e9b6 <osMessageGet+0xca>
 800e97a:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <osMessageGet+0xe4>)
 800e97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e980:	601a      	str	r2, [r3, #0]
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	e014      	b.n	800e9b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e98c:	f107 0314 	add.w	r3, r7, #20
 800e990:	3304      	adds	r3, #4
 800e992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e994:	4619      	mov	r1, r3
 800e996:	68b8      	ldr	r0, [r7, #8]
 800e998:	f000 fbc4 	bl	800f124 <xQueueReceive>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d102      	bne.n	800e9a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e9a2:	2310      	movs	r3, #16
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	e006      	b.n	800e9b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d101      	bne.n	800e9b2 <osMessageGet+0xc6>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e000      	b.n	800e9b4 <osMessageGet+0xc8>
 800e9b2:	2340      	movs	r3, #64	; 0x40
 800e9b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	461c      	mov	r4, r3
 800e9ba:	f107 0314 	add.w	r3, r7, #20
 800e9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	372c      	adds	r7, #44	; 0x2c
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd90      	pop	{r4, r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	e000ed04 	.word	0xe000ed04

0800e9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f103 0208 	add.w	r2, r3, #8
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f103 0208 	add.w	r2, r3, #8
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 0208 	add.w	r2, r3, #8
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea22:	bf00      	nop
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b085      	sub	sp, #20
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
 800ea36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	689a      	ldr	r2, [r3, #8]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	683a      	ldr	r2, [r7, #0]
 800ea52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	601a      	str	r2, [r3, #0]
}
 800ea6a:	bf00      	nop
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea76:	b480      	push	{r7}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8c:	d103      	bne.n	800ea96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e00c      	b.n	800eab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	e002      	b.n	800eaa4 <vListInsert+0x2e>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d2f6      	bcs.n	800ea9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	1c5a      	adds	r2, r3, #1
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	601a      	str	r2, [r3, #0]
}
 800eadc:	bf00      	nop
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	6892      	ldr	r2, [r2, #8]
 800eafe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	6852      	ldr	r2, [r2, #4]
 800eb08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d103      	bne.n	800eb1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	689a      	ldr	r2, [r3, #8]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	1e5a      	subs	r2, r3, #1
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10c      	bne.n	800eb6a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	b672      	cpsid	i
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	b662      	cpsie	i
 800eb64:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eb66:	bf00      	nop
 800eb68:	e7fe      	b.n	800eb68 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800eb6a:	f001 fdd7 	bl	801071c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb76:	68f9      	ldr	r1, [r7, #12]
 800eb78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb7a:	fb01 f303 	mul.w	r3, r1, r3
 800eb7e:	441a      	add	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	68f9      	ldr	r1, [r7, #12]
 800eb9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eba0:	fb01 f303 	mul.w	r3, r1, r3
 800eba4:	441a      	add	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	22ff      	movs	r2, #255	; 0xff
 800ebae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	22ff      	movs	r2, #255	; 0xff
 800ebb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d114      	bne.n	800ebea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d01a      	beq.n	800ebfe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3310      	adds	r3, #16
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f001 f9bf 	bl	800ff50 <xTaskRemoveFromEventList>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d012      	beq.n	800ebfe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ebd8:	4b0c      	ldr	r3, [pc, #48]	; (800ec0c <xQueueGenericReset+0xd0>)
 800ebda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebde:	601a      	str	r2, [r3, #0]
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	e009      	b.n	800ebfe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3310      	adds	r3, #16
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff fef0 	bl	800e9d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3324      	adds	r3, #36	; 0x24
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff feeb 	bl	800e9d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ebfe:	f001 fdc1 	bl	8010784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec02:	2301      	movs	r3, #1
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	e000ed04 	.word	0xe000ed04

0800ec10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08e      	sub	sp, #56	; 0x38
 800ec14:	af02      	add	r7, sp, #8
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
 800ec1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10c      	bne.n	800ec3e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	b672      	cpsid	i
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	b662      	cpsie	i
 800ec38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec3a:	bf00      	nop
 800ec3c:	e7fe      	b.n	800ec3c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10c      	bne.n	800ec5e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec48:	b672      	cpsid	i
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	b662      	cpsie	i
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec5a:	bf00      	nop
 800ec5c:	e7fe      	b.n	800ec5c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <xQueueGenericCreateStatic+0x5a>
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <xQueueGenericCreateStatic+0x5e>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <xQueueGenericCreateStatic+0x60>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10c      	bne.n	800ec8e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	b672      	cpsid	i
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	b662      	cpsie	i
 800ec88:	623b      	str	r3, [r7, #32]
}
 800ec8a:	bf00      	nop
 800ec8c:	e7fe      	b.n	800ec8c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <xQueueGenericCreateStatic+0x8a>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <xQueueGenericCreateStatic+0x8e>
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e000      	b.n	800eca0 <xQueueGenericCreateStatic+0x90>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10c      	bne.n	800ecbe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800eca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca8:	b672      	cpsid	i
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	b662      	cpsie	i
 800ecb8:	61fb      	str	r3, [r7, #28]
}
 800ecba:	bf00      	nop
 800ecbc:	e7fe      	b.n	800ecbc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ecbe:	2348      	movs	r3, #72	; 0x48
 800ecc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2b48      	cmp	r3, #72	; 0x48
 800ecc6:	d00c      	beq.n	800ece2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	b672      	cpsid	i
 800ecce:	f383 8811 	msr	BASEPRI, r3
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	f3bf 8f4f 	dsb	sy
 800ecda:	b662      	cpsie	i
 800ecdc:	61bb      	str	r3, [r7, #24]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ece2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ece8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00d      	beq.n	800ed0a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ecfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	68b9      	ldr	r1, [r7, #8]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f000 f847 	bl	800ed98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3730      	adds	r7, #48	; 0x30
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08a      	sub	sp, #40	; 0x28
 800ed18:	af02      	add	r7, sp, #8
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10c      	bne.n	800ed42 <xQueueGenericCreate+0x2e>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	613b      	str	r3, [r7, #16]
}
 800ed3e:	bf00      	nop
 800ed40:	e7fe      	b.n	800ed40 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d102      	bne.n	800ed4e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61fb      	str	r3, [r7, #28]
 800ed4c:	e004      	b.n	800ed58 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	fb02 f303 	mul.w	r3, r2, r3
 800ed56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	3348      	adds	r3, #72	; 0x48
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 fe09 	bl	8010974 <pvPortMalloc>
 800ed62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d011      	beq.n	800ed8e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	3348      	adds	r3, #72	; 0x48
 800ed72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed7c:	79fa      	ldrb	r2, [r7, #7]
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	4613      	mov	r3, r2
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	68b9      	ldr	r1, [r7, #8]
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f000 f805 	bl	800ed98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed8e:	69bb      	ldr	r3, [r7, #24]
	}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3720      	adds	r7, #32
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d103      	bne.n	800edb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	e002      	b.n	800edba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800edc6:	2101      	movs	r1, #1
 800edc8:	69b8      	ldr	r0, [r7, #24]
 800edca:	f7ff feb7 	bl	800eb3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08e      	sub	sp, #56	; 0x38
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ede6:	2300      	movs	r3, #0
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10c      	bne.n	800ee0e <xQueueGenericSend+0x36>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	b672      	cpsid	i
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	b662      	cpsie	i
 800ee08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee0a:	bf00      	nop
 800ee0c:	e7fe      	b.n	800ee0c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d103      	bne.n	800ee1c <xQueueGenericSend+0x44>
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <xQueueGenericSend+0x48>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e000      	b.n	800ee22 <xQueueGenericSend+0x4a>
 800ee20:	2300      	movs	r3, #0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10c      	bne.n	800ee40 <xQueueGenericSend+0x68>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	b672      	cpsid	i
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	b662      	cpsie	i
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee3c:	bf00      	nop
 800ee3e:	e7fe      	b.n	800ee3e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d103      	bne.n	800ee4e <xQueueGenericSend+0x76>
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d101      	bne.n	800ee52 <xQueueGenericSend+0x7a>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <xQueueGenericSend+0x7c>
 800ee52:	2300      	movs	r3, #0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10c      	bne.n	800ee72 <xQueueGenericSend+0x9a>
	__asm volatile
 800ee58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5c:	b672      	cpsid	i
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	b662      	cpsie	i
 800ee6c:	623b      	str	r3, [r7, #32]
}
 800ee6e:	bf00      	nop
 800ee70:	e7fe      	b.n	800ee70 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee72:	f001 fa37 	bl	80102e4 <xTaskGetSchedulerState>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d102      	bne.n	800ee82 <xQueueGenericSend+0xaa>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <xQueueGenericSend+0xae>
 800ee82:	2301      	movs	r3, #1
 800ee84:	e000      	b.n	800ee88 <xQueueGenericSend+0xb0>
 800ee86:	2300      	movs	r3, #0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10c      	bne.n	800eea6 <xQueueGenericSend+0xce>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	b672      	cpsid	i
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	b662      	cpsie	i
 800eea0:	61fb      	str	r3, [r7, #28]
}
 800eea2:	bf00      	nop
 800eea4:	e7fe      	b.n	800eea4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eea6:	f001 fc39 	bl	801071c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d302      	bcc.n	800eebc <xQueueGenericSend+0xe4>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d129      	bne.n	800ef10 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	68b9      	ldr	r1, [r7, #8]
 800eec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eec2:	f000 fa9b 	bl	800f3fc <prvCopyDataToQueue>
 800eec6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d010      	beq.n	800eef2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	3324      	adds	r3, #36	; 0x24
 800eed4:	4618      	mov	r0, r3
 800eed6:	f001 f83b 	bl	800ff50 <xTaskRemoveFromEventList>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d013      	beq.n	800ef08 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eee0:	4b3f      	ldr	r3, [pc, #252]	; (800efe0 <xQueueGenericSend+0x208>)
 800eee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee6:	601a      	str	r2, [r3, #0]
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	e00a      	b.n	800ef08 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d007      	beq.n	800ef08 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eef8:	4b39      	ldr	r3, [pc, #228]	; (800efe0 <xQueueGenericSend+0x208>)
 800eefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eefe:	601a      	str	r2, [r3, #0]
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef08:	f001 fc3c 	bl	8010784 <vPortExitCritical>
				return pdPASS;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e063      	b.n	800efd8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d103      	bne.n	800ef1e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef16:	f001 fc35 	bl	8010784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	e05c      	b.n	800efd8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d106      	bne.n	800ef32 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef24:	f107 0314 	add.w	r3, r7, #20
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f001 f875 	bl	8010018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef32:	f001 fc27 	bl	8010784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef36:	f000 fdd3 	bl	800fae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef3a:	f001 fbef 	bl	801071c <vPortEnterCritical>
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef44:	b25b      	sxtb	r3, r3
 800ef46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4a:	d103      	bne.n	800ef54 <xQueueGenericSend+0x17c>
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef5a:	b25b      	sxtb	r3, r3
 800ef5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef60:	d103      	bne.n	800ef6a <xQueueGenericSend+0x192>
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef6a:	f001 fc0b 	bl	8010784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef6e:	1d3a      	adds	r2, r7, #4
 800ef70:	f107 0314 	add.w	r3, r7, #20
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f001 f864 	bl	8010044 <xTaskCheckForTimeOut>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d124      	bne.n	800efcc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef84:	f000 fb32 	bl	800f5ec <prvIsQueueFull>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d018      	beq.n	800efc0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	3310      	adds	r3, #16
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 ffb4 	bl	800ff04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef9e:	f000 fabd 	bl	800f51c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800efa2:	f000 fdab 	bl	800fafc <xTaskResumeAll>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f47f af7c 	bne.w	800eea6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800efae:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <xQueueGenericSend+0x208>)
 800efb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	f3bf 8f6f 	isb	sy
 800efbe:	e772      	b.n	800eea6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800efc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efc2:	f000 faab 	bl	800f51c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efc6:	f000 fd99 	bl	800fafc <xTaskResumeAll>
 800efca:	e76c      	b.n	800eea6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800efcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efce:	f000 faa5 	bl	800f51c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efd2:	f000 fd93 	bl	800fafc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800efd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3738      	adds	r7, #56	; 0x38
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	e000ed04 	.word	0xe000ed04

0800efe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08e      	sub	sp, #56	; 0x38
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10c      	bne.n	800f016 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f000:	b672      	cpsid	i
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	b662      	cpsie	i
 800f010:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f012:	bf00      	nop
 800f014:	e7fe      	b.n	800f014 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d103      	bne.n	800f024 <xQueueGenericSendFromISR+0x40>
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <xQueueGenericSendFromISR+0x44>
 800f024:	2301      	movs	r3, #1
 800f026:	e000      	b.n	800f02a <xQueueGenericSendFromISR+0x46>
 800f028:	2300      	movs	r3, #0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10c      	bne.n	800f048 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	b672      	cpsid	i
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	b662      	cpsie	i
 800f042:	623b      	str	r3, [r7, #32]
}
 800f044:	bf00      	nop
 800f046:	e7fe      	b.n	800f046 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d103      	bne.n	800f056 <xQueueGenericSendFromISR+0x72>
 800f04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f052:	2b01      	cmp	r3, #1
 800f054:	d101      	bne.n	800f05a <xQueueGenericSendFromISR+0x76>
 800f056:	2301      	movs	r3, #1
 800f058:	e000      	b.n	800f05c <xQueueGenericSendFromISR+0x78>
 800f05a:	2300      	movs	r3, #0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10c      	bne.n	800f07a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	b672      	cpsid	i
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	b662      	cpsie	i
 800f074:	61fb      	str	r3, [r7, #28]
}
 800f076:	bf00      	nop
 800f078:	e7fe      	b.n	800f078 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f07a:	f001 fc37 	bl	80108ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f07e:	f3ef 8211 	mrs	r2, BASEPRI
 800f082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f086:	b672      	cpsid	i
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	b662      	cpsie	i
 800f096:	61ba      	str	r2, [r7, #24]
 800f098:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f09a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f09c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d302      	bcc.n	800f0b0 <xQueueGenericSendFromISR+0xcc>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d12c      	bne.n	800f10a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0ba:	683a      	ldr	r2, [r7, #0]
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0c0:	f000 f99c 	bl	800f3fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f0c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0cc:	d112      	bne.n	800f0f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d016      	beq.n	800f104 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	3324      	adds	r3, #36	; 0x24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 ff38 	bl	800ff50 <xTaskRemoveFromEventList>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00e      	beq.n	800f104 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	e007      	b.n	800f104 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f0f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	b25a      	sxtb	r2, r3
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f104:	2301      	movs	r3, #1
 800f106:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f108:	e001      	b.n	800f10e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3738      	adds	r7, #56	; 0x38
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08c      	sub	sp, #48	; 0x30
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f130:	2300      	movs	r3, #0
 800f132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10c      	bne.n	800f158 <xQueueReceive+0x34>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f142:	b672      	cpsid	i
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	b662      	cpsie	i
 800f152:	623b      	str	r3, [r7, #32]
}
 800f154:	bf00      	nop
 800f156:	e7fe      	b.n	800f156 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d103      	bne.n	800f166 <xQueueReceive+0x42>
 800f15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <xQueueReceive+0x46>
 800f166:	2301      	movs	r3, #1
 800f168:	e000      	b.n	800f16c <xQueueReceive+0x48>
 800f16a:	2300      	movs	r3, #0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10c      	bne.n	800f18a <xQueueReceive+0x66>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	b672      	cpsid	i
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	b662      	cpsie	i
 800f184:	61fb      	str	r3, [r7, #28]
}
 800f186:	bf00      	nop
 800f188:	e7fe      	b.n	800f188 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f18a:	f001 f8ab 	bl	80102e4 <xTaskGetSchedulerState>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d102      	bne.n	800f19a <xQueueReceive+0x76>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <xQueueReceive+0x7a>
 800f19a:	2301      	movs	r3, #1
 800f19c:	e000      	b.n	800f1a0 <xQueueReceive+0x7c>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10c      	bne.n	800f1be <xQueueReceive+0x9a>
	__asm volatile
 800f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a8:	b672      	cpsid	i
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	b662      	cpsie	i
 800f1b8:	61bb      	str	r3, [r7, #24]
}
 800f1ba:	bf00      	nop
 800f1bc:	e7fe      	b.n	800f1bc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1be:	f001 faad 	bl	801071c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01f      	beq.n	800f20e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1ce:	68b9      	ldr	r1, [r7, #8]
 800f1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1d2:	f000 f97d 	bl	800f4d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	1e5a      	subs	r2, r3, #1
 800f1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00f      	beq.n	800f206 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e8:	3310      	adds	r3, #16
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 feb0 	bl	800ff50 <xTaskRemoveFromEventList>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d007      	beq.n	800f206 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f1f6:	4b3d      	ldr	r3, [pc, #244]	; (800f2ec <xQueueReceive+0x1c8>)
 800f1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f206:	f001 fabd 	bl	8010784 <vPortExitCritical>
				return pdPASS;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e069      	b.n	800f2e2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d103      	bne.n	800f21c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f214:	f001 fab6 	bl	8010784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f218:	2300      	movs	r3, #0
 800f21a:	e062      	b.n	800f2e2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f222:	f107 0310 	add.w	r3, r7, #16
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fef6 	bl	8010018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f230:	f001 faa8 	bl	8010784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f234:	f000 fc54 	bl	800fae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f238:	f001 fa70 	bl	801071c <vPortEnterCritical>
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f242:	b25b      	sxtb	r3, r3
 800f244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f248:	d103      	bne.n	800f252 <xQueueReceive+0x12e>
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f258:	b25b      	sxtb	r3, r3
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25e:	d103      	bne.n	800f268 <xQueueReceive+0x144>
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	2200      	movs	r2, #0
 800f264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f268:	f001 fa8c 	bl	8010784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f26c:	1d3a      	adds	r2, r7, #4
 800f26e:	f107 0310 	add.w	r3, r7, #16
 800f272:	4611      	mov	r1, r2
 800f274:	4618      	mov	r0, r3
 800f276:	f000 fee5 	bl	8010044 <xTaskCheckForTimeOut>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d123      	bne.n	800f2c8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f282:	f000 f99d 	bl	800f5c0 <prvIsQueueEmpty>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d017      	beq.n	800f2bc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28e:	3324      	adds	r3, #36	; 0x24
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	4611      	mov	r1, r2
 800f294:	4618      	mov	r0, r3
 800f296:	f000 fe35 	bl	800ff04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f29c:	f000 f93e 	bl	800f51c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2a0:	f000 fc2c 	bl	800fafc <xTaskResumeAll>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d189      	bne.n	800f1be <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f2aa:	4b10      	ldr	r3, [pc, #64]	; (800f2ec <xQueueReceive+0x1c8>)
 800f2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	e780      	b.n	800f1be <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2be:	f000 f92d 	bl	800f51c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2c2:	f000 fc1b 	bl	800fafc <xTaskResumeAll>
 800f2c6:	e77a      	b.n	800f1be <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ca:	f000 f927 	bl	800f51c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ce:	f000 fc15 	bl	800fafc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d4:	f000 f974 	bl	800f5c0 <prvIsQueueEmpty>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f43f af6f 	beq.w	800f1be <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3730      	adds	r7, #48	; 0x30
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	e000ed04 	.word	0xe000ed04

0800f2f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08e      	sub	sp, #56	; 0x38
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f302:	2b00      	cmp	r3, #0
 800f304:	d10c      	bne.n	800f320 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30a:	b672      	cpsid	i
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	b662      	cpsie	i
 800f31a:	623b      	str	r3, [r7, #32]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d103      	bne.n	800f32e <xQueueReceiveFromISR+0x3e>
 800f326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <xQueueReceiveFromISR+0x42>
 800f32e:	2301      	movs	r3, #1
 800f330:	e000      	b.n	800f334 <xQueueReceiveFromISR+0x44>
 800f332:	2300      	movs	r3, #0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10c      	bne.n	800f352 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	b672      	cpsid	i
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	b662      	cpsie	i
 800f34c:	61fb      	str	r3, [r7, #28]
}
 800f34e:	bf00      	nop
 800f350:	e7fe      	b.n	800f350 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f352:	f001 facb 	bl	80108ec <vPortValidateInterruptPriority>
	__asm volatile
 800f356:	f3ef 8211 	mrs	r2, BASEPRI
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	b672      	cpsid	i
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	b662      	cpsie	i
 800f36e:	61ba      	str	r2, [r7, #24]
 800f370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f37a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d02f      	beq.n	800f3e2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f390:	f000 f89e 	bl	800f4d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	1e5a      	subs	r2, r3, #1
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a4:	d112      	bne.n	800f3cc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d016      	beq.n	800f3dc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b0:	3310      	adds	r3, #16
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fdcc 	bl	800ff50 <xTaskRemoveFromEventList>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00e      	beq.n	800f3dc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e007      	b.n	800f3dc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	b25a      	sxtb	r2, r3
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e0:	e001      	b.n	800f3e6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	f383 8811 	msr	BASEPRI, r3
}
 800f3f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3738      	adds	r7, #56	; 0x38
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f408:	2300      	movs	r3, #0
 800f40a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10d      	bne.n	800f436 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d14d      	bne.n	800f4be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	4618      	mov	r0, r3
 800f428:	f000 ff7a 	bl	8010320 <xTaskPriorityDisinherit>
 800f42c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	609a      	str	r2, [r3, #8]
 800f434:	e043      	b.n	800f4be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d119      	bne.n	800f470 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6858      	ldr	r0, [r3, #4]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f444:	461a      	mov	r2, r3
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	f002 fa9e 	bl	8011988 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f454:	441a      	add	r2, r3
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	429a      	cmp	r2, r3
 800f464:	d32b      	bcc.n	800f4be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	605a      	str	r2, [r3, #4]
 800f46e:	e026      	b.n	800f4be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	68d8      	ldr	r0, [r3, #12]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f478:	461a      	mov	r2, r3
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	f002 fa84 	bl	8011988 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	68da      	ldr	r2, [r3, #12]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f488:	425b      	negs	r3, r3
 800f48a:	441a      	add	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	68da      	ldr	r2, [r3, #12]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d207      	bcs.n	800f4ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	689a      	ldr	r2, [r3, #8]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a4:	425b      	negs	r3, r3
 800f4a6:	441a      	add	r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	d105      	bne.n	800f4be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d002      	beq.n	800f4be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	1c5a      	adds	r2, r3, #1
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4c6:	697b      	ldr	r3, [r7, #20]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d018      	beq.n	800f514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68da      	ldr	r2, [r3, #12]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ea:	441a      	add	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68da      	ldr	r2, [r3, #12]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d303      	bcc.n	800f504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	68d9      	ldr	r1, [r3, #12]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50c:	461a      	mov	r2, r3
 800f50e:	6838      	ldr	r0, [r7, #0]
 800f510:	f002 fa3a 	bl	8011988 <memcpy>
	}
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f524:	f001 f8fa 	bl	801071c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f52e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f530:	e011      	b.n	800f556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f536:	2b00      	cmp	r3, #0
 800f538:	d012      	beq.n	800f560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	3324      	adds	r3, #36	; 0x24
 800f53e:	4618      	mov	r0, r3
 800f540:	f000 fd06 	bl	800ff50 <xTaskRemoveFromEventList>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f54a:	f000 fde1 	bl	8010110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
 800f550:	3b01      	subs	r3, #1
 800f552:	b2db      	uxtb	r3, r3
 800f554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	dce9      	bgt.n	800f532 <prvUnlockQueue+0x16>
 800f55e:	e000      	b.n	800f562 <prvUnlockQueue+0x46>
					break;
 800f560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	22ff      	movs	r2, #255	; 0xff
 800f566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f56a:	f001 f90b 	bl	8010784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f56e:	f001 f8d5 	bl	801071c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f57a:	e011      	b.n	800f5a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d012      	beq.n	800f5aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3310      	adds	r3, #16
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fce1 	bl	800ff50 <xTaskRemoveFromEventList>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f594:	f000 fdbc 	bl	8010110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f598:	7bbb      	ldrb	r3, [r7, #14]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	dce9      	bgt.n	800f57c <prvUnlockQueue+0x60>
 800f5a8:	e000      	b.n	800f5ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f5aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	22ff      	movs	r2, #255	; 0xff
 800f5b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5b4:	f001 f8e6 	bl	8010784 <vPortExitCritical>
}
 800f5b8:	bf00      	nop
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5c8:	f001 f8a8 	bl	801071c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d102      	bne.n	800f5da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	60fb      	str	r3, [r7, #12]
 800f5d8:	e001      	b.n	800f5de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5de:	f001 f8d1 	bl	8010784 <vPortExitCritical>

	return xReturn;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3710      	adds	r7, #16
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5f4:	f001 f892 	bl	801071c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f600:	429a      	cmp	r2, r3
 800f602:	d102      	bne.n	800f60a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f604:	2301      	movs	r3, #1
 800f606:	60fb      	str	r3, [r7, #12]
 800f608:	e001      	b.n	800f60e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f60a:	2300      	movs	r3, #0
 800f60c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f60e:	f001 f8b9 	bl	8010784 <vPortExitCritical>

	return xReturn;
 800f612:	68fb      	ldr	r3, [r7, #12]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08e      	sub	sp, #56	; 0x38
 800f620:	af04      	add	r7, sp, #16
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
 800f628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10c      	bne.n	800f64a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	b672      	cpsid	i
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	b662      	cpsie	i
 800f644:	623b      	str	r3, [r7, #32]
}
 800f646:	bf00      	nop
 800f648:	e7fe      	b.n	800f648 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10c      	bne.n	800f66a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	b672      	cpsid	i
 800f656:	f383 8811 	msr	BASEPRI, r3
 800f65a:	f3bf 8f6f 	isb	sy
 800f65e:	f3bf 8f4f 	dsb	sy
 800f662:	b662      	cpsie	i
 800f664:	61fb      	str	r3, [r7, #28]
}
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f66a:	23b8      	movs	r3, #184	; 0xb8
 800f66c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2bb8      	cmp	r3, #184	; 0xb8
 800f672:	d00c      	beq.n	800f68e <xTaskCreateStatic+0x72>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	b672      	cpsid	i
 800f67a:	f383 8811 	msr	BASEPRI, r3
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f3bf 8f4f 	dsb	sy
 800f686:	b662      	cpsie	i
 800f688:	61bb      	str	r3, [r7, #24]
}
 800f68a:	bf00      	nop
 800f68c:	e7fe      	b.n	800f68c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f68e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01e      	beq.n	800f6d4 <xTaskCreateStatic+0xb8>
 800f696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01b      	beq.n	800f6d4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	9303      	str	r3, [sp, #12]
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	9302      	str	r3, [sp, #8]
 800f6b6:	f107 0314 	add.w	r3, r7, #20
 800f6ba:	9301      	str	r3, [sp, #4]
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	68b9      	ldr	r1, [r7, #8]
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f000 f850 	bl	800f76c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6ce:	f000 f8f9 	bl	800f8c4 <prvAddNewTaskToReadyList>
 800f6d2:	e001      	b.n	800f6d8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6d8:	697b      	ldr	r3, [r7, #20]
	}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3728      	adds	r7, #40	; 0x28
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b08c      	sub	sp, #48	; 0x30
 800f6e6:	af04      	add	r7, sp, #16
 800f6e8:	60f8      	str	r0, [r7, #12]
 800f6ea:	60b9      	str	r1, [r7, #8]
 800f6ec:	603b      	str	r3, [r7, #0]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6f2:	88fb      	ldrh	r3, [r7, #6]
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f001 f93c 	bl	8010974 <pvPortMalloc>
 800f6fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00e      	beq.n	800f722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f704:	20b8      	movs	r0, #184	; 0xb8
 800f706:	f001 f935 	bl	8010974 <pvPortMalloc>
 800f70a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d003      	beq.n	800f71a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	631a      	str	r2, [r3, #48]	; 0x30
 800f718:	e005      	b.n	800f726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f71a:	6978      	ldr	r0, [r7, #20]
 800f71c:	f001 f9fa 	bl	8010b14 <vPortFree>
 800f720:	e001      	b.n	800f726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f722:	2300      	movs	r3, #0
 800f724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d017      	beq.n	800f75c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f734:	88fa      	ldrh	r2, [r7, #6]
 800f736:	2300      	movs	r3, #0
 800f738:	9303      	str	r3, [sp, #12]
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	9302      	str	r3, [sp, #8]
 800f73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f000 f80e 	bl	800f76c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f750:	69f8      	ldr	r0, [r7, #28]
 800f752:	f000 f8b7 	bl	800f8c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f756:	2301      	movs	r3, #1
 800f758:	61bb      	str	r3, [r7, #24]
 800f75a:	e002      	b.n	800f762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f75c:	f04f 33ff 	mov.w	r3, #4294967295
 800f760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f762:	69bb      	ldr	r3, [r7, #24]
	}
 800f764:	4618      	mov	r0, r3
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
 800f778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	461a      	mov	r2, r3
 800f784:	21a5      	movs	r1, #165	; 0xa5
 800f786:	f002 f90d 	bl	80119a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f794:	440b      	add	r3, r1
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	f023 0307 	bic.w	r3, r3, #7
 800f7a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	f003 0307 	and.w	r3, r3, #7
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00c      	beq.n	800f7c8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	b672      	cpsid	i
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	b662      	cpsie	i
 800f7c2:	617b      	str	r3, [r7, #20]
}
 800f7c4:	bf00      	nop
 800f7c6:	e7fe      	b.n	800f7c6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01f      	beq.n	800f80e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	61fb      	str	r3, [r7, #28]
 800f7d2:	e012      	b.n	800f7fa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	4413      	add	r3, r2
 800f7da:	7819      	ldrb	r1, [r3, #0]
 800f7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	3334      	adds	r3, #52	; 0x34
 800f7e4:	460a      	mov	r2, r1
 800f7e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d006      	beq.n	800f802 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	61fb      	str	r3, [r7, #28]
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	2b0f      	cmp	r3, #15
 800f7fe:	d9e9      	bls.n	800f7d4 <prvInitialiseNewTask+0x68>
 800f800:	e000      	b.n	800f804 <prvInitialiseNewTask+0x98>
			{
				break;
 800f802:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f80c:	e003      	b.n	800f816 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	2200      	movs	r2, #0
 800f812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	2b06      	cmp	r3, #6
 800f81a:	d901      	bls.n	800f820 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f81c:	2306      	movs	r3, #6
 800f81e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f824:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f82a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	2200      	movs	r2, #0
 800f830:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	3304      	adds	r3, #4
 800f836:	4618      	mov	r0, r3
 800f838:	f7ff f8ec 	bl	800ea14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	3318      	adds	r3, #24
 800f840:	4618      	mov	r0, r3
 800f842:	f7ff f8e7 	bl	800ea14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	f1c3 0207 	rsb	r2, r3, #7
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f85a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	2200      	movs	r2, #0
 800f860:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	2200      	movs	r2, #0
 800f866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	3350      	adds	r3, #80	; 0x50
 800f876:	2260      	movs	r2, #96	; 0x60
 800f878:	2100      	movs	r1, #0
 800f87a:	4618      	mov	r0, r3
 800f87c:	f002 f892 	bl	80119a4 <memset>
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	4a0d      	ldr	r2, [pc, #52]	; (800f8b8 <prvInitialiseNewTask+0x14c>)
 800f884:	655a      	str	r2, [r3, #84]	; 0x54
 800f886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f888:	4a0c      	ldr	r2, [pc, #48]	; (800f8bc <prvInitialiseNewTask+0x150>)
 800f88a:	659a      	str	r2, [r3, #88]	; 0x58
 800f88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88e:	4a0c      	ldr	r2, [pc, #48]	; (800f8c0 <prvInitialiseNewTask+0x154>)
 800f890:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f892:	683a      	ldr	r2, [r7, #0]
 800f894:	68f9      	ldr	r1, [r7, #12]
 800f896:	69b8      	ldr	r0, [r7, #24]
 800f898:	f000 fe32 	bl	8010500 <pxPortInitialiseStack>
 800f89c:	4602      	mov	r2, r0
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ae:	bf00      	nop
 800f8b0:	3720      	adds	r7, #32
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08011d94 	.word	0x08011d94
 800f8bc:	08011db4 	.word	0x08011db4
 800f8c0:	08011d74 	.word	0x08011d74

0800f8c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8cc:	f000 ff26 	bl	801071c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8d0:	4b2a      	ldr	r3, [pc, #168]	; (800f97c <prvAddNewTaskToReadyList+0xb8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	4a29      	ldr	r2, [pc, #164]	; (800f97c <prvAddNewTaskToReadyList+0xb8>)
 800f8d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8da:	4b29      	ldr	r3, [pc, #164]	; (800f980 <prvAddNewTaskToReadyList+0xbc>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d109      	bne.n	800f8f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8e2:	4a27      	ldr	r2, [pc, #156]	; (800f980 <prvAddNewTaskToReadyList+0xbc>)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8e8:	4b24      	ldr	r3, [pc, #144]	; (800f97c <prvAddNewTaskToReadyList+0xb8>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d110      	bne.n	800f912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8f0:	f000 fc34 	bl	801015c <prvInitialiseTaskLists>
 800f8f4:	e00d      	b.n	800f912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8f6:	4b23      	ldr	r3, [pc, #140]	; (800f984 <prvAddNewTaskToReadyList+0xc0>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d109      	bne.n	800f912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8fe:	4b20      	ldr	r3, [pc, #128]	; (800f980 <prvAddNewTaskToReadyList+0xbc>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f908:	429a      	cmp	r2, r3
 800f90a:	d802      	bhi.n	800f912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f90c:	4a1c      	ldr	r2, [pc, #112]	; (800f980 <prvAddNewTaskToReadyList+0xbc>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f912:	4b1d      	ldr	r3, [pc, #116]	; (800f988 <prvAddNewTaskToReadyList+0xc4>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3301      	adds	r3, #1
 800f918:	4a1b      	ldr	r2, [pc, #108]	; (800f988 <prvAddNewTaskToReadyList+0xc4>)
 800f91a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f920:	2201      	movs	r2, #1
 800f922:	409a      	lsls	r2, r3
 800f924:	4b19      	ldr	r3, [pc, #100]	; (800f98c <prvAddNewTaskToReadyList+0xc8>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4313      	orrs	r3, r2
 800f92a:	4a18      	ldr	r2, [pc, #96]	; (800f98c <prvAddNewTaskToReadyList+0xc8>)
 800f92c:	6013      	str	r3, [r2, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f932:	4613      	mov	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	4a15      	ldr	r2, [pc, #84]	; (800f990 <prvAddNewTaskToReadyList+0xcc>)
 800f93c:	441a      	add	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3304      	adds	r3, #4
 800f942:	4619      	mov	r1, r3
 800f944:	4610      	mov	r0, r2
 800f946:	f7ff f872 	bl	800ea2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f94a:	f000 ff1b 	bl	8010784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f94e:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <prvAddNewTaskToReadyList+0xc0>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00e      	beq.n	800f974 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f956:	4b0a      	ldr	r3, [pc, #40]	; (800f980 <prvAddNewTaskToReadyList+0xbc>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f960:	429a      	cmp	r2, r3
 800f962:	d207      	bcs.n	800f974 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f964:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <prvAddNewTaskToReadyList+0xd0>)
 800f966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f96a:	601a      	str	r2, [r3, #0]
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	20000a94 	.word	0x20000a94
 800f980:	20000994 	.word	0x20000994
 800f984:	20000aa0 	.word	0x20000aa0
 800f988:	20000ab0 	.word	0x20000ab0
 800f98c:	20000a9c 	.word	0x20000a9c
 800f990:	20000998 	.word	0x20000998
 800f994:	e000ed04 	.word	0xe000ed04

0800f998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d019      	beq.n	800f9de <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9aa:	4b14      	ldr	r3, [pc, #80]	; (800f9fc <vTaskDelay+0x64>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00c      	beq.n	800f9cc <vTaskDelay+0x34>
	__asm volatile
 800f9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b6:	b672      	cpsid	i
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	b662      	cpsie	i
 800f9c6:	60bb      	str	r3, [r7, #8]
}
 800f9c8:	bf00      	nop
 800f9ca:	e7fe      	b.n	800f9ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f9cc:	f000 f888 	bl	800fae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fd2e 	bl	8010434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9d8:	f000 f890 	bl	800fafc <xTaskResumeAll>
 800f9dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d107      	bne.n	800f9f4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f9e4:	4b06      	ldr	r3, [pc, #24]	; (800fa00 <vTaskDelay+0x68>)
 800f9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	20000abc 	.word	0x20000abc
 800fa00:	e000ed04 	.word	0xe000ed04

0800fa04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	; 0x28
 800fa08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa12:	463a      	mov	r2, r7
 800fa14:	1d39      	adds	r1, r7, #4
 800fa16:	f107 0308 	add.w	r3, r7, #8
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f0 fd94 	bl	8000548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa20:	6839      	ldr	r1, [r7, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	9202      	str	r2, [sp, #8]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	460a      	mov	r2, r1
 800fa32:	4923      	ldr	r1, [pc, #140]	; (800fac0 <vTaskStartScheduler+0xbc>)
 800fa34:	4823      	ldr	r0, [pc, #140]	; (800fac4 <vTaskStartScheduler+0xc0>)
 800fa36:	f7ff fdf1 	bl	800f61c <xTaskCreateStatic>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4a22      	ldr	r2, [pc, #136]	; (800fac8 <vTaskStartScheduler+0xc4>)
 800fa3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa40:	4b21      	ldr	r3, [pc, #132]	; (800fac8 <vTaskStartScheduler+0xc4>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	e001      	b.n	800fa52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d11d      	bne.n	800fa94 <vTaskStartScheduler+0x90>
	__asm volatile
 800fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5c:	b672      	cpsid	i
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	b662      	cpsie	i
 800fa6c:	613b      	str	r3, [r7, #16]
}
 800fa6e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa70:	4b16      	ldr	r3, [pc, #88]	; (800facc <vTaskStartScheduler+0xc8>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3350      	adds	r3, #80	; 0x50
 800fa76:	4a16      	ldr	r2, [pc, #88]	; (800fad0 <vTaskStartScheduler+0xcc>)
 800fa78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa7a:	4b16      	ldr	r3, [pc, #88]	; (800fad4 <vTaskStartScheduler+0xd0>)
 800fa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa82:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <vTaskStartScheduler+0xd4>)
 800fa84:	2201      	movs	r2, #1
 800fa86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa88:	4b14      	ldr	r3, [pc, #80]	; (800fadc <vTaskStartScheduler+0xd8>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa8e:	f000 fdc7 	bl	8010620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa92:	e010      	b.n	800fab6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa9a:	d10c      	bne.n	800fab6 <vTaskStartScheduler+0xb2>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa0:	b672      	cpsid	i
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	b662      	cpsie	i
 800fab0:	60fb      	str	r3, [r7, #12]
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <vTaskStartScheduler+0xb0>
}
 800fab6:	bf00      	nop
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	08011cd0 	.word	0x08011cd0
 800fac4:	08010129 	.word	0x08010129
 800fac8:	20000ab8 	.word	0x20000ab8
 800facc:	20000994 	.word	0x20000994
 800fad0:	20000138 	.word	0x20000138
 800fad4:	20000ab4 	.word	0x20000ab4
 800fad8:	20000aa0 	.word	0x20000aa0
 800fadc:	20000a98 	.word	0x20000a98

0800fae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fae0:	b480      	push	{r7}
 800fae2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fae4:	4b04      	ldr	r3, [pc, #16]	; (800faf8 <vTaskSuspendAll+0x18>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3301      	adds	r3, #1
 800faea:	4a03      	ldr	r2, [pc, #12]	; (800faf8 <vTaskSuspendAll+0x18>)
 800faec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800faee:	bf00      	nop
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	20000abc 	.word	0x20000abc

0800fafc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb06:	2300      	movs	r3, #0
 800fb08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb0a:	4b42      	ldr	r3, [pc, #264]	; (800fc14 <xTaskResumeAll+0x118>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d10c      	bne.n	800fb2c <xTaskResumeAll+0x30>
	__asm volatile
 800fb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb16:	b672      	cpsid	i
 800fb18:	f383 8811 	msr	BASEPRI, r3
 800fb1c:	f3bf 8f6f 	isb	sy
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	b662      	cpsie	i
 800fb26:	603b      	str	r3, [r7, #0]
}
 800fb28:	bf00      	nop
 800fb2a:	e7fe      	b.n	800fb2a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb2c:	f000 fdf6 	bl	801071c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb30:	4b38      	ldr	r3, [pc, #224]	; (800fc14 <xTaskResumeAll+0x118>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	4a37      	ldr	r2, [pc, #220]	; (800fc14 <xTaskResumeAll+0x118>)
 800fb38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb3a:	4b36      	ldr	r3, [pc, #216]	; (800fc14 <xTaskResumeAll+0x118>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d161      	bne.n	800fc06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb42:	4b35      	ldr	r3, [pc, #212]	; (800fc18 <xTaskResumeAll+0x11c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d05d      	beq.n	800fc06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb4a:	e02e      	b.n	800fbaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb4c:	4b33      	ldr	r3, [pc, #204]	; (800fc1c <xTaskResumeAll+0x120>)
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	3318      	adds	r3, #24
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe ffc5 	bl	800eae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3304      	adds	r3, #4
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe ffc0 	bl	800eae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	409a      	lsls	r2, r3
 800fb70:	4b2b      	ldr	r3, [pc, #172]	; (800fc20 <xTaskResumeAll+0x124>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	4a2a      	ldr	r2, [pc, #168]	; (800fc20 <xTaskResumeAll+0x124>)
 800fb78:	6013      	str	r3, [r2, #0]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	4a27      	ldr	r2, [pc, #156]	; (800fc24 <xTaskResumeAll+0x128>)
 800fb88:	441a      	add	r2, r3
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4610      	mov	r0, r2
 800fb92:	f7fe ff4c 	bl	800ea2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9a:	4b23      	ldr	r3, [pc, #140]	; (800fc28 <xTaskResumeAll+0x12c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d302      	bcc.n	800fbaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fba4:	4b21      	ldr	r3, [pc, #132]	; (800fc2c <xTaskResumeAll+0x130>)
 800fba6:	2201      	movs	r2, #1
 800fba8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbaa:	4b1c      	ldr	r3, [pc, #112]	; (800fc1c <xTaskResumeAll+0x120>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1cc      	bne.n	800fb4c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbb8:	f000 fb74 	bl	80102a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fbbc:	4b1c      	ldr	r3, [pc, #112]	; (800fc30 <xTaskResumeAll+0x134>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d010      	beq.n	800fbea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbc8:	f000 f858 	bl	800fc7c <xTaskIncrementTick>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fbd2:	4b16      	ldr	r3, [pc, #88]	; (800fc2c <xTaskResumeAll+0x130>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1f1      	bne.n	800fbc8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800fbe4:	4b12      	ldr	r3, [pc, #72]	; (800fc30 <xTaskResumeAll+0x134>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbea:	4b10      	ldr	r3, [pc, #64]	; (800fc2c <xTaskResumeAll+0x130>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d009      	beq.n	800fc06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbf6:	4b0f      	ldr	r3, [pc, #60]	; (800fc34 <xTaskResumeAll+0x138>)
 800fbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc06:	f000 fdbd 	bl	8010784 <vPortExitCritical>

	return xAlreadyYielded;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20000abc 	.word	0x20000abc
 800fc18:	20000a94 	.word	0x20000a94
 800fc1c:	20000a54 	.word	0x20000a54
 800fc20:	20000a9c 	.word	0x20000a9c
 800fc24:	20000998 	.word	0x20000998
 800fc28:	20000994 	.word	0x20000994
 800fc2c:	20000aa8 	.word	0x20000aa8
 800fc30:	20000aa4 	.word	0x20000aa4
 800fc34:	e000ed04 	.word	0xe000ed04

0800fc38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc3e:	4b05      	ldr	r3, [pc, #20]	; (800fc54 <xTaskGetTickCount+0x1c>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc44:	687b      	ldr	r3, [r7, #4]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	20000a98 	.word	0x20000a98

0800fc58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc5e:	f000 fe45 	bl	80108ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc62:	2300      	movs	r3, #0
 800fc64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc66:	4b04      	ldr	r3, [pc, #16]	; (800fc78 <xTaskGetTickCountFromISR+0x20>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc6c:	683b      	ldr	r3, [r7, #0]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	20000a98 	.word	0x20000a98

0800fc7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc82:	2300      	movs	r3, #0
 800fc84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc86:	4b4f      	ldr	r3, [pc, #316]	; (800fdc4 <xTaskIncrementTick+0x148>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f040 808a 	bne.w	800fda4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc90:	4b4d      	ldr	r3, [pc, #308]	; (800fdc8 <xTaskIncrementTick+0x14c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3301      	adds	r3, #1
 800fc96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc98:	4a4b      	ldr	r2, [pc, #300]	; (800fdc8 <xTaskIncrementTick+0x14c>)
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d122      	bne.n	800fcea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fca4:	4b49      	ldr	r3, [pc, #292]	; (800fdcc <xTaskIncrementTick+0x150>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00c      	beq.n	800fcc8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb2:	b672      	cpsid	i
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	b662      	cpsie	i
 800fcc2:	603b      	str	r3, [r7, #0]
}
 800fcc4:	bf00      	nop
 800fcc6:	e7fe      	b.n	800fcc6 <xTaskIncrementTick+0x4a>
 800fcc8:	4b40      	ldr	r3, [pc, #256]	; (800fdcc <xTaskIncrementTick+0x150>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	4b40      	ldr	r3, [pc, #256]	; (800fdd0 <xTaskIncrementTick+0x154>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a3e      	ldr	r2, [pc, #248]	; (800fdcc <xTaskIncrementTick+0x150>)
 800fcd4:	6013      	str	r3, [r2, #0]
 800fcd6:	4a3e      	ldr	r2, [pc, #248]	; (800fdd0 <xTaskIncrementTick+0x154>)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6013      	str	r3, [r2, #0]
 800fcdc:	4b3d      	ldr	r3, [pc, #244]	; (800fdd4 <xTaskIncrementTick+0x158>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	4a3c      	ldr	r2, [pc, #240]	; (800fdd4 <xTaskIncrementTick+0x158>)
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	f000 fadd 	bl	80102a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcea:	4b3b      	ldr	r3, [pc, #236]	; (800fdd8 <xTaskIncrementTick+0x15c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d348      	bcc.n	800fd86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcf4:	4b35      	ldr	r3, [pc, #212]	; (800fdcc <xTaskIncrementTick+0x150>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d104      	bne.n	800fd08 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcfe:	4b36      	ldr	r3, [pc, #216]	; (800fdd8 <xTaskIncrementTick+0x15c>)
 800fd00:	f04f 32ff 	mov.w	r2, #4294967295
 800fd04:	601a      	str	r2, [r3, #0]
					break;
 800fd06:	e03e      	b.n	800fd86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd08:	4b30      	ldr	r3, [pc, #192]	; (800fdcc <xTaskIncrementTick+0x150>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd18:	693a      	ldr	r2, [r7, #16]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d203      	bcs.n	800fd28 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd20:	4a2d      	ldr	r2, [pc, #180]	; (800fdd8 <xTaskIncrementTick+0x15c>)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd26:	e02e      	b.n	800fd86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3304      	adds	r3, #4
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fe fedb 	bl	800eae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d004      	beq.n	800fd44 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	3318      	adds	r3, #24
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fe fed2 	bl	800eae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	2201      	movs	r2, #1
 800fd4a:	409a      	lsls	r2, r3
 800fd4c:	4b23      	ldr	r3, [pc, #140]	; (800fddc <xTaskIncrementTick+0x160>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	4a22      	ldr	r2, [pc, #136]	; (800fddc <xTaskIncrementTick+0x160>)
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4a1f      	ldr	r2, [pc, #124]	; (800fde0 <xTaskIncrementTick+0x164>)
 800fd64:	441a      	add	r2, r3
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	f7fe fe5e 	bl	800ea2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd76:	4b1b      	ldr	r3, [pc, #108]	; (800fde4 <xTaskIncrementTick+0x168>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d3b9      	bcc.n	800fcf4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fd80:	2301      	movs	r3, #1
 800fd82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd84:	e7b6      	b.n	800fcf4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd86:	4b17      	ldr	r3, [pc, #92]	; (800fde4 <xTaskIncrementTick+0x168>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd8c:	4914      	ldr	r1, [pc, #80]	; (800fde0 <xTaskIncrementTick+0x164>)
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	440b      	add	r3, r1
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d907      	bls.n	800fdae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e004      	b.n	800fdae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fda4:	4b10      	ldr	r3, [pc, #64]	; (800fde8 <xTaskIncrementTick+0x16c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	4a0f      	ldr	r2, [pc, #60]	; (800fde8 <xTaskIncrementTick+0x16c>)
 800fdac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fdae:	4b0f      	ldr	r3, [pc, #60]	; (800fdec <xTaskIncrementTick+0x170>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fdba:	697b      	ldr	r3, [r7, #20]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20000abc 	.word	0x20000abc
 800fdc8:	20000a98 	.word	0x20000a98
 800fdcc:	20000a4c 	.word	0x20000a4c
 800fdd0:	20000a50 	.word	0x20000a50
 800fdd4:	20000aac 	.word	0x20000aac
 800fdd8:	20000ab4 	.word	0x20000ab4
 800fddc:	20000a9c 	.word	0x20000a9c
 800fde0:	20000998 	.word	0x20000998
 800fde4:	20000994 	.word	0x20000994
 800fde8:	20000aa4 	.word	0x20000aa4
 800fdec:	20000aa8 	.word	0x20000aa8

0800fdf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdf6:	4b3d      	ldr	r3, [pc, #244]	; (800feec <vTaskSwitchContext+0xfc>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d003      	beq.n	800fe06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdfe:	4b3c      	ldr	r3, [pc, #240]	; (800fef0 <vTaskSwitchContext+0x100>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe04:	e06d      	b.n	800fee2 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 800fe06:	4b3a      	ldr	r3, [pc, #232]	; (800fef0 <vTaskSwitchContext+0x100>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fe0c:	4b39      	ldr	r3, [pc, #228]	; (800fef4 <vTaskSwitchContext+0x104>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe12:	61fb      	str	r3, [r7, #28]
 800fe14:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fe18:	61bb      	str	r3, [r7, #24]
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69ba      	ldr	r2, [r7, #24]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d111      	bne.n	800fe48 <vTaskSwitchContext+0x58>
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	3304      	adds	r3, #4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	69ba      	ldr	r2, [r7, #24]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d10b      	bne.n	800fe48 <vTaskSwitchContext+0x58>
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	3308      	adds	r3, #8
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	69ba      	ldr	r2, [r7, #24]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d105      	bne.n	800fe48 <vTaskSwitchContext+0x58>
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	330c      	adds	r3, #12
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	69ba      	ldr	r2, [r7, #24]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d008      	beq.n	800fe5a <vTaskSwitchContext+0x6a>
 800fe48:	4b2a      	ldr	r3, [pc, #168]	; (800fef4 <vTaskSwitchContext+0x104>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	4b29      	ldr	r3, [pc, #164]	; (800fef4 <vTaskSwitchContext+0x104>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	3334      	adds	r3, #52	; 0x34
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f7f0 fb64 	bl	8000522 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe5a:	4b27      	ldr	r3, [pc, #156]	; (800fef8 <vTaskSwitchContext+0x108>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	fab3 f383 	clz	r3, r3
 800fe66:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fe68:	7afb      	ldrb	r3, [r7, #11]
 800fe6a:	f1c3 031f 	rsb	r3, r3, #31
 800fe6e:	617b      	str	r3, [r7, #20]
 800fe70:	4922      	ldr	r1, [pc, #136]	; (800fefc <vTaskSwitchContext+0x10c>)
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	440b      	add	r3, r1
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10c      	bne.n	800fe9e <vTaskSwitchContext+0xae>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	b672      	cpsid	i
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	b662      	cpsie	i
 800fe98:	607b      	str	r3, [r7, #4]
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <vTaskSwitchContext+0xac>
 800fe9e:	697a      	ldr	r2, [r7, #20]
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4a14      	ldr	r2, [pc, #80]	; (800fefc <vTaskSwitchContext+0x10c>)
 800feaa:	4413      	add	r3, r2
 800feac:	613b      	str	r3, [r7, #16]
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	685a      	ldr	r2, [r3, #4]
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	605a      	str	r2, [r3, #4]
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	3308      	adds	r3, #8
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d104      	bne.n	800fece <vTaskSwitchContext+0xde>
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	605a      	str	r2, [r3, #4]
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	4a07      	ldr	r2, [pc, #28]	; (800fef4 <vTaskSwitchContext+0x104>)
 800fed6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fed8:	4b06      	ldr	r3, [pc, #24]	; (800fef4 <vTaskSwitchContext+0x104>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	3350      	adds	r3, #80	; 0x50
 800fede:	4a08      	ldr	r2, [pc, #32]	; (800ff00 <vTaskSwitchContext+0x110>)
 800fee0:	6013      	str	r3, [r2, #0]
}
 800fee2:	bf00      	nop
 800fee4:	3720      	adds	r7, #32
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	20000abc 	.word	0x20000abc
 800fef0:	20000aa8 	.word	0x20000aa8
 800fef4:	20000994 	.word	0x20000994
 800fef8:	20000a9c 	.word	0x20000a9c
 800fefc:	20000998 	.word	0x20000998
 800ff00:	20000138 	.word	0x20000138

0800ff04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10c      	bne.n	800ff2e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff18:	b672      	cpsid	i
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	b662      	cpsie	i
 800ff28:	60fb      	str	r3, [r7, #12]
}
 800ff2a:	bf00      	nop
 800ff2c:	e7fe      	b.n	800ff2c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff2e:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <vTaskPlaceOnEventList+0x48>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	3318      	adds	r3, #24
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7fe fd9d 	bl	800ea76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	6838      	ldr	r0, [r7, #0]
 800ff40:	f000 fa78 	bl	8010434 <prvAddCurrentTaskToDelayedList>
}
 800ff44:	bf00      	nop
 800ff46:	3710      	adds	r7, #16
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	20000994 	.word	0x20000994

0800ff50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10c      	bne.n	800ff80 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6a:	b672      	cpsid	i
 800ff6c:	f383 8811 	msr	BASEPRI, r3
 800ff70:	f3bf 8f6f 	isb	sy
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	b662      	cpsie	i
 800ff7a:	60fb      	str	r3, [r7, #12]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	3318      	adds	r3, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe fdaf 	bl	800eae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff8a:	4b1d      	ldr	r3, [pc, #116]	; (8010000 <xTaskRemoveFromEventList+0xb0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d11c      	bne.n	800ffcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fda6 	bl	800eae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	409a      	lsls	r2, r3
 800ffa4:	4b17      	ldr	r3, [pc, #92]	; (8010004 <xTaskRemoveFromEventList+0xb4>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	4a16      	ldr	r2, [pc, #88]	; (8010004 <xTaskRemoveFromEventList+0xb4>)
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4a13      	ldr	r2, [pc, #76]	; (8010008 <xTaskRemoveFromEventList+0xb8>)
 800ffbc:	441a      	add	r2, r3
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	f7fe fd32 	bl	800ea2e <vListInsertEnd>
 800ffca:	e005      	b.n	800ffd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	3318      	adds	r3, #24
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	480e      	ldr	r0, [pc, #56]	; (801000c <xTaskRemoveFromEventList+0xbc>)
 800ffd4:	f7fe fd2b 	bl	800ea2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffdc:	4b0c      	ldr	r3, [pc, #48]	; (8010010 <xTaskRemoveFromEventList+0xc0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d905      	bls.n	800fff2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffea:	4b0a      	ldr	r3, [pc, #40]	; (8010014 <xTaskRemoveFromEventList+0xc4>)
 800ffec:	2201      	movs	r2, #1
 800ffee:	601a      	str	r2, [r3, #0]
 800fff0:	e001      	b.n	800fff6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fff2:	2300      	movs	r3, #0
 800fff4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fff6:	697b      	ldr	r3, [r7, #20]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	20000abc 	.word	0x20000abc
 8010004:	20000a9c 	.word	0x20000a9c
 8010008:	20000998 	.word	0x20000998
 801000c:	20000a54 	.word	0x20000a54
 8010010:	20000994 	.word	0x20000994
 8010014:	20000aa8 	.word	0x20000aa8

08010018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010020:	4b06      	ldr	r3, [pc, #24]	; (801003c <vTaskInternalSetTimeOutState+0x24>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010028:	4b05      	ldr	r3, [pc, #20]	; (8010040 <vTaskInternalSetTimeOutState+0x28>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	605a      	str	r2, [r3, #4]
}
 8010030:	bf00      	nop
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	20000aac 	.word	0x20000aac
 8010040:	20000a98 	.word	0x20000a98

08010044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b088      	sub	sp, #32
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10c      	bne.n	801006e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	b672      	cpsid	i
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	b662      	cpsie	i
 8010068:	613b      	str	r3, [r7, #16]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10c      	bne.n	801008e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	b672      	cpsid	i
 801007a:	f383 8811 	msr	BASEPRI, r3
 801007e:	f3bf 8f6f 	isb	sy
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	b662      	cpsie	i
 8010088:	60fb      	str	r3, [r7, #12]
}
 801008a:	bf00      	nop
 801008c:	e7fe      	b.n	801008c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801008e:	f000 fb45 	bl	801071c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010092:	4b1d      	ldr	r3, [pc, #116]	; (8010108 <xTaskCheckForTimeOut+0xc4>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d102      	bne.n	80100b2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100ac:	2300      	movs	r3, #0
 80100ae:	61fb      	str	r3, [r7, #28]
 80100b0:	e023      	b.n	80100fa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	4b15      	ldr	r3, [pc, #84]	; (801010c <xTaskCheckForTimeOut+0xc8>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d007      	beq.n	80100ce <xTaskCheckForTimeOut+0x8a>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d302      	bcc.n	80100ce <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100c8:	2301      	movs	r3, #1
 80100ca:	61fb      	str	r3, [r7, #28]
 80100cc:	e015      	b.n	80100fa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	697a      	ldr	r2, [r7, #20]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d20b      	bcs.n	80100f0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	1ad2      	subs	r2, r2, r3
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff ff97 	bl	8010018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100ea:	2300      	movs	r3, #0
 80100ec:	61fb      	str	r3, [r7, #28]
 80100ee:	e004      	b.n	80100fa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	2200      	movs	r2, #0
 80100f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100f6:	2301      	movs	r3, #1
 80100f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100fa:	f000 fb43 	bl	8010784 <vPortExitCritical>

	return xReturn;
 80100fe:	69fb      	ldr	r3, [r7, #28]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3720      	adds	r7, #32
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	20000a98 	.word	0x20000a98
 801010c:	20000aac 	.word	0x20000aac

08010110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010110:	b480      	push	{r7}
 8010112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010114:	4b03      	ldr	r3, [pc, #12]	; (8010124 <vTaskMissedYield+0x14>)
 8010116:	2201      	movs	r2, #1
 8010118:	601a      	str	r2, [r3, #0]
}
 801011a:	bf00      	nop
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	20000aa8 	.word	0x20000aa8

08010128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010130:	f000 f854 	bl	80101dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010134:	4b07      	ldr	r3, [pc, #28]	; (8010154 <prvIdleTask+0x2c>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d907      	bls.n	801014c <prvIdleTask+0x24>
			{
				taskYIELD();
 801013c:	4b06      	ldr	r3, [pc, #24]	; (8010158 <prvIdleTask+0x30>)
 801013e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010142:	601a      	str	r2, [r3, #0]
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801014c:	f7f0 f9e2 	bl	8000514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010150:	e7ee      	b.n	8010130 <prvIdleTask+0x8>
 8010152:	bf00      	nop
 8010154:	20000998 	.word	0x20000998
 8010158:	e000ed04 	.word	0xe000ed04

0801015c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010162:	2300      	movs	r3, #0
 8010164:	607b      	str	r3, [r7, #4]
 8010166:	e00c      	b.n	8010182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	4613      	mov	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4a12      	ldr	r2, [pc, #72]	; (80101bc <prvInitialiseTaskLists+0x60>)
 8010174:	4413      	add	r3, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7fe fc2c 	bl	800e9d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3301      	adds	r3, #1
 8010180:	607b      	str	r3, [r7, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b06      	cmp	r3, #6
 8010186:	d9ef      	bls.n	8010168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010188:	480d      	ldr	r0, [pc, #52]	; (80101c0 <prvInitialiseTaskLists+0x64>)
 801018a:	f7fe fc23 	bl	800e9d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801018e:	480d      	ldr	r0, [pc, #52]	; (80101c4 <prvInitialiseTaskLists+0x68>)
 8010190:	f7fe fc20 	bl	800e9d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010194:	480c      	ldr	r0, [pc, #48]	; (80101c8 <prvInitialiseTaskLists+0x6c>)
 8010196:	f7fe fc1d 	bl	800e9d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801019a:	480c      	ldr	r0, [pc, #48]	; (80101cc <prvInitialiseTaskLists+0x70>)
 801019c:	f7fe fc1a 	bl	800e9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101a0:	480b      	ldr	r0, [pc, #44]	; (80101d0 <prvInitialiseTaskLists+0x74>)
 80101a2:	f7fe fc17 	bl	800e9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101a6:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <prvInitialiseTaskLists+0x78>)
 80101a8:	4a05      	ldr	r2, [pc, #20]	; (80101c0 <prvInitialiseTaskLists+0x64>)
 80101aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101ac:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <prvInitialiseTaskLists+0x7c>)
 80101ae:	4a05      	ldr	r2, [pc, #20]	; (80101c4 <prvInitialiseTaskLists+0x68>)
 80101b0:	601a      	str	r2, [r3, #0]
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	20000998 	.word	0x20000998
 80101c0:	20000a24 	.word	0x20000a24
 80101c4:	20000a38 	.word	0x20000a38
 80101c8:	20000a54 	.word	0x20000a54
 80101cc:	20000a68 	.word	0x20000a68
 80101d0:	20000a80 	.word	0x20000a80
 80101d4:	20000a4c 	.word	0x20000a4c
 80101d8:	20000a50 	.word	0x20000a50

080101dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101e2:	e019      	b.n	8010218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101e4:	f000 fa9a 	bl	801071c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e8:	4b10      	ldr	r3, [pc, #64]	; (801022c <prvCheckTasksWaitingTermination+0x50>)
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe fc77 	bl	800eae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101fa:	4b0d      	ldr	r3, [pc, #52]	; (8010230 <prvCheckTasksWaitingTermination+0x54>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	3b01      	subs	r3, #1
 8010200:	4a0b      	ldr	r2, [pc, #44]	; (8010230 <prvCheckTasksWaitingTermination+0x54>)
 8010202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010204:	4b0b      	ldr	r3, [pc, #44]	; (8010234 <prvCheckTasksWaitingTermination+0x58>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	3b01      	subs	r3, #1
 801020a:	4a0a      	ldr	r2, [pc, #40]	; (8010234 <prvCheckTasksWaitingTermination+0x58>)
 801020c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801020e:	f000 fab9 	bl	8010784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 f810 	bl	8010238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010218:	4b06      	ldr	r3, [pc, #24]	; (8010234 <prvCheckTasksWaitingTermination+0x58>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1e1      	bne.n	80101e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010220:	bf00      	nop
 8010222:	bf00      	nop
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	20000a68 	.word	0x20000a68
 8010230:	20000a94 	.word	0x20000a94
 8010234:	20000a7c 	.word	0x20000a7c

08010238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3350      	adds	r3, #80	; 0x50
 8010244:	4618      	mov	r0, r3
 8010246:	f001 fca3 	bl	8011b90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8010250:	2b00      	cmp	r3, #0
 8010252:	d108      	bne.n	8010266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010258:	4618      	mov	r0, r3
 801025a:	f000 fc5b 	bl	8010b14 <vPortFree>
				vPortFree( pxTCB );
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fc58 	bl	8010b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010264:	e01a      	b.n	801029c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801026c:	2b01      	cmp	r3, #1
 801026e:	d103      	bne.n	8010278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fc4f 	bl	8010b14 <vPortFree>
	}
 8010276:	e011      	b.n	801029c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801027e:	2b02      	cmp	r3, #2
 8010280:	d00c      	beq.n	801029c <prvDeleteTCB+0x64>
	__asm volatile
 8010282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010286:	b672      	cpsid	i
 8010288:	f383 8811 	msr	BASEPRI, r3
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	b662      	cpsie	i
 8010296:	60fb      	str	r3, [r7, #12]
}
 8010298:	bf00      	nop
 801029a:	e7fe      	b.n	801029a <prvDeleteTCB+0x62>
	}
 801029c:	bf00      	nop
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102aa:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <prvResetNextTaskUnblockTime+0x38>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d104      	bne.n	80102be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <prvResetNextTaskUnblockTime+0x3c>)
 80102b6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102bc:	e008      	b.n	80102d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102be:	4b07      	ldr	r3, [pc, #28]	; (80102dc <prvResetNextTaskUnblockTime+0x38>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4a04      	ldr	r2, [pc, #16]	; (80102e0 <prvResetNextTaskUnblockTime+0x3c>)
 80102ce:	6013      	str	r3, [r2, #0]
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	20000a4c 	.word	0x20000a4c
 80102e0:	20000ab4 	.word	0x20000ab4

080102e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102ea:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <xTaskGetSchedulerState+0x34>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102f2:	2301      	movs	r3, #1
 80102f4:	607b      	str	r3, [r7, #4]
 80102f6:	e008      	b.n	801030a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102f8:	4b08      	ldr	r3, [pc, #32]	; (801031c <xTaskGetSchedulerState+0x38>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d102      	bne.n	8010306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010300:	2302      	movs	r3, #2
 8010302:	607b      	str	r3, [r7, #4]
 8010304:	e001      	b.n	801030a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010306:	2300      	movs	r3, #0
 8010308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801030a:	687b      	ldr	r3, [r7, #4]
	}
 801030c:	4618      	mov	r0, r3
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr
 8010318:	20000aa0 	.word	0x20000aa0
 801031c:	20000abc 	.word	0x20000abc

08010320 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801032c:	2300      	movs	r3, #0
 801032e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d072      	beq.n	801041c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010336:	4b3c      	ldr	r3, [pc, #240]	; (8010428 <xTaskPriorityDisinherit+0x108>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	693a      	ldr	r2, [r7, #16]
 801033c:	429a      	cmp	r2, r3
 801033e:	d00c      	beq.n	801035a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	b672      	cpsid	i
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	b662      	cpsie	i
 8010354:	60fb      	str	r3, [r7, #12]
}
 8010356:	bf00      	nop
 8010358:	e7fe      	b.n	8010358 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801035e:	2b00      	cmp	r3, #0
 8010360:	d10c      	bne.n	801037c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010366:	b672      	cpsid	i
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	b662      	cpsie	i
 8010376:	60bb      	str	r3, [r7, #8]
}
 8010378:	bf00      	nop
 801037a:	e7fe      	b.n	801037a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010380:	1e5a      	subs	r2, r3, #1
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801038e:	429a      	cmp	r2, r3
 8010390:	d044      	beq.n	801041c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010396:	2b00      	cmp	r3, #0
 8010398:	d140      	bne.n	801041c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	3304      	adds	r3, #4
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe fba2 	bl	800eae8 <uxListRemove>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d115      	bne.n	80103d6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ae:	491f      	ldr	r1, [pc, #124]	; (801042c <xTaskPriorityDisinherit+0x10c>)
 80103b0:	4613      	mov	r3, r2
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	440b      	add	r3, r1
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10a      	bne.n	80103d6 <xTaskPriorityDisinherit+0xb6>
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c4:	2201      	movs	r2, #1
 80103c6:	fa02 f303 	lsl.w	r3, r2, r3
 80103ca:	43da      	mvns	r2, r3
 80103cc:	4b18      	ldr	r3, [pc, #96]	; (8010430 <xTaskPriorityDisinherit+0x110>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4013      	ands	r3, r2
 80103d2:	4a17      	ldr	r2, [pc, #92]	; (8010430 <xTaskPriorityDisinherit+0x110>)
 80103d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e2:	f1c3 0207 	rsb	r2, r3, #7
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ee:	2201      	movs	r2, #1
 80103f0:	409a      	lsls	r2, r3
 80103f2:	4b0f      	ldr	r3, [pc, #60]	; (8010430 <xTaskPriorityDisinherit+0x110>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	4a0d      	ldr	r2, [pc, #52]	; (8010430 <xTaskPriorityDisinherit+0x110>)
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010400:	4613      	mov	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4a08      	ldr	r2, [pc, #32]	; (801042c <xTaskPriorityDisinherit+0x10c>)
 801040a:	441a      	add	r2, r3
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	3304      	adds	r3, #4
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe fb0b 	bl	800ea2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010418:	2301      	movs	r3, #1
 801041a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801041c:	697b      	ldr	r3, [r7, #20]
	}
 801041e:	4618      	mov	r0, r3
 8010420:	3718      	adds	r7, #24
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	20000994 	.word	0x20000994
 801042c:	20000998 	.word	0x20000998
 8010430:	20000a9c 	.word	0x20000a9c

08010434 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801043e:	4b29      	ldr	r3, [pc, #164]	; (80104e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010444:	4b28      	ldr	r3, [pc, #160]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	3304      	adds	r3, #4
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fb4c 	bl	800eae8 <uxListRemove>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d10b      	bne.n	801046e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010456:	4b24      	ldr	r3, [pc, #144]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045c:	2201      	movs	r2, #1
 801045e:	fa02 f303 	lsl.w	r3, r2, r3
 8010462:	43da      	mvns	r2, r3
 8010464:	4b21      	ldr	r3, [pc, #132]	; (80104ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4013      	ands	r3, r2
 801046a:	4a20      	ldr	r2, [pc, #128]	; (80104ec <prvAddCurrentTaskToDelayedList+0xb8>)
 801046c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010474:	d10a      	bne.n	801048c <prvAddCurrentTaskToDelayedList+0x58>
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d007      	beq.n	801048c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801047c:	4b1a      	ldr	r3, [pc, #104]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3304      	adds	r3, #4
 8010482:	4619      	mov	r1, r3
 8010484:	481a      	ldr	r0, [pc, #104]	; (80104f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010486:	f7fe fad2 	bl	800ea2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801048a:	e026      	b.n	80104da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4413      	add	r3, r2
 8010492:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010494:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d209      	bcs.n	80104b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104a4:	4b13      	ldr	r3, [pc, #76]	; (80104f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	4b0f      	ldr	r3, [pc, #60]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3304      	adds	r3, #4
 80104ae:	4619      	mov	r1, r3
 80104b0:	4610      	mov	r0, r2
 80104b2:	f7fe fae0 	bl	800ea76 <vListInsert>
}
 80104b6:	e010      	b.n	80104da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104b8:	4b0f      	ldr	r3, [pc, #60]	; (80104f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	4b0a      	ldr	r3, [pc, #40]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3304      	adds	r3, #4
 80104c2:	4619      	mov	r1, r3
 80104c4:	4610      	mov	r0, r2
 80104c6:	f7fe fad6 	bl	800ea76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104ca:	4b0c      	ldr	r3, [pc, #48]	; (80104fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d202      	bcs.n	80104da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80104d4:	4a09      	ldr	r2, [pc, #36]	; (80104fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	6013      	str	r3, [r2, #0]
}
 80104da:	bf00      	nop
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	20000a98 	.word	0x20000a98
 80104e8:	20000994 	.word	0x20000994
 80104ec:	20000a9c 	.word	0x20000a9c
 80104f0:	20000a80 	.word	0x20000a80
 80104f4:	20000a50 	.word	0x20000a50
 80104f8:	20000a4c 	.word	0x20000a4c
 80104fc:	20000ab4 	.word	0x20000ab4

08010500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	3b04      	subs	r3, #4
 8010510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	3b04      	subs	r3, #4
 801051e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	f023 0201 	bic.w	r2, r3, #1
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	3b04      	subs	r3, #4
 801052e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010530:	4a0c      	ldr	r2, [pc, #48]	; (8010564 <pxPortInitialiseStack+0x64>)
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	3b14      	subs	r3, #20
 801053a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	3b04      	subs	r3, #4
 8010546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f06f 0202 	mvn.w	r2, #2
 801054e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	3b20      	subs	r3, #32
 8010554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010556:	68fb      	ldr	r3, [r7, #12]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	08010569 	.word	0x08010569

08010568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010572:	4b14      	ldr	r3, [pc, #80]	; (80105c4 <prvTaskExitError+0x5c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057a:	d00c      	beq.n	8010596 <prvTaskExitError+0x2e>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	b672      	cpsid	i
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	b662      	cpsie	i
 8010590:	60fb      	str	r3, [r7, #12]
}
 8010592:	bf00      	nop
 8010594:	e7fe      	b.n	8010594 <prvTaskExitError+0x2c>
	__asm volatile
 8010596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059a:	b672      	cpsid	i
 801059c:	f383 8811 	msr	BASEPRI, r3
 80105a0:	f3bf 8f6f 	isb	sy
 80105a4:	f3bf 8f4f 	dsb	sy
 80105a8:	b662      	cpsie	i
 80105aa:	60bb      	str	r3, [r7, #8]
}
 80105ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105ae:	bf00      	nop
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0fc      	beq.n	80105b0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105b6:	bf00      	nop
 80105b8:	bf00      	nop
 80105ba:	3714      	adds	r7, #20
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	200000b4 	.word	0x200000b4
	...

080105d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80105d0:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <pxCurrentTCBConst2>)
 80105d2:	6819      	ldr	r1, [r3, #0]
 80105d4:	6808      	ldr	r0, [r1, #0]
 80105d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105da:	f380 8809 	msr	PSP, r0
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f04f 0000 	mov.w	r0, #0
 80105e6:	f380 8811 	msr	BASEPRI, r0
 80105ea:	4770      	bx	lr
 80105ec:	f3af 8000 	nop.w

080105f0 <pxCurrentTCBConst2>:
 80105f0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop

080105f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105f8:	4808      	ldr	r0, [pc, #32]	; (801061c <prvPortStartFirstTask+0x24>)
 80105fa:	6800      	ldr	r0, [r0, #0]
 80105fc:	6800      	ldr	r0, [r0, #0]
 80105fe:	f380 8808 	msr	MSP, r0
 8010602:	f04f 0000 	mov.w	r0, #0
 8010606:	f380 8814 	msr	CONTROL, r0
 801060a:	b662      	cpsie	i
 801060c:	b661      	cpsie	f
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	df00      	svc	0
 8010618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801061a:	bf00      	nop
 801061c:	e000ed08 	.word	0xe000ed08

08010620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010626:	4b37      	ldr	r3, [pc, #220]	; (8010704 <xPortStartScheduler+0xe4>)
 8010628:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	b2db      	uxtb	r3, r3
 8010630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	22ff      	movs	r2, #255	; 0xff
 8010636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010640:	78fb      	ldrb	r3, [r7, #3]
 8010642:	b2db      	uxtb	r3, r3
 8010644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010648:	b2da      	uxtb	r2, r3
 801064a:	4b2f      	ldr	r3, [pc, #188]	; (8010708 <xPortStartScheduler+0xe8>)
 801064c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801064e:	4b2f      	ldr	r3, [pc, #188]	; (801070c <xPortStartScheduler+0xec>)
 8010650:	2207      	movs	r2, #7
 8010652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010654:	e009      	b.n	801066a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010656:	4b2d      	ldr	r3, [pc, #180]	; (801070c <xPortStartScheduler+0xec>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3b01      	subs	r3, #1
 801065c:	4a2b      	ldr	r2, [pc, #172]	; (801070c <xPortStartScheduler+0xec>)
 801065e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010660:	78fb      	ldrb	r3, [r7, #3]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	b2db      	uxtb	r3, r3
 8010668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801066a:	78fb      	ldrb	r3, [r7, #3]
 801066c:	b2db      	uxtb	r3, r3
 801066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010672:	2b80      	cmp	r3, #128	; 0x80
 8010674:	d0ef      	beq.n	8010656 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010676:	4b25      	ldr	r3, [pc, #148]	; (801070c <xPortStartScheduler+0xec>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f1c3 0307 	rsb	r3, r3, #7
 801067e:	2b04      	cmp	r3, #4
 8010680:	d00c      	beq.n	801069c <xPortStartScheduler+0x7c>
	__asm volatile
 8010682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010686:	b672      	cpsid	i
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	b662      	cpsie	i
 8010696:	60bb      	str	r3, [r7, #8]
}
 8010698:	bf00      	nop
 801069a:	e7fe      	b.n	801069a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801069c:	4b1b      	ldr	r3, [pc, #108]	; (801070c <xPortStartScheduler+0xec>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	021b      	lsls	r3, r3, #8
 80106a2:	4a1a      	ldr	r2, [pc, #104]	; (801070c <xPortStartScheduler+0xec>)
 80106a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80106a6:	4b19      	ldr	r3, [pc, #100]	; (801070c <xPortStartScheduler+0xec>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80106ae:	4a17      	ldr	r2, [pc, #92]	; (801070c <xPortStartScheduler+0xec>)
 80106b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80106ba:	4b15      	ldr	r3, [pc, #84]	; (8010710 <xPortStartScheduler+0xf0>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4a14      	ldr	r2, [pc, #80]	; (8010710 <xPortStartScheduler+0xf0>)
 80106c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80106c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80106c6:	4b12      	ldr	r3, [pc, #72]	; (8010710 <xPortStartScheduler+0xf0>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4a11      	ldr	r2, [pc, #68]	; (8010710 <xPortStartScheduler+0xf0>)
 80106cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80106d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80106d2:	f000 f8dd 	bl	8010890 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80106d6:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <xPortStartScheduler+0xf4>)
 80106d8:	2200      	movs	r2, #0
 80106da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80106dc:	f000 f8fc 	bl	80108d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80106e0:	4b0d      	ldr	r3, [pc, #52]	; (8010718 <xPortStartScheduler+0xf8>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a0c      	ldr	r2, [pc, #48]	; (8010718 <xPortStartScheduler+0xf8>)
 80106e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80106ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80106ec:	f7ff ff84 	bl	80105f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106f0:	f7ff fb7e 	bl	800fdf0 <vTaskSwitchContext>
	prvTaskExitError();
 80106f4:	f7ff ff38 	bl	8010568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	e000e400 	.word	0xe000e400
 8010708:	20000ac0 	.word	0x20000ac0
 801070c:	20000ac4 	.word	0x20000ac4
 8010710:	e000ed20 	.word	0xe000ed20
 8010714:	200000b4 	.word	0x200000b4
 8010718:	e000ef34 	.word	0xe000ef34

0801071c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
	__asm volatile
 8010722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010726:	b672      	cpsid	i
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	b662      	cpsie	i
 8010736:	607b      	str	r3, [r7, #4]
}
 8010738:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801073a:	4b10      	ldr	r3, [pc, #64]	; (801077c <vPortEnterCritical+0x60>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	3301      	adds	r3, #1
 8010740:	4a0e      	ldr	r2, [pc, #56]	; (801077c <vPortEnterCritical+0x60>)
 8010742:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010744:	4b0d      	ldr	r3, [pc, #52]	; (801077c <vPortEnterCritical+0x60>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d111      	bne.n	8010770 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801074c:	4b0c      	ldr	r3, [pc, #48]	; (8010780 <vPortEnterCritical+0x64>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00c      	beq.n	8010770 <vPortEnterCritical+0x54>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	b672      	cpsid	i
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	b662      	cpsie	i
 801076a:	603b      	str	r3, [r7, #0]
}
 801076c:	bf00      	nop
 801076e:	e7fe      	b.n	801076e <vPortEnterCritical+0x52>
	}
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	200000b4 	.word	0x200000b4
 8010780:	e000ed04 	.word	0xe000ed04

08010784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801078a:	4b13      	ldr	r3, [pc, #76]	; (80107d8 <vPortExitCritical+0x54>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10c      	bne.n	80107ac <vPortExitCritical+0x28>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	b672      	cpsid	i
 8010798:	f383 8811 	msr	BASEPRI, r3
 801079c:	f3bf 8f6f 	isb	sy
 80107a0:	f3bf 8f4f 	dsb	sy
 80107a4:	b662      	cpsie	i
 80107a6:	607b      	str	r3, [r7, #4]
}
 80107a8:	bf00      	nop
 80107aa:	e7fe      	b.n	80107aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80107ac:	4b0a      	ldr	r3, [pc, #40]	; (80107d8 <vPortExitCritical+0x54>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3b01      	subs	r3, #1
 80107b2:	4a09      	ldr	r2, [pc, #36]	; (80107d8 <vPortExitCritical+0x54>)
 80107b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80107b6:	4b08      	ldr	r3, [pc, #32]	; (80107d8 <vPortExitCritical+0x54>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d105      	bne.n	80107ca <vPortExitCritical+0x46>
 80107be:	2300      	movs	r3, #0
 80107c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	f383 8811 	msr	BASEPRI, r3
}
 80107c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80107ca:	bf00      	nop
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	200000b4 	.word	0x200000b4
 80107dc:	00000000 	.word	0x00000000

080107e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80107e0:	f3ef 8009 	mrs	r0, PSP
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	4b15      	ldr	r3, [pc, #84]	; (8010840 <pxCurrentTCBConst>)
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	f01e 0f10 	tst.w	lr, #16
 80107f0:	bf08      	it	eq
 80107f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fa:	6010      	str	r0, [r2, #0]
 80107fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010804:	b672      	cpsid	i
 8010806:	f380 8811 	msr	BASEPRI, r0
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	b662      	cpsie	i
 8010814:	f7ff faec 	bl	800fdf0 <vTaskSwitchContext>
 8010818:	f04f 0000 	mov.w	r0, #0
 801081c:	f380 8811 	msr	BASEPRI, r0
 8010820:	bc09      	pop	{r0, r3}
 8010822:	6819      	ldr	r1, [r3, #0]
 8010824:	6808      	ldr	r0, [r1, #0]
 8010826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801082a:	f01e 0f10 	tst.w	lr, #16
 801082e:	bf08      	it	eq
 8010830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010834:	f380 8809 	msr	PSP, r0
 8010838:	f3bf 8f6f 	isb	sy
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop

08010840 <pxCurrentTCBConst>:
 8010840:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010844:	bf00      	nop
 8010846:	bf00      	nop

08010848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
	__asm volatile
 801084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010852:	b672      	cpsid	i
 8010854:	f383 8811 	msr	BASEPRI, r3
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	b662      	cpsie	i
 8010862:	607b      	str	r3, [r7, #4]
}
 8010864:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010866:	f7ff fa09 	bl	800fc7c <xTaskIncrementTick>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d003      	beq.n	8010878 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010870:	4b06      	ldr	r3, [pc, #24]	; (801088c <SysTick_Handler+0x44>)
 8010872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010876:	601a      	str	r2, [r3, #0]
 8010878:	2300      	movs	r3, #0
 801087a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	f383 8811 	msr	BASEPRI, r3
}
 8010882:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	e000ed04 	.word	0xe000ed04

08010890 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010890:	b480      	push	{r7}
 8010892:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010894:	4b0b      	ldr	r3, [pc, #44]	; (80108c4 <vPortSetupTimerInterrupt+0x34>)
 8010896:	2200      	movs	r2, #0
 8010898:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801089a:	4b0b      	ldr	r3, [pc, #44]	; (80108c8 <vPortSetupTimerInterrupt+0x38>)
 801089c:	2200      	movs	r2, #0
 801089e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108a0:	4b0a      	ldr	r3, [pc, #40]	; (80108cc <vPortSetupTimerInterrupt+0x3c>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a0a      	ldr	r2, [pc, #40]	; (80108d0 <vPortSetupTimerInterrupt+0x40>)
 80108a6:	fba2 2303 	umull	r2, r3, r2, r3
 80108aa:	099b      	lsrs	r3, r3, #6
 80108ac:	4a09      	ldr	r2, [pc, #36]	; (80108d4 <vPortSetupTimerInterrupt+0x44>)
 80108ae:	3b01      	subs	r3, #1
 80108b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80108b2:	4b04      	ldr	r3, [pc, #16]	; (80108c4 <vPortSetupTimerInterrupt+0x34>)
 80108b4:	2207      	movs	r2, #7
 80108b6:	601a      	str	r2, [r3, #0]
}
 80108b8:	bf00      	nop
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	e000e010 	.word	0xe000e010
 80108c8:	e000e018 	.word	0xe000e018
 80108cc:	20000000 	.word	0x20000000
 80108d0:	10624dd3 	.word	0x10624dd3
 80108d4:	e000e014 	.word	0xe000e014

080108d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80108d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80108e8 <vPortEnableVFP+0x10>
 80108dc:	6801      	ldr	r1, [r0, #0]
 80108de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80108e2:	6001      	str	r1, [r0, #0]
 80108e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80108e6:	bf00      	nop
 80108e8:	e000ed88 	.word	0xe000ed88

080108ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80108ec:	b480      	push	{r7}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108f2:	f3ef 8305 	mrs	r3, IPSR
 80108f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2b0f      	cmp	r3, #15
 80108fc:	d916      	bls.n	801092c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80108fe:	4a19      	ldr	r2, [pc, #100]	; (8010964 <vPortValidateInterruptPriority+0x78>)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	4413      	add	r3, r2
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010908:	4b17      	ldr	r3, [pc, #92]	; (8010968 <vPortValidateInterruptPriority+0x7c>)
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	7afa      	ldrb	r2, [r7, #11]
 801090e:	429a      	cmp	r2, r3
 8010910:	d20c      	bcs.n	801092c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	b672      	cpsid	i
 8010918:	f383 8811 	msr	BASEPRI, r3
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	b662      	cpsie	i
 8010926:	607b      	str	r3, [r7, #4]
}
 8010928:	bf00      	nop
 801092a:	e7fe      	b.n	801092a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801092c:	4b0f      	ldr	r3, [pc, #60]	; (801096c <vPortValidateInterruptPriority+0x80>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010934:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <vPortValidateInterruptPriority+0x84>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	d90c      	bls.n	8010956 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	b672      	cpsid	i
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	b662      	cpsie	i
 8010950:	603b      	str	r3, [r7, #0]
}
 8010952:	bf00      	nop
 8010954:	e7fe      	b.n	8010954 <vPortValidateInterruptPriority+0x68>
	}
 8010956:	bf00      	nop
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	e000e3f0 	.word	0xe000e3f0
 8010968:	20000ac0 	.word	0x20000ac0
 801096c:	e000ed0c 	.word	0xe000ed0c
 8010970:	20000ac4 	.word	0x20000ac4

08010974 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08a      	sub	sp, #40	; 0x28
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801097c:	2300      	movs	r3, #0
 801097e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010980:	f7ff f8ae 	bl	800fae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010984:	4b5e      	ldr	r3, [pc, #376]	; (8010b00 <pvPortMalloc+0x18c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801098c:	f000 f920 	bl	8010bd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010990:	4b5c      	ldr	r3, [pc, #368]	; (8010b04 <pvPortMalloc+0x190>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4013      	ands	r3, r2
 8010998:	2b00      	cmp	r3, #0
 801099a:	f040 8092 	bne.w	8010ac2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d01f      	beq.n	80109e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80109a4:	2208      	movs	r2, #8
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4413      	add	r3, r2
 80109aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f003 0307 	and.w	r3, r3, #7
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d016      	beq.n	80109e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f023 0307 	bic.w	r3, r3, #7
 80109bc:	3308      	adds	r3, #8
 80109be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f003 0307 	and.w	r3, r3, #7
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00c      	beq.n	80109e4 <pvPortMalloc+0x70>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	b672      	cpsid	i
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	b662      	cpsie	i
 80109de:	617b      	str	r3, [r7, #20]
}
 80109e0:	bf00      	nop
 80109e2:	e7fe      	b.n	80109e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d06b      	beq.n	8010ac2 <pvPortMalloc+0x14e>
 80109ea:	4b47      	ldr	r3, [pc, #284]	; (8010b08 <pvPortMalloc+0x194>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d866      	bhi.n	8010ac2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109f4:	4b45      	ldr	r3, [pc, #276]	; (8010b0c <pvPortMalloc+0x198>)
 80109f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80109f8:	4b44      	ldr	r3, [pc, #272]	; (8010b0c <pvPortMalloc+0x198>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109fe:	e004      	b.n	8010a0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d903      	bls.n	8010a1c <pvPortMalloc+0xa8>
 8010a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1f1      	bne.n	8010a00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a1c:	4b38      	ldr	r3, [pc, #224]	; (8010b00 <pvPortMalloc+0x18c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d04d      	beq.n	8010ac2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2208      	movs	r2, #8
 8010a2c:	4413      	add	r3, r2
 8010a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	6a3b      	ldr	r3, [r7, #32]
 8010a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	1ad2      	subs	r2, r2, r3
 8010a40:	2308      	movs	r3, #8
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d921      	bls.n	8010a8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	f003 0307 	and.w	r3, r3, #7
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00c      	beq.n	8010a74 <pvPortMalloc+0x100>
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	b672      	cpsid	i
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	b662      	cpsie	i
 8010a6e:	613b      	str	r3, [r7, #16]
}
 8010a70:	bf00      	nop
 8010a72:	e7fe      	b.n	8010a72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	685a      	ldr	r2, [r3, #4]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	1ad2      	subs	r2, r2, r3
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a86:	69b8      	ldr	r0, [r7, #24]
 8010a88:	f000 f904 	bl	8010c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a8c:	4b1e      	ldr	r3, [pc, #120]	; (8010b08 <pvPortMalloc+0x194>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	1ad3      	subs	r3, r2, r3
 8010a96:	4a1c      	ldr	r2, [pc, #112]	; (8010b08 <pvPortMalloc+0x194>)
 8010a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a9a:	4b1b      	ldr	r3, [pc, #108]	; (8010b08 <pvPortMalloc+0x194>)
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	4b1c      	ldr	r3, [pc, #112]	; (8010b10 <pvPortMalloc+0x19c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d203      	bcs.n	8010aae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010aa6:	4b18      	ldr	r3, [pc, #96]	; (8010b08 <pvPortMalloc+0x194>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a19      	ldr	r2, [pc, #100]	; (8010b10 <pvPortMalloc+0x19c>)
 8010aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	685a      	ldr	r2, [r3, #4]
 8010ab2:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <pvPortMalloc+0x190>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	431a      	orrs	r2, r3
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	2200      	movs	r2, #0
 8010ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ac2:	f7ff f81b 	bl	800fafc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010acc:	f7ef fd34 	bl	8000538 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	f003 0307 	and.w	r3, r3, #7
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00c      	beq.n	8010af4 <pvPortMalloc+0x180>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	b672      	cpsid	i
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	b662      	cpsie	i
 8010aee:	60fb      	str	r3, [r7, #12]
}
 8010af0:	bf00      	nop
 8010af2:	e7fe      	b.n	8010af2 <pvPortMalloc+0x17e>
	return pvReturn;
 8010af4:	69fb      	ldr	r3, [r7, #28]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3728      	adds	r7, #40	; 0x28
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	20008ad0 	.word	0x20008ad0
 8010b04:	20008adc 	.word	0x20008adc
 8010b08:	20008ad4 	.word	0x20008ad4
 8010b0c:	20008ac8 	.word	0x20008ac8
 8010b10:	20008ad8 	.word	0x20008ad8

08010b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d04c      	beq.n	8010bc0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b26:	2308      	movs	r3, #8
 8010b28:	425b      	negs	r3, r3
 8010b2a:	697a      	ldr	r2, [r7, #20]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	4b23      	ldr	r3, [pc, #140]	; (8010bc8 <vPortFree+0xb4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10c      	bne.n	8010b5c <vPortFree+0x48>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b46:	b672      	cpsid	i
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	b662      	cpsie	i
 8010b56:	60fb      	str	r3, [r7, #12]
}
 8010b58:	bf00      	nop
 8010b5a:	e7fe      	b.n	8010b5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00c      	beq.n	8010b7e <vPortFree+0x6a>
	__asm volatile
 8010b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b68:	b672      	cpsid	i
 8010b6a:	f383 8811 	msr	BASEPRI, r3
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	b662      	cpsie	i
 8010b78:	60bb      	str	r3, [r7, #8]
}
 8010b7a:	bf00      	nop
 8010b7c:	e7fe      	b.n	8010b7c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	685a      	ldr	r2, [r3, #4]
 8010b82:	4b11      	ldr	r3, [pc, #68]	; (8010bc8 <vPortFree+0xb4>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4013      	ands	r3, r2
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d019      	beq.n	8010bc0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d115      	bne.n	8010bc0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	4b0b      	ldr	r3, [pc, #44]	; (8010bc8 <vPortFree+0xb4>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	43db      	mvns	r3, r3
 8010b9e:	401a      	ands	r2, r3
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ba4:	f7fe ff9c 	bl	800fae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	685a      	ldr	r2, [r3, #4]
 8010bac:	4b07      	ldr	r3, [pc, #28]	; (8010bcc <vPortFree+0xb8>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	4a06      	ldr	r2, [pc, #24]	; (8010bcc <vPortFree+0xb8>)
 8010bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010bb6:	6938      	ldr	r0, [r7, #16]
 8010bb8:	f000 f86c 	bl	8010c94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010bbc:	f7fe ff9e 	bl	800fafc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010bc0:	bf00      	nop
 8010bc2:	3718      	adds	r7, #24
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	20008adc 	.word	0x20008adc
 8010bcc:	20008ad4 	.word	0x20008ad4

08010bd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010bdc:	4b27      	ldr	r3, [pc, #156]	; (8010c7c <prvHeapInit+0xac>)
 8010bde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00c      	beq.n	8010c04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	3307      	adds	r3, #7
 8010bee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f023 0307 	bic.w	r3, r3, #7
 8010bf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010bf8:	68ba      	ldr	r2, [r7, #8]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	4a1f      	ldr	r2, [pc, #124]	; (8010c7c <prvHeapInit+0xac>)
 8010c00:	4413      	add	r3, r2
 8010c02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c08:	4a1d      	ldr	r2, [pc, #116]	; (8010c80 <prvHeapInit+0xb0>)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c0e:	4b1c      	ldr	r3, [pc, #112]	; (8010c80 <prvHeapInit+0xb0>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	68ba      	ldr	r2, [r7, #8]
 8010c18:	4413      	add	r3, r2
 8010c1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	1a9b      	subs	r3, r3, r2
 8010c22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f023 0307 	bic.w	r3, r3, #7
 8010c2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	4a15      	ldr	r2, [pc, #84]	; (8010c84 <prvHeapInit+0xb4>)
 8010c30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c32:	4b14      	ldr	r3, [pc, #80]	; (8010c84 <prvHeapInit+0xb4>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2200      	movs	r2, #0
 8010c38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c3a:	4b12      	ldr	r3, [pc, #72]	; (8010c84 <prvHeapInit+0xb4>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	1ad2      	subs	r2, r2, r3
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c50:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <prvHeapInit+0xb4>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	4a0a      	ldr	r2, [pc, #40]	; (8010c88 <prvHeapInit+0xb8>)
 8010c5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	4a09      	ldr	r2, [pc, #36]	; (8010c8c <prvHeapInit+0xbc>)
 8010c66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c68:	4b09      	ldr	r3, [pc, #36]	; (8010c90 <prvHeapInit+0xc0>)
 8010c6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010c6e:	601a      	str	r2, [r3, #0]
}
 8010c70:	bf00      	nop
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr
 8010c7c:	20000ac8 	.word	0x20000ac8
 8010c80:	20008ac8 	.word	0x20008ac8
 8010c84:	20008ad0 	.word	0x20008ad0
 8010c88:	20008ad8 	.word	0x20008ad8
 8010c8c:	20008ad4 	.word	0x20008ad4
 8010c90:	20008adc 	.word	0x20008adc

08010c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c94:	b480      	push	{r7}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c9c:	4b28      	ldr	r3, [pc, #160]	; (8010d40 <prvInsertBlockIntoFreeList+0xac>)
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	e002      	b.n	8010ca8 <prvInsertBlockIntoFreeList+0x14>
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	60fb      	str	r3, [r7, #12]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d8f7      	bhi.n	8010ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d108      	bne.n	8010cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	685a      	ldr	r2, [r3, #4]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	441a      	add	r2, r3
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	441a      	add	r2, r3
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d118      	bne.n	8010d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	4b15      	ldr	r3, [pc, #84]	; (8010d44 <prvInsertBlockIntoFreeList+0xb0>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d00d      	beq.n	8010d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	685a      	ldr	r2, [r3, #4]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	441a      	add	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	601a      	str	r2, [r3, #0]
 8010d10:	e008      	b.n	8010d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d12:	4b0c      	ldr	r3, [pc, #48]	; (8010d44 <prvInsertBlockIntoFreeList+0xb0>)
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	601a      	str	r2, [r3, #0]
 8010d1a:	e003      	b.n	8010d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d002      	beq.n	8010d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d32:	bf00      	nop
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	20008ac8 	.word	0x20008ac8
 8010d44:	20008ad0 	.word	0x20008ad0

08010d48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	4912      	ldr	r1, [pc, #72]	; (8010d98 <MX_USB_DEVICE_Init+0x50>)
 8010d50:	4812      	ldr	r0, [pc, #72]	; (8010d9c <MX_USB_DEVICE_Init+0x54>)
 8010d52:	f7fc f95a 	bl	800d00a <USBD_Init>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010d5c:	f7f0 fa42 	bl	80011e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 8010d60:	490f      	ldr	r1, [pc, #60]	; (8010da0 <MX_USB_DEVICE_Init+0x58>)
 8010d62:	480e      	ldr	r0, [pc, #56]	; (8010d9c <MX_USB_DEVICE_Init+0x54>)
 8010d64:	f7fc f981 	bl	800d06a <USBD_RegisterClass>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010d6e:	f7f0 fa39 	bl	80011e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 8010d72:	490c      	ldr	r1, [pc, #48]	; (8010da4 <MX_USB_DEVICE_Init+0x5c>)
 8010d74:	4809      	ldr	r0, [pc, #36]	; (8010d9c <MX_USB_DEVICE_Init+0x54>)
 8010d76:	f7fa fc2b 	bl	800b5d0 <USBD_MSC_RegisterStorage>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010d80:	f7f0 fa30 	bl	80011e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010d84:	4805      	ldr	r0, [pc, #20]	; (8010d9c <MX_USB_DEVICE_Init+0x54>)
 8010d86:	f7fc f9a6 	bl	800d0d6 <USBD_Start>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010d90:	f7f0 fa28 	bl	80011e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010d94:	bf00      	nop
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	200000b8 	.word	0x200000b8
 8010d9c:	20008ae0 	.word	0x20008ae0
 8010da0:	2000000c 	.word	0x2000000c
 8010da4:	20000118 	.word	0x20000118

08010da8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	6039      	str	r1, [r7, #0]
 8010db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	2212      	movs	r2, #18
 8010db8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010dba:	4b03      	ldr	r3, [pc, #12]	; (8010dc8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	200000d8 	.word	0x200000d8

08010dcc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	6039      	str	r1, [r7, #0]
 8010dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2204      	movs	r2, #4
 8010ddc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010dde:	4b03      	ldr	r3, [pc, #12]	; (8010dec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr
 8010dec:	200000f8 	.word	0x200000f8

08010df0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	6039      	str	r1, [r7, #0]
 8010dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d105      	bne.n	8010e0e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	4907      	ldr	r1, [pc, #28]	; (8010e24 <USBD_HS_ProductStrDescriptor+0x34>)
 8010e06:	4808      	ldr	r0, [pc, #32]	; (8010e28 <USBD_HS_ProductStrDescriptor+0x38>)
 8010e08:	f7fd fb3c 	bl	800e484 <USBD_GetString>
 8010e0c:	e004      	b.n	8010e18 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	4904      	ldr	r1, [pc, #16]	; (8010e24 <USBD_HS_ProductStrDescriptor+0x34>)
 8010e12:	4805      	ldr	r0, [pc, #20]	; (8010e28 <USBD_HS_ProductStrDescriptor+0x38>)
 8010e14:	f7fd fb36 	bl	800e484 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	20008dbc 	.word	0x20008dbc
 8010e28:	08011cd8 	.word	0x08011cd8

08010e2c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4603      	mov	r3, r0
 8010e34:	6039      	str	r1, [r7, #0]
 8010e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	4904      	ldr	r1, [pc, #16]	; (8010e4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010e3c:	4804      	ldr	r0, [pc, #16]	; (8010e50 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010e3e:	f7fd fb21 	bl	800e484 <USBD_GetString>
  return USBD_StrDesc;
 8010e42:	4b02      	ldr	r3, [pc, #8]	; (8010e4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	20008dbc 	.word	0x20008dbc
 8010e50:	08011cec 	.word	0x08011cec

08010e54 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	6039      	str	r1, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	221a      	movs	r2, #26
 8010e64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010e66:	f000 f855 	bl	8010f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010e6a:	4b02      	ldr	r3, [pc, #8]	; (8010e74 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	200000fc 	.word	0x200000fc

08010e78 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	6039      	str	r1, [r7, #0]
 8010e82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010e84:	79fb      	ldrb	r3, [r7, #7]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d105      	bne.n	8010e96 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	4907      	ldr	r1, [pc, #28]	; (8010eac <USBD_HS_ConfigStrDescriptor+0x34>)
 8010e8e:	4808      	ldr	r0, [pc, #32]	; (8010eb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010e90:	f7fd faf8 	bl	800e484 <USBD_GetString>
 8010e94:	e004      	b.n	8010ea0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	4904      	ldr	r1, [pc, #16]	; (8010eac <USBD_HS_ConfigStrDescriptor+0x34>)
 8010e9a:	4805      	ldr	r0, [pc, #20]	; (8010eb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010e9c:	f7fd faf2 	bl	800e484 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ea0:	4b02      	ldr	r3, [pc, #8]	; (8010eac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	20008dbc 	.word	0x20008dbc
 8010eb0:	08011d00 	.word	0x08011d00

08010eb4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	6039      	str	r1, [r7, #0]
 8010ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d105      	bne.n	8010ed2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010ec6:	683a      	ldr	r2, [r7, #0]
 8010ec8:	4907      	ldr	r1, [pc, #28]	; (8010ee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010eca:	4808      	ldr	r0, [pc, #32]	; (8010eec <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010ecc:	f7fd fada 	bl	800e484 <USBD_GetString>
 8010ed0:	e004      	b.n	8010edc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	4904      	ldr	r1, [pc, #16]	; (8010ee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010ed6:	4805      	ldr	r0, [pc, #20]	; (8010eec <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010ed8:	f7fd fad4 	bl	800e484 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010edc:	4b02      	ldr	r3, [pc, #8]	; (8010ee8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20008dbc 	.word	0x20008dbc
 8010eec:	08011d0c 	.word	0x08011d0c

08010ef0 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	6039      	str	r1, [r7, #0]
 8010efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	220c      	movs	r2, #12
 8010f00:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8010f02:	4b03      	ldr	r3, [pc, #12]	; (8010f10 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr
 8010f10:	200000ec 	.word	0x200000ec

08010f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <Get_SerialNum+0x44>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010f20:	4b0e      	ldr	r3, [pc, #56]	; (8010f5c <Get_SerialNum+0x48>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010f26:	4b0e      	ldr	r3, [pc, #56]	; (8010f60 <Get_SerialNum+0x4c>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4413      	add	r3, r2
 8010f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d009      	beq.n	8010f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010f3a:	2208      	movs	r2, #8
 8010f3c:	4909      	ldr	r1, [pc, #36]	; (8010f64 <Get_SerialNum+0x50>)
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f000 f814 	bl	8010f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010f44:	2204      	movs	r2, #4
 8010f46:	4908      	ldr	r1, [pc, #32]	; (8010f68 <Get_SerialNum+0x54>)
 8010f48:	68b8      	ldr	r0, [r7, #8]
 8010f4a:	f000 f80f 	bl	8010f6c <IntToUnicode>
  }
}
 8010f4e:	bf00      	nop
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	1ff0f420 	.word	0x1ff0f420
 8010f5c:	1ff0f424 	.word	0x1ff0f424
 8010f60:	1ff0f428 	.word	0x1ff0f428
 8010f64:	200000fe 	.word	0x200000fe
 8010f68:	2000010e 	.word	0x2000010e

08010f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b087      	sub	sp, #28
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	4613      	mov	r3, r2
 8010f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010f7e:	2300      	movs	r3, #0
 8010f80:	75fb      	strb	r3, [r7, #23]
 8010f82:	e027      	b.n	8010fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	0f1b      	lsrs	r3, r3, #28
 8010f88:	2b09      	cmp	r3, #9
 8010f8a:	d80b      	bhi.n	8010fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	0f1b      	lsrs	r3, r3, #28
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	7dfb      	ldrb	r3, [r7, #23]
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	4619      	mov	r1, r3
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	440b      	add	r3, r1
 8010f9c:	3230      	adds	r2, #48	; 0x30
 8010f9e:	b2d2      	uxtb	r2, r2
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	e00a      	b.n	8010fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	0f1b      	lsrs	r3, r3, #28
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	7dfb      	ldrb	r3, [r7, #23]
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4619      	mov	r1, r3
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3237      	adds	r2, #55	; 0x37
 8010fb6:	b2d2      	uxtb	r2, r2
 8010fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	011b      	lsls	r3, r3, #4
 8010fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010fc0:	7dfb      	ldrb	r3, [r7, #23]
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	4413      	add	r3, r2
 8010fca:	2200      	movs	r2, #0
 8010fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010fce:	7dfb      	ldrb	r3, [r7, #23]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	75fb      	strb	r3, [r7, #23]
 8010fd4:	7dfa      	ldrb	r2, [r7, #23]
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d3d3      	bcc.n	8010f84 <IntToUnicode+0x18>
  }
}
 8010fdc:	bf00      	nop
 8010fde:	bf00      	nop
 8010fe0:	371c      	adds	r7, #28
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	BSP_SD_Init();
 8010ff4:	f7f9 fdec 	bl	800abd0 <BSP_SD_Init>
  return (USBD_OK);
 8010ff8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b08e      	sub	sp, #56	; 0x38
 8011006:	af00      	add	r7, sp, #0
 8011008:	4603      	mov	r3, r0
 801100a:	60b9      	str	r1, [r7, #8]
 801100c:	607a      	str	r2, [r7, #4]
 801100e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  BSP_SD_CardInfo info;
  int8_t ret = -1;
 8011010:	23ff      	movs	r3, #255	; 0xff
 8011012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8011016:	f7f9 fe78 	bl	800ad0a <BSP_SD_IsDetected>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00f      	beq.n	8011040 <STORAGE_GetCapacity_HS+0x3e>
  {
    BSP_SD_GetCardInfo(&info);
 8011020:	f107 0314 	add.w	r3, r7, #20
 8011024:	4618      	mov	r0, r3
 8011026:	f7f9 fe3d 	bl	800aca4 <BSP_SD_GetCardInfo>

    *block_num = info.LogBlockNbr - 1;
 801102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102c:	1e5a      	subs	r2, r3, #1
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	601a      	str	r2, [r3, #0]
    *block_size = info.LogBlockSize;
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	b29a      	uxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	801a      	strh	r2, [r3, #0]
    ret = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret;
 8011040:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8011044:	4618      	mov	r0, r3
 8011046:	3738      	adds	r7, #56	; 0x38
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  static int8_t prev_status = 0;
  int8_t ret = -1;
 8011056:	23ff      	movs	r3, #255	; 0xff
 8011058:	73fb      	strb	r3, [r7, #15]

  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801105a:	f7f9 fe56 	bl	800ad0a <BSP_SD_IsDetected>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d011      	beq.n	8011088 <STORAGE_IsReady_HS+0x3c>
  {
    if (prev_status < 0)
 8011064:	4b0f      	ldr	r3, [pc, #60]	; (80110a4 <STORAGE_IsReady_HS+0x58>)
 8011066:	f993 3000 	ldrsb.w	r3, [r3]
 801106a:	2b00      	cmp	r3, #0
 801106c:	da04      	bge.n	8011078 <STORAGE_IsReady_HS+0x2c>
    {
      BSP_SD_Init();
 801106e:	f7f9 fdaf 	bl	800abd0 <BSP_SD_Init>
      prev_status = 0;
 8011072:	4b0c      	ldr	r3, [pc, #48]	; (80110a4 <STORAGE_IsReady_HS+0x58>)
 8011074:	2200      	movs	r2, #0
 8011076:	701a      	strb	r2, [r3, #0]

    }
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011078:	f7f9 fe04 	bl	800ac84 <BSP_SD_GetCardState>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10a      	bne.n	8011098 <STORAGE_IsReady_HS+0x4c>
    {
      ret = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
 8011086:	e007      	b.n	8011098 <STORAGE_IsReady_HS+0x4c>
    }
  }
  else if (prev_status == 0)
 8011088:	4b06      	ldr	r3, [pc, #24]	; (80110a4 <STORAGE_IsReady_HS+0x58>)
 801108a:	f993 3000 	ldrsb.w	r3, [r3]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d102      	bne.n	8011098 <STORAGE_IsReady_HS+0x4c>
  {
    prev_status = -1;
 8011092:	4b04      	ldr	r3, [pc, #16]	; (80110a4 <STORAGE_IsReady_HS+0x58>)
 8011094:	22ff      	movs	r2, #255	; 0xff
 8011096:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8011098:	f997 300f 	ldrsb.w	r3, [r7, #15]
  /* USER CODE END 4 */
}
 801109c:	4618      	mov	r0, r3
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20008fbc 	.word	0x20008fbc

080110a8 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	4603      	mov	r3, r0
 80110b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 80110b2:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b086      	sub	sp, #24
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
 80110ca:	461a      	mov	r2, r3
 80110cc:	4603      	mov	r3, r0
 80110ce:	73fb      	strb	r3, [r7, #15]
 80110d0:	4613      	mov	r3, r2
 80110d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	  int8_t ret = -1;
 80110d4:	23ff      	movs	r3, #255	; 0xff
 80110d6:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80110d8:	f7f9 fe17 	bl	800ad0a <BSP_SD_IsDetected>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00d      	beq.n	80110fe <STORAGE_Read_HS+0x3e>
	  {
	    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 80110e2:	89bb      	ldrh	r3, [r7, #12]
 80110e4:	461a      	mov	r2, r3
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f7f9 fd97 	bl	800ac1c <BSP_SD_ReadBlocks_DMA>

	    /* Wait until SD card is ready to use for  new operation */
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 80110ee:	e001      	b.n	80110f4 <STORAGE_Read_HS+0x34>

	    ret = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	75fb      	strb	r3, [r7, #23]
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 80110f4:	f7f9 fdc6 	bl	800ac84 <BSP_SD_GetCardState>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1f8      	bne.n	80110f0 <STORAGE_Read_HS+0x30>
	  }
	  return ret;
 80110fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801110a:	b580      	push	{r7, lr}
 801110c:	b086      	sub	sp, #24
 801110e:	af00      	add	r7, sp, #0
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
 8011114:	461a      	mov	r2, r3
 8011116:	4603      	mov	r3, r0
 8011118:	73fb      	strb	r3, [r7, #15]
 801111a:	4613      	mov	r3, r2
 801111c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 801111e:	23ff      	movs	r3, #255	; 0xff
 8011120:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8011122:	f7f9 fdf2 	bl	800ad0a <BSP_SD_IsDetected>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00d      	beq.n	8011148 <STORAGE_Write_HS+0x3e>
	  {
	    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 801112c:	89bb      	ldrh	r3, [r7, #12]
 801112e:	461a      	mov	r2, r3
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	68b8      	ldr	r0, [r7, #8]
 8011134:	f7f9 fd8c 	bl	800ac50 <BSP_SD_WriteBlocks_DMA>

	    /* Wait until SD card is ready to use for new operation */
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8011138:	e001      	b.n	801113e <STORAGE_Write_HS+0x34>

	    ret = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	75fb      	strb	r3, [r7, #23]
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 801113e:	f7f9 fda1 	bl	800ac84 <BSP_SD_GetCardState>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1f8      	bne.n	801113a <STORAGE_Write_HS+0x30>
	  }
	  return ret;
 8011148:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801114c:	4618      	mov	r0, r3
 801114e:	3718      	adds	r7, #24
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 8011154:	b480      	push	{r7}
 8011156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 8011158:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 801115a:	4618      	mov	r0, r3
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08e      	sub	sp, #56	; 0x38
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011170:	2200      	movs	r2, #0
 8011172:	601a      	str	r2, [r3, #0]
 8011174:	605a      	str	r2, [r3, #4]
 8011176:	609a      	str	r2, [r3, #8]
 8011178:	60da      	str	r2, [r3, #12]
 801117a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a4c      	ldr	r2, [pc, #304]	; (80112b4 <HAL_PCD_MspInit+0x150>)
 8011182:	4293      	cmp	r3, r2
 8011184:	f040 8091 	bne.w	80112aa <HAL_PCD_MspInit+0x146>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011188:	4b4b      	ldr	r3, [pc, #300]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 801118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118c:	4a4a      	ldr	r2, [pc, #296]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 801118e:	f043 0302 	orr.w	r3, r3, #2
 8011192:	6313      	str	r3, [r2, #48]	; 0x30
 8011194:	4b48      	ldr	r3, [pc, #288]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011198:	f003 0302 	and.w	r3, r3, #2
 801119c:	623b      	str	r3, [r7, #32]
 801119e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80111a0:	4b45      	ldr	r3, [pc, #276]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a4:	4a44      	ldr	r2, [pc, #272]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111aa:	6313      	str	r3, [r2, #48]	; 0x30
 80111ac:	4b42      	ldr	r3, [pc, #264]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111b4:	61fb      	str	r3, [r7, #28]
 80111b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80111b8:	4b3f      	ldr	r3, [pc, #252]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111bc:	4a3e      	ldr	r2, [pc, #248]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111be:	f043 0304 	orr.w	r3, r3, #4
 80111c2:	6313      	str	r3, [r2, #48]	; 0x30
 80111c4:	4b3c      	ldr	r3, [pc, #240]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c8:	f003 0304 	and.w	r3, r3, #4
 80111cc:	61bb      	str	r3, [r7, #24]
 80111ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111d0:	4b39      	ldr	r3, [pc, #228]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d4:	4a38      	ldr	r2, [pc, #224]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111d6:	f043 0301 	orr.w	r3, r3, #1
 80111da:	6313      	str	r3, [r2, #48]	; 0x30
 80111dc:	4b36      	ldr	r3, [pc, #216]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 80111de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	617b      	str	r3, [r7, #20]
 80111e6:	697b      	ldr	r3, [r7, #20]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80111e8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111ee:	2302      	movs	r3, #2
 80111f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80111f6:	2303      	movs	r3, #3
 80111f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80111fa:	230a      	movs	r3, #10
 80111fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80111fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011202:	4619      	mov	r1, r3
 8011204:	482d      	ldr	r0, [pc, #180]	; (80112bc <HAL_PCD_MspInit+0x158>)
 8011206:	f7f1 fbe9 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 801120a:	2310      	movs	r3, #16
 801120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801120e:	2302      	movs	r3, #2
 8011210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011212:	2300      	movs	r3, #0
 8011214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011216:	2303      	movs	r3, #3
 8011218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801121a:	230a      	movs	r3, #10
 801121c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 801121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011222:	4619      	mov	r1, r3
 8011224:	4826      	ldr	r0, [pc, #152]	; (80112c0 <HAL_PCD_MspInit+0x15c>)
 8011226:	f7f1 fbd9 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 801122a:	2305      	movs	r3, #5
 801122c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801122e:	2302      	movs	r3, #2
 8011230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011232:	2300      	movs	r3, #0
 8011234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011236:	2303      	movs	r3, #3
 8011238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801123a:	230a      	movs	r3, #10
 801123c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011242:	4619      	mov	r1, r3
 8011244:	481f      	ldr	r0, [pc, #124]	; (80112c4 <HAL_PCD_MspInit+0x160>)
 8011246:	f7f1 fbc9 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 801124a:	2328      	movs	r3, #40	; 0x28
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801124e:	2302      	movs	r3, #2
 8011250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011252:	2300      	movs	r3, #0
 8011254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011256:	2303      	movs	r3, #3
 8011258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801125a:	230a      	movs	r3, #10
 801125c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011262:	4619      	mov	r1, r3
 8011264:	4818      	ldr	r0, [pc, #96]	; (80112c8 <HAL_PCD_MspInit+0x164>)
 8011266:	f7f1 fbb9 	bl	80029dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801126a:	4b13      	ldr	r3, [pc, #76]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 801126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801126e:	4a12      	ldr	r2, [pc, #72]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011274:	6313      	str	r3, [r2, #48]	; 0x30
 8011276:	4b10      	ldr	r3, [pc, #64]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801127a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801127e:	613b      	str	r3, [r7, #16]
 8011280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8011282:	4b0d      	ldr	r3, [pc, #52]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011286:	4a0c      	ldr	r2, [pc, #48]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801128c:	6313      	str	r3, [r2, #48]	; 0x30
 801128e:	4b0a      	ldr	r3, [pc, #40]	; (80112b8 <HAL_PCD_MspInit+0x154>)
 8011290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011292:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801129a:	2200      	movs	r2, #0
 801129c:	2105      	movs	r1, #5
 801129e:	204d      	movs	r0, #77	; 0x4d
 80112a0:	f7f0 fee2 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80112a4:	204d      	movs	r0, #77	; 0x4d
 80112a6:	f7f0 fefb 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80112aa:	bf00      	nop
 80112ac:	3738      	adds	r7, #56	; 0x38
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	40040000 	.word	0x40040000
 80112b8:	40023800 	.word	0x40023800
 80112bc:	40020400 	.word	0x40020400
 80112c0:	40021c00 	.word	0x40021c00
 80112c4:	40020800 	.word	0x40020800
 80112c8:	40020000 	.word	0x40020000

080112cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80112e0:	4619      	mov	r1, r3
 80112e2:	4610      	mov	r0, r2
 80112e4:	f7fb ff44 	bl	800d170 <USBD_LL_SetupStage>
}
 80112e8:	bf00      	nop
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	460b      	mov	r3, r1
 80112fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011302:	78fa      	ldrb	r2, [r7, #3]
 8011304:	6879      	ldr	r1, [r7, #4]
 8011306:	4613      	mov	r3, r2
 8011308:	00db      	lsls	r3, r3, #3
 801130a:	4413      	add	r3, r2
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	440b      	add	r3, r1
 8011310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011314:	681a      	ldr	r2, [r3, #0]
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	4619      	mov	r1, r3
 801131a:	f7fb ff7e 	bl	800d21a <USBD_LL_DataOutStage>
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b082      	sub	sp, #8
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	460b      	mov	r3, r1
 8011330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011338:	78fa      	ldrb	r2, [r7, #3]
 801133a:	6879      	ldr	r1, [r7, #4]
 801133c:	4613      	mov	r3, r2
 801133e:	00db      	lsls	r3, r3, #3
 8011340:	4413      	add	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	440b      	add	r3, r1
 8011346:	334c      	adds	r3, #76	; 0x4c
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	4619      	mov	r1, r3
 801134e:	f7fc f817 	bl	800d380 <USBD_LL_DataInStage>
}
 8011352:	bf00      	nop
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801135a:	b580      	push	{r7, lr}
 801135c:	b082      	sub	sp, #8
 801135e:	af00      	add	r7, sp, #0
 8011360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011368:	4618      	mov	r0, r3
 801136a:	f7fc f94b 	bl	800d604 <USBD_LL_SOF>
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011376:	b580      	push	{r7, lr}
 8011378:	b084      	sub	sp, #16
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801137e:	2301      	movs	r3, #1
 8011380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d102      	bne.n	8011390 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801138a:	2300      	movs	r3, #0
 801138c:	73fb      	strb	r3, [r7, #15]
 801138e:	e008      	b.n	80113a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	2b02      	cmp	r3, #2
 8011396:	d102      	bne.n	801139e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011398:	2301      	movs	r3, #1
 801139a:	73fb      	strb	r3, [r7, #15]
 801139c:	e001      	b.n	80113a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801139e:	f7ef ff21 	bl	80011e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80113a8:	7bfa      	ldrb	r2, [r7, #15]
 80113aa:	4611      	mov	r1, r2
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fc f8eb 	bl	800d588 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fc f893 	bl	800d4e4 <USBD_LL_Reset>
}
 80113be:	bf00      	nop
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
	...

080113c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fc f8e6 	bl	800d5a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	6812      	ldr	r2, [r2, #0]
 80113ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113ee:	f043 0301 	orr.w	r3, r3, #1
 80113f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6a1b      	ldr	r3, [r3, #32]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d005      	beq.n	8011408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113fc:	4b04      	ldr	r3, [pc, #16]	; (8011410 <HAL_PCD_SuspendCallback+0x48>)
 80113fe:	691b      	ldr	r3, [r3, #16]
 8011400:	4a03      	ldr	r2, [pc, #12]	; (8011410 <HAL_PCD_SuspendCallback+0x48>)
 8011402:	f043 0306 	orr.w	r3, r3, #6
 8011406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	e000ed00 	.word	0xe000ed00

08011414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011422:	4618      	mov	r0, r3
 8011424:	f7fc f8d6 	bl	800d5d4 <USBD_LL_Resume>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	460b      	mov	r3, r1
 801143a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011442:	78fa      	ldrb	r2, [r7, #3]
 8011444:	4611      	mov	r1, r2
 8011446:	4618      	mov	r0, r3
 8011448:	f7fc f92e 	bl	800d6a8 <USBD_LL_IsoOUTIncomplete>
}
 801144c:	bf00      	nop
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	460b      	mov	r3, r1
 801145e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011466:	78fa      	ldrb	r2, [r7, #3]
 8011468:	4611      	mov	r1, r2
 801146a:	4618      	mov	r0, r3
 801146c:	f7fc f8ea 	bl	800d644 <USBD_LL_IsoINIncomplete>
}
 8011470:	bf00      	nop
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011486:	4618      	mov	r0, r3
 8011488:	f7fc f940 	bl	800d70c <USBD_LL_DevConnected>
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fc f93d 	bl	800d722 <USBD_LL_DevDisconnected>
}
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d140      	bne.n	8011542 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80114c0:	4a22      	ldr	r2, [pc, #136]	; (801154c <USBD_LL_Init+0x9c>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	4a20      	ldr	r2, [pc, #128]	; (801154c <USBD_LL_Init+0x9c>)
 80114cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80114d0:	4b1e      	ldr	r3, [pc, #120]	; (801154c <USBD_LL_Init+0x9c>)
 80114d2:	4a1f      	ldr	r2, [pc, #124]	; (8011550 <USBD_LL_Init+0xa0>)
 80114d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 80114d6:	4b1d      	ldr	r3, [pc, #116]	; (801154c <USBD_LL_Init+0x9c>)
 80114d8:	2208      	movs	r2, #8
 80114da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80114dc:	4b1b      	ldr	r3, [pc, #108]	; (801154c <USBD_LL_Init+0x9c>)
 80114de:	2200      	movs	r2, #0
 80114e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80114e2:	4b1a      	ldr	r3, [pc, #104]	; (801154c <USBD_LL_Init+0x9c>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80114e8:	4b18      	ldr	r3, [pc, #96]	; (801154c <USBD_LL_Init+0x9c>)
 80114ea:	2201      	movs	r2, #1
 80114ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80114ee:	4b17      	ldr	r3, [pc, #92]	; (801154c <USBD_LL_Init+0x9c>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80114f4:	4b15      	ldr	r3, [pc, #84]	; (801154c <USBD_LL_Init+0x9c>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80114fa:	4b14      	ldr	r3, [pc, #80]	; (801154c <USBD_LL_Init+0x9c>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011500:	4b12      	ldr	r3, [pc, #72]	; (801154c <USBD_LL_Init+0x9c>)
 8011502:	2200      	movs	r2, #0
 8011504:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8011506:	4b11      	ldr	r3, [pc, #68]	; (801154c <USBD_LL_Init+0x9c>)
 8011508:	2200      	movs	r2, #0
 801150a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801150c:	4b0f      	ldr	r3, [pc, #60]	; (801154c <USBD_LL_Init+0x9c>)
 801150e:	2200      	movs	r2, #0
 8011510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8011512:	480e      	ldr	r0, [pc, #56]	; (801154c <USBD_LL_Init+0x9c>)
 8011514:	f7f2 f8d2 	bl	80036bc <HAL_PCD_Init>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801151e:	f7ef fe61 	bl	80011e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8011522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011526:	4809      	ldr	r0, [pc, #36]	; (801154c <USBD_LL_Init+0x9c>)
 8011528:	f7f3 fb79 	bl	8004c1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801152c:	2280      	movs	r2, #128	; 0x80
 801152e:	2100      	movs	r1, #0
 8011530:	4806      	ldr	r0, [pc, #24]	; (801154c <USBD_LL_Init+0x9c>)
 8011532:	f7f3 fb2d 	bl	8004b90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8011536:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801153a:	2101      	movs	r1, #1
 801153c:	4803      	ldr	r0, [pc, #12]	; (801154c <USBD_LL_Init+0x9c>)
 801153e:	f7f3 fb27 	bl	8004b90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	20008fc0 	.word	0x20008fc0
 8011550:	40040000 	.word	0x40040000

08011554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801156a:	4618      	mov	r0, r3
 801156c:	f7f2 f9ca 	bl	8003904 <HAL_PCD_Start>
 8011570:	4603      	mov	r3, r0
 8011572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011574:	7bfb      	ldrb	r3, [r7, #15]
 8011576:	4618      	mov	r0, r3
 8011578:	f000 f99e 	bl	80118b8 <USBD_Get_USB_Status>
 801157c:	4603      	mov	r3, r0
 801157e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011580:	7bbb      	ldrb	r3, [r7, #14]
}
 8011582:	4618      	mov	r0, r3
 8011584:	3710      	adds	r7, #16
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	4608      	mov	r0, r1
 8011594:	4611      	mov	r1, r2
 8011596:	461a      	mov	r2, r3
 8011598:	4603      	mov	r3, r0
 801159a:	70fb      	strb	r3, [r7, #3]
 801159c:	460b      	mov	r3, r1
 801159e:	70bb      	strb	r3, [r7, #2]
 80115a0:	4613      	mov	r3, r2
 80115a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115a4:	2300      	movs	r3, #0
 80115a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80115b2:	78bb      	ldrb	r3, [r7, #2]
 80115b4:	883a      	ldrh	r2, [r7, #0]
 80115b6:	78f9      	ldrb	r1, [r7, #3]
 80115b8:	f7f2 feb7 	bl	800432a <HAL_PCD_EP_Open>
 80115bc:	4603      	mov	r3, r0
 80115be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115c0:	7bfb      	ldrb	r3, [r7, #15]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f000 f978 	bl	80118b8 <USBD_Get_USB_Status>
 80115c8:	4603      	mov	r3, r0
 80115ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	460b      	mov	r3, r1
 80115e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115e2:	2300      	movs	r3, #0
 80115e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115e6:	2300      	movs	r3, #0
 80115e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115f0:	78fa      	ldrb	r2, [r7, #3]
 80115f2:	4611      	mov	r1, r2
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7f2 ff00 	bl	80043fa <HAL_PCD_EP_Close>
 80115fa:	4603      	mov	r3, r0
 80115fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115fe:	7bfb      	ldrb	r3, [r7, #15]
 8011600:	4618      	mov	r0, r3
 8011602:	f000 f959 	bl	80118b8 <USBD_Get_USB_Status>
 8011606:	4603      	mov	r3, r0
 8011608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801160a:	7bbb      	ldrb	r3, [r7, #14]
}
 801160c:	4618      	mov	r0, r3
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	460b      	mov	r3, r1
 801161e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011620:	2300      	movs	r3, #0
 8011622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801162e:	78fa      	ldrb	r2, [r7, #3]
 8011630:	4611      	mov	r1, r2
 8011632:	4618      	mov	r0, r3
 8011634:	f7f3 f8c3 	bl	80047be <HAL_PCD_EP_Flush>
 8011638:	4603      	mov	r3, r0
 801163a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801163c:	7bfb      	ldrb	r3, [r7, #15]
 801163e:	4618      	mov	r0, r3
 8011640:	f000 f93a 	bl	80118b8 <USBD_Get_USB_Status>
 8011644:	4603      	mov	r3, r0
 8011646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011648:	7bbb      	ldrb	r3, [r7, #14]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}

08011652 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011652:	b580      	push	{r7, lr}
 8011654:	b084      	sub	sp, #16
 8011656:	af00      	add	r7, sp, #0
 8011658:	6078      	str	r0, [r7, #4]
 801165a:	460b      	mov	r3, r1
 801165c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801166c:	78fa      	ldrb	r2, [r7, #3]
 801166e:	4611      	mov	r1, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f7f2 ffb9 	bl	80045e8 <HAL_PCD_EP_SetStall>
 8011676:	4603      	mov	r3, r0
 8011678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801167a:	7bfb      	ldrb	r3, [r7, #15]
 801167c:	4618      	mov	r0, r3
 801167e:	f000 f91b 	bl	80118b8 <USBD_Get_USB_Status>
 8011682:	4603      	mov	r3, r0
 8011684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011686:	7bbb      	ldrb	r3, [r7, #14]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	460b      	mov	r3, r1
 801169a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80116aa:	78fa      	ldrb	r2, [r7, #3]
 80116ac:	4611      	mov	r1, r2
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f2 fffe 	bl	80046b0 <HAL_PCD_EP_ClrStall>
 80116b4:	4603      	mov	r3, r0
 80116b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f000 f8fc 	bl	80118b8 <USBD_Get_USB_Status>
 80116c0:	4603      	mov	r3, r0
 80116c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116ce:	b480      	push	{r7}
 80116d0:	b085      	sub	sp, #20
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	460b      	mov	r3, r1
 80116d8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80116e0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80116e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	da0b      	bge.n	8011702 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80116ea:	78fb      	ldrb	r3, [r7, #3]
 80116ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80116f0:	68f9      	ldr	r1, [r7, #12]
 80116f2:	4613      	mov	r3, r2
 80116f4:	00db      	lsls	r3, r3, #3
 80116f6:	4413      	add	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	440b      	add	r3, r1
 80116fc:	333e      	adds	r3, #62	; 0x3e
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	e00b      	b.n	801171a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011702:	78fb      	ldrb	r3, [r7, #3]
 8011704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011708:	68f9      	ldr	r1, [r7, #12]
 801170a:	4613      	mov	r3, r2
 801170c:	00db      	lsls	r3, r3, #3
 801170e:	4413      	add	r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	440b      	add	r3, r1
 8011714:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011718:	781b      	ldrb	r3, [r3, #0]
  }
}
 801171a:	4618      	mov	r0, r3
 801171c:	3714      	adds	r7, #20
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011726:	b580      	push	{r7, lr}
 8011728:	b084      	sub	sp, #16
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
 801172e:	460b      	mov	r3, r1
 8011730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011732:	2300      	movs	r3, #0
 8011734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011740:	78fa      	ldrb	r2, [r7, #3]
 8011742:	4611      	mov	r1, r2
 8011744:	4618      	mov	r0, r3
 8011746:	f7f2 fdcb 	bl	80042e0 <HAL_PCD_SetAddress>
 801174a:	4603      	mov	r3, r0
 801174c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f8b1 	bl	80118b8 <USBD_Get_USB_Status>
 8011756:	4603      	mov	r3, r0
 8011758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801175a:	7bbb      	ldrb	r3, [r7, #14]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	460b      	mov	r3, r1
 8011772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011774:	2300      	movs	r3, #0
 8011776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011778:	2300      	movs	r3, #0
 801177a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011782:	7af9      	ldrb	r1, [r7, #11]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	f7f2 fee4 	bl	8004554 <HAL_PCD_EP_Transmit>
 801178c:	4603      	mov	r3, r0
 801178e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	4618      	mov	r0, r3
 8011794:	f000 f890 	bl	80118b8 <USBD_Get_USB_Status>
 8011798:	4603      	mov	r3, r0
 801179a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801179c:	7dbb      	ldrb	r3, [r7, #22]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b086      	sub	sp, #24
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]
 80117b2:	460b      	mov	r3, r1
 80117b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ba:	2300      	movs	r3, #0
 80117bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80117c4:	7af9      	ldrb	r1, [r7, #11]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	f7f2 fe60 	bl	800448e <HAL_PCD_EP_Receive>
 80117ce:	4603      	mov	r3, r0
 80117d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 f86f 	bl	80118b8 <USBD_Get_USB_Status>
 80117da:	4603      	mov	r3, r0
 80117dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80117de:	7dbb      	ldrb	r3, [r7, #22]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3718      	adds	r7, #24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	460b      	mov	r3, r1
 80117f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80117fa:	78fa      	ldrb	r2, [r7, #3]
 80117fc:	4611      	mov	r1, r2
 80117fe:	4618      	mov	r0, r3
 8011800:	f7f2 fe90 	bl	8004524 <HAL_PCD_EP_GetRxCount>
 8011804:	4603      	mov	r3, r0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
	...

08011810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	460b      	mov	r3, r1
 801181a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d002      	beq.n	8011828 <HAL_PCDEx_LPM_Callback+0x18>
 8011822:	2b01      	cmp	r3, #1
 8011824:	d01f      	beq.n	8011866 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011826:	e03b      	b.n	80118a0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a1b      	ldr	r3, [r3, #32]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d007      	beq.n	8011840 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011830:	f000 f83c 	bl	80118ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011834:	4b1c      	ldr	r3, [pc, #112]	; (80118a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011836:	691b      	ldr	r3, [r3, #16]
 8011838:	4a1b      	ldr	r2, [pc, #108]	; (80118a8 <HAL_PCDEx_LPM_Callback+0x98>)
 801183a:	f023 0306 	bic.w	r3, r3, #6
 801183e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	6812      	ldr	r2, [r2, #0]
 801184e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011852:	f023 0301 	bic.w	r3, r3, #1
 8011856:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801185e:	4618      	mov	r0, r3
 8011860:	f7fb feb8 	bl	800d5d4 <USBD_LL_Resume>
    break;
 8011864:	e01c      	b.n	80118a0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	6812      	ldr	r2, [r2, #0]
 8011874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011878:	f043 0301 	orr.w	r3, r3, #1
 801187c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011884:	4618      	mov	r0, r3
 8011886:	f7fb fe8f 	bl	800d5a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d005      	beq.n	801189e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011892:	4b05      	ldr	r3, [pc, #20]	; (80118a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011894:	691b      	ldr	r3, [r3, #16]
 8011896:	4a04      	ldr	r2, [pc, #16]	; (80118a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011898:	f043 0306 	orr.w	r3, r3, #6
 801189c:	6113      	str	r3, [r2, #16]
    break;
 801189e:	bf00      	nop
}
 80118a0:	bf00      	nop
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	e000ed00 	.word	0xe000ed00

080118ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80118b0:	f7ee fea0 	bl	80005f4 <SystemClock_Config>
}
 80118b4:	bf00      	nop
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118c2:	2300      	movs	r3, #0
 80118c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118c6:	79fb      	ldrb	r3, [r7, #7]
 80118c8:	2b03      	cmp	r3, #3
 80118ca:	d817      	bhi.n	80118fc <USBD_Get_USB_Status+0x44>
 80118cc:	a201      	add	r2, pc, #4	; (adr r2, 80118d4 <USBD_Get_USB_Status+0x1c>)
 80118ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d2:	bf00      	nop
 80118d4:	080118e5 	.word	0x080118e5
 80118d8:	080118eb 	.word	0x080118eb
 80118dc:	080118f1 	.word	0x080118f1
 80118e0:	080118f7 	.word	0x080118f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73fb      	strb	r3, [r7, #15]
    break;
 80118e8:	e00b      	b.n	8011902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80118ea:	2303      	movs	r3, #3
 80118ec:	73fb      	strb	r3, [r7, #15]
    break;
 80118ee:	e008      	b.n	8011902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80118f0:	2301      	movs	r3, #1
 80118f2:	73fb      	strb	r3, [r7, #15]
    break;
 80118f4:	e005      	b.n	8011902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80118f6:	2303      	movs	r3, #3
 80118f8:	73fb      	strb	r3, [r7, #15]
    break;
 80118fa:	e002      	b.n	8011902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80118fc:	2303      	movs	r3, #3
 80118fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011900:	bf00      	nop
  }
  return usb_status;
 8011902:	7bfb      	ldrb	r3, [r7, #15]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3714      	adds	r7, #20
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <__errno>:
 8011910:	4b01      	ldr	r3, [pc, #4]	; (8011918 <__errno+0x8>)
 8011912:	6818      	ldr	r0, [r3, #0]
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	20000138 	.word	0x20000138

0801191c <__libc_init_array>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	4d0d      	ldr	r5, [pc, #52]	; (8011954 <__libc_init_array+0x38>)
 8011920:	4c0d      	ldr	r4, [pc, #52]	; (8011958 <__libc_init_array+0x3c>)
 8011922:	1b64      	subs	r4, r4, r5
 8011924:	10a4      	asrs	r4, r4, #2
 8011926:	2600      	movs	r6, #0
 8011928:	42a6      	cmp	r6, r4
 801192a:	d109      	bne.n	8011940 <__libc_init_array+0x24>
 801192c:	4d0b      	ldr	r5, [pc, #44]	; (801195c <__libc_init_array+0x40>)
 801192e:	4c0c      	ldr	r4, [pc, #48]	; (8011960 <__libc_init_array+0x44>)
 8011930:	f000 f9a6 	bl	8011c80 <_init>
 8011934:	1b64      	subs	r4, r4, r5
 8011936:	10a4      	asrs	r4, r4, #2
 8011938:	2600      	movs	r6, #0
 801193a:	42a6      	cmp	r6, r4
 801193c:	d105      	bne.n	801194a <__libc_init_array+0x2e>
 801193e:	bd70      	pop	{r4, r5, r6, pc}
 8011940:	f855 3b04 	ldr.w	r3, [r5], #4
 8011944:	4798      	blx	r3
 8011946:	3601      	adds	r6, #1
 8011948:	e7ee      	b.n	8011928 <__libc_init_array+0xc>
 801194a:	f855 3b04 	ldr.w	r3, [r5], #4
 801194e:	4798      	blx	r3
 8011950:	3601      	adds	r6, #1
 8011952:	e7f2      	b.n	801193a <__libc_init_array+0x1e>
 8011954:	08011ddc 	.word	0x08011ddc
 8011958:	08011ddc 	.word	0x08011ddc
 801195c:	08011ddc 	.word	0x08011ddc
 8011960:	08011de0 	.word	0x08011de0

08011964 <__retarget_lock_acquire_recursive>:
 8011964:	4770      	bx	lr

08011966 <__retarget_lock_release_recursive>:
 8011966:	4770      	bx	lr

08011968 <malloc>:
 8011968:	4b02      	ldr	r3, [pc, #8]	; (8011974 <malloc+0xc>)
 801196a:	4601      	mov	r1, r0
 801196c:	6818      	ldr	r0, [r3, #0]
 801196e:	f000 b88d 	b.w	8011a8c <_malloc_r>
 8011972:	bf00      	nop
 8011974:	20000138 	.word	0x20000138

08011978 <free>:
 8011978:	4b02      	ldr	r3, [pc, #8]	; (8011984 <free+0xc>)
 801197a:	4601      	mov	r1, r0
 801197c:	6818      	ldr	r0, [r3, #0]
 801197e:	f000 b819 	b.w	80119b4 <_free_r>
 8011982:	bf00      	nop
 8011984:	20000138 	.word	0x20000138

08011988 <memcpy>:
 8011988:	440a      	add	r2, r1
 801198a:	4291      	cmp	r1, r2
 801198c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011990:	d100      	bne.n	8011994 <memcpy+0xc>
 8011992:	4770      	bx	lr
 8011994:	b510      	push	{r4, lr}
 8011996:	f811 4b01 	ldrb.w	r4, [r1], #1
 801199a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801199e:	4291      	cmp	r1, r2
 80119a0:	d1f9      	bne.n	8011996 <memcpy+0xe>
 80119a2:	bd10      	pop	{r4, pc}

080119a4 <memset>:
 80119a4:	4402      	add	r2, r0
 80119a6:	4603      	mov	r3, r0
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d100      	bne.n	80119ae <memset+0xa>
 80119ac:	4770      	bx	lr
 80119ae:	f803 1b01 	strb.w	r1, [r3], #1
 80119b2:	e7f9      	b.n	80119a8 <memset+0x4>

080119b4 <_free_r>:
 80119b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119b6:	2900      	cmp	r1, #0
 80119b8:	d044      	beq.n	8011a44 <_free_r+0x90>
 80119ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119be:	9001      	str	r0, [sp, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f1a1 0404 	sub.w	r4, r1, #4
 80119c6:	bfb8      	it	lt
 80119c8:	18e4      	addlt	r4, r4, r3
 80119ca:	f000 f94d 	bl	8011c68 <__malloc_lock>
 80119ce:	4a1e      	ldr	r2, [pc, #120]	; (8011a48 <_free_r+0x94>)
 80119d0:	9801      	ldr	r0, [sp, #4]
 80119d2:	6813      	ldr	r3, [r2, #0]
 80119d4:	b933      	cbnz	r3, 80119e4 <_free_r+0x30>
 80119d6:	6063      	str	r3, [r4, #4]
 80119d8:	6014      	str	r4, [r2, #0]
 80119da:	b003      	add	sp, #12
 80119dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119e0:	f000 b948 	b.w	8011c74 <__malloc_unlock>
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	d908      	bls.n	80119fa <_free_r+0x46>
 80119e8:	6825      	ldr	r5, [r4, #0]
 80119ea:	1961      	adds	r1, r4, r5
 80119ec:	428b      	cmp	r3, r1
 80119ee:	bf01      	itttt	eq
 80119f0:	6819      	ldreq	r1, [r3, #0]
 80119f2:	685b      	ldreq	r3, [r3, #4]
 80119f4:	1949      	addeq	r1, r1, r5
 80119f6:	6021      	streq	r1, [r4, #0]
 80119f8:	e7ed      	b.n	80119d6 <_free_r+0x22>
 80119fa:	461a      	mov	r2, r3
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	b10b      	cbz	r3, 8011a04 <_free_r+0x50>
 8011a00:	42a3      	cmp	r3, r4
 8011a02:	d9fa      	bls.n	80119fa <_free_r+0x46>
 8011a04:	6811      	ldr	r1, [r2, #0]
 8011a06:	1855      	adds	r5, r2, r1
 8011a08:	42a5      	cmp	r5, r4
 8011a0a:	d10b      	bne.n	8011a24 <_free_r+0x70>
 8011a0c:	6824      	ldr	r4, [r4, #0]
 8011a0e:	4421      	add	r1, r4
 8011a10:	1854      	adds	r4, r2, r1
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	6011      	str	r1, [r2, #0]
 8011a16:	d1e0      	bne.n	80119da <_free_r+0x26>
 8011a18:	681c      	ldr	r4, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	6053      	str	r3, [r2, #4]
 8011a1e:	4421      	add	r1, r4
 8011a20:	6011      	str	r1, [r2, #0]
 8011a22:	e7da      	b.n	80119da <_free_r+0x26>
 8011a24:	d902      	bls.n	8011a2c <_free_r+0x78>
 8011a26:	230c      	movs	r3, #12
 8011a28:	6003      	str	r3, [r0, #0]
 8011a2a:	e7d6      	b.n	80119da <_free_r+0x26>
 8011a2c:	6825      	ldr	r5, [r4, #0]
 8011a2e:	1961      	adds	r1, r4, r5
 8011a30:	428b      	cmp	r3, r1
 8011a32:	bf04      	itt	eq
 8011a34:	6819      	ldreq	r1, [r3, #0]
 8011a36:	685b      	ldreq	r3, [r3, #4]
 8011a38:	6063      	str	r3, [r4, #4]
 8011a3a:	bf04      	itt	eq
 8011a3c:	1949      	addeq	r1, r1, r5
 8011a3e:	6021      	streq	r1, [r4, #0]
 8011a40:	6054      	str	r4, [r2, #4]
 8011a42:	e7ca      	b.n	80119da <_free_r+0x26>
 8011a44:	b003      	add	sp, #12
 8011a46:	bd30      	pop	{r4, r5, pc}
 8011a48:	200094cc 	.word	0x200094cc

08011a4c <sbrk_aligned>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	4e0e      	ldr	r6, [pc, #56]	; (8011a88 <sbrk_aligned+0x3c>)
 8011a50:	460c      	mov	r4, r1
 8011a52:	6831      	ldr	r1, [r6, #0]
 8011a54:	4605      	mov	r5, r0
 8011a56:	b911      	cbnz	r1, 8011a5e <sbrk_aligned+0x12>
 8011a58:	f000 f8f6 	bl	8011c48 <_sbrk_r>
 8011a5c:	6030      	str	r0, [r6, #0]
 8011a5e:	4621      	mov	r1, r4
 8011a60:	4628      	mov	r0, r5
 8011a62:	f000 f8f1 	bl	8011c48 <_sbrk_r>
 8011a66:	1c43      	adds	r3, r0, #1
 8011a68:	d00a      	beq.n	8011a80 <sbrk_aligned+0x34>
 8011a6a:	1cc4      	adds	r4, r0, #3
 8011a6c:	f024 0403 	bic.w	r4, r4, #3
 8011a70:	42a0      	cmp	r0, r4
 8011a72:	d007      	beq.n	8011a84 <sbrk_aligned+0x38>
 8011a74:	1a21      	subs	r1, r4, r0
 8011a76:	4628      	mov	r0, r5
 8011a78:	f000 f8e6 	bl	8011c48 <_sbrk_r>
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	d101      	bne.n	8011a84 <sbrk_aligned+0x38>
 8011a80:	f04f 34ff 	mov.w	r4, #4294967295
 8011a84:	4620      	mov	r0, r4
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	200094d0 	.word	0x200094d0

08011a8c <_malloc_r>:
 8011a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a90:	1ccd      	adds	r5, r1, #3
 8011a92:	f025 0503 	bic.w	r5, r5, #3
 8011a96:	3508      	adds	r5, #8
 8011a98:	2d0c      	cmp	r5, #12
 8011a9a:	bf38      	it	cc
 8011a9c:	250c      	movcc	r5, #12
 8011a9e:	2d00      	cmp	r5, #0
 8011aa0:	4607      	mov	r7, r0
 8011aa2:	db01      	blt.n	8011aa8 <_malloc_r+0x1c>
 8011aa4:	42a9      	cmp	r1, r5
 8011aa6:	d905      	bls.n	8011ab4 <_malloc_r+0x28>
 8011aa8:	230c      	movs	r3, #12
 8011aaa:	603b      	str	r3, [r7, #0]
 8011aac:	2600      	movs	r6, #0
 8011aae:	4630      	mov	r0, r6
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab4:	4e2e      	ldr	r6, [pc, #184]	; (8011b70 <_malloc_r+0xe4>)
 8011ab6:	f000 f8d7 	bl	8011c68 <__malloc_lock>
 8011aba:	6833      	ldr	r3, [r6, #0]
 8011abc:	461c      	mov	r4, r3
 8011abe:	bb34      	cbnz	r4, 8011b0e <_malloc_r+0x82>
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	f7ff ffc2 	bl	8011a4c <sbrk_aligned>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	4604      	mov	r4, r0
 8011acc:	d14d      	bne.n	8011b6a <_malloc_r+0xde>
 8011ace:	6834      	ldr	r4, [r6, #0]
 8011ad0:	4626      	mov	r6, r4
 8011ad2:	2e00      	cmp	r6, #0
 8011ad4:	d140      	bne.n	8011b58 <_malloc_r+0xcc>
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	4631      	mov	r1, r6
 8011ada:	4638      	mov	r0, r7
 8011adc:	eb04 0803 	add.w	r8, r4, r3
 8011ae0:	f000 f8b2 	bl	8011c48 <_sbrk_r>
 8011ae4:	4580      	cmp	r8, r0
 8011ae6:	d13a      	bne.n	8011b5e <_malloc_r+0xd2>
 8011ae8:	6821      	ldr	r1, [r4, #0]
 8011aea:	3503      	adds	r5, #3
 8011aec:	1a6d      	subs	r5, r5, r1
 8011aee:	f025 0503 	bic.w	r5, r5, #3
 8011af2:	3508      	adds	r5, #8
 8011af4:	2d0c      	cmp	r5, #12
 8011af6:	bf38      	it	cc
 8011af8:	250c      	movcc	r5, #12
 8011afa:	4629      	mov	r1, r5
 8011afc:	4638      	mov	r0, r7
 8011afe:	f7ff ffa5 	bl	8011a4c <sbrk_aligned>
 8011b02:	3001      	adds	r0, #1
 8011b04:	d02b      	beq.n	8011b5e <_malloc_r+0xd2>
 8011b06:	6823      	ldr	r3, [r4, #0]
 8011b08:	442b      	add	r3, r5
 8011b0a:	6023      	str	r3, [r4, #0]
 8011b0c:	e00e      	b.n	8011b2c <_malloc_r+0xa0>
 8011b0e:	6822      	ldr	r2, [r4, #0]
 8011b10:	1b52      	subs	r2, r2, r5
 8011b12:	d41e      	bmi.n	8011b52 <_malloc_r+0xc6>
 8011b14:	2a0b      	cmp	r2, #11
 8011b16:	d916      	bls.n	8011b46 <_malloc_r+0xba>
 8011b18:	1961      	adds	r1, r4, r5
 8011b1a:	42a3      	cmp	r3, r4
 8011b1c:	6025      	str	r5, [r4, #0]
 8011b1e:	bf18      	it	ne
 8011b20:	6059      	strne	r1, [r3, #4]
 8011b22:	6863      	ldr	r3, [r4, #4]
 8011b24:	bf08      	it	eq
 8011b26:	6031      	streq	r1, [r6, #0]
 8011b28:	5162      	str	r2, [r4, r5]
 8011b2a:	604b      	str	r3, [r1, #4]
 8011b2c:	4638      	mov	r0, r7
 8011b2e:	f104 060b 	add.w	r6, r4, #11
 8011b32:	f000 f89f 	bl	8011c74 <__malloc_unlock>
 8011b36:	f026 0607 	bic.w	r6, r6, #7
 8011b3a:	1d23      	adds	r3, r4, #4
 8011b3c:	1af2      	subs	r2, r6, r3
 8011b3e:	d0b6      	beq.n	8011aae <_malloc_r+0x22>
 8011b40:	1b9b      	subs	r3, r3, r6
 8011b42:	50a3      	str	r3, [r4, r2]
 8011b44:	e7b3      	b.n	8011aae <_malloc_r+0x22>
 8011b46:	6862      	ldr	r2, [r4, #4]
 8011b48:	42a3      	cmp	r3, r4
 8011b4a:	bf0c      	ite	eq
 8011b4c:	6032      	streq	r2, [r6, #0]
 8011b4e:	605a      	strne	r2, [r3, #4]
 8011b50:	e7ec      	b.n	8011b2c <_malloc_r+0xa0>
 8011b52:	4623      	mov	r3, r4
 8011b54:	6864      	ldr	r4, [r4, #4]
 8011b56:	e7b2      	b.n	8011abe <_malloc_r+0x32>
 8011b58:	4634      	mov	r4, r6
 8011b5a:	6876      	ldr	r6, [r6, #4]
 8011b5c:	e7b9      	b.n	8011ad2 <_malloc_r+0x46>
 8011b5e:	230c      	movs	r3, #12
 8011b60:	603b      	str	r3, [r7, #0]
 8011b62:	4638      	mov	r0, r7
 8011b64:	f000 f886 	bl	8011c74 <__malloc_unlock>
 8011b68:	e7a1      	b.n	8011aae <_malloc_r+0x22>
 8011b6a:	6025      	str	r5, [r4, #0]
 8011b6c:	e7de      	b.n	8011b2c <_malloc_r+0xa0>
 8011b6e:	bf00      	nop
 8011b70:	200094cc 	.word	0x200094cc

08011b74 <cleanup_glue>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	460c      	mov	r4, r1
 8011b78:	6809      	ldr	r1, [r1, #0]
 8011b7a:	4605      	mov	r5, r0
 8011b7c:	b109      	cbz	r1, 8011b82 <cleanup_glue+0xe>
 8011b7e:	f7ff fff9 	bl	8011b74 <cleanup_glue>
 8011b82:	4621      	mov	r1, r4
 8011b84:	4628      	mov	r0, r5
 8011b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b8a:	f7ff bf13 	b.w	80119b4 <_free_r>
	...

08011b90 <_reclaim_reent>:
 8011b90:	4b2c      	ldr	r3, [pc, #176]	; (8011c44 <_reclaim_reent+0xb4>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4283      	cmp	r3, r0
 8011b96:	b570      	push	{r4, r5, r6, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	d051      	beq.n	8011c40 <_reclaim_reent+0xb0>
 8011b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011b9e:	b143      	cbz	r3, 8011bb2 <_reclaim_reent+0x22>
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d14a      	bne.n	8011c3c <_reclaim_reent+0xac>
 8011ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ba8:	6819      	ldr	r1, [r3, #0]
 8011baa:	b111      	cbz	r1, 8011bb2 <_reclaim_reent+0x22>
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7ff ff01 	bl	80119b4 <_free_r>
 8011bb2:	6961      	ldr	r1, [r4, #20]
 8011bb4:	b111      	cbz	r1, 8011bbc <_reclaim_reent+0x2c>
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f7ff fefc 	bl	80119b4 <_free_r>
 8011bbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011bbe:	b111      	cbz	r1, 8011bc6 <_reclaim_reent+0x36>
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f7ff fef7 	bl	80119b4 <_free_r>
 8011bc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bc8:	b111      	cbz	r1, 8011bd0 <_reclaim_reent+0x40>
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f7ff fef2 	bl	80119b4 <_free_r>
 8011bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011bd2:	b111      	cbz	r1, 8011bda <_reclaim_reent+0x4a>
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7ff feed 	bl	80119b4 <_free_r>
 8011bda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011bdc:	b111      	cbz	r1, 8011be4 <_reclaim_reent+0x54>
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7ff fee8 	bl	80119b4 <_free_r>
 8011be4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011be6:	b111      	cbz	r1, 8011bee <_reclaim_reent+0x5e>
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff fee3 	bl	80119b4 <_free_r>
 8011bee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011bf0:	b111      	cbz	r1, 8011bf8 <_reclaim_reent+0x68>
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f7ff fede 	bl	80119b4 <_free_r>
 8011bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bfa:	b111      	cbz	r1, 8011c02 <_reclaim_reent+0x72>
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff fed9 	bl	80119b4 <_free_r>
 8011c02:	69a3      	ldr	r3, [r4, #24]
 8011c04:	b1e3      	cbz	r3, 8011c40 <_reclaim_reent+0xb0>
 8011c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c08:	4620      	mov	r0, r4
 8011c0a:	4798      	blx	r3
 8011c0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c0e:	b1b9      	cbz	r1, 8011c40 <_reclaim_reent+0xb0>
 8011c10:	4620      	mov	r0, r4
 8011c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c16:	f7ff bfad 	b.w	8011b74 <cleanup_glue>
 8011c1a:	5949      	ldr	r1, [r1, r5]
 8011c1c:	b941      	cbnz	r1, 8011c30 <_reclaim_reent+0xa0>
 8011c1e:	3504      	adds	r5, #4
 8011c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c22:	2d80      	cmp	r5, #128	; 0x80
 8011c24:	68d9      	ldr	r1, [r3, #12]
 8011c26:	d1f8      	bne.n	8011c1a <_reclaim_reent+0x8a>
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f7ff fec3 	bl	80119b4 <_free_r>
 8011c2e:	e7ba      	b.n	8011ba6 <_reclaim_reent+0x16>
 8011c30:	680e      	ldr	r6, [r1, #0]
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7ff febe 	bl	80119b4 <_free_r>
 8011c38:	4631      	mov	r1, r6
 8011c3a:	e7ef      	b.n	8011c1c <_reclaim_reent+0x8c>
 8011c3c:	2500      	movs	r5, #0
 8011c3e:	e7ef      	b.n	8011c20 <_reclaim_reent+0x90>
 8011c40:	bd70      	pop	{r4, r5, r6, pc}
 8011c42:	bf00      	nop
 8011c44:	20000138 	.word	0x20000138

08011c48 <_sbrk_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4d06      	ldr	r5, [pc, #24]	; (8011c64 <_sbrk_r+0x1c>)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	4604      	mov	r4, r0
 8011c50:	4608      	mov	r0, r1
 8011c52:	602b      	str	r3, [r5, #0]
 8011c54:	f7f0 f88e 	bl	8001d74 <_sbrk>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_sbrk_r+0x1a>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_sbrk_r+0x1a>
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	200094d4 	.word	0x200094d4

08011c68 <__malloc_lock>:
 8011c68:	4801      	ldr	r0, [pc, #4]	; (8011c70 <__malloc_lock+0x8>)
 8011c6a:	f7ff be7b 	b.w	8011964 <__retarget_lock_acquire_recursive>
 8011c6e:	bf00      	nop
 8011c70:	200094c8 	.word	0x200094c8

08011c74 <__malloc_unlock>:
 8011c74:	4801      	ldr	r0, [pc, #4]	; (8011c7c <__malloc_unlock+0x8>)
 8011c76:	f7ff be76 	b.w	8011966 <__retarget_lock_release_recursive>
 8011c7a:	bf00      	nop
 8011c7c:	200094c8 	.word	0x200094c8

08011c80 <_init>:
 8011c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c82:	bf00      	nop
 8011c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c86:	bc08      	pop	{r3}
 8011c88:	469e      	mov	lr, r3
 8011c8a:	4770      	bx	lr

08011c8c <_fini>:
 8011c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c8e:	bf00      	nop
 8011c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c92:	bc08      	pop	{r3}
 8011c94:	469e      	mov	lr, r3
 8011c96:	4770      	bx	lr
